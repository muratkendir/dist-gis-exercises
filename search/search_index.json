{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dist-gis-exercises","text":""},{"location":"#the-notebooks-used-in-the-distributed-geoinformation-systems-and-cloud-computing-courses","title":"The notebooks used in the \"Distributed Geoinformation Systems and Cloud Computing\" courses","text":"<p>Main Author: M. Sc. Murat Kendir Supervisor: Prof. Thomas Kolbe</p> <p>Contact: murat.kendir(at)tum.de</p> <p>Run the Python Notebook via Binder:</p> <p></p>"},{"location":"#exercises","title":"Exercises","text":"<ul> <li>Exercise 2 (Introduction to Python with Samples)</li> <li>Exercise 3 (Spatial Data Infrastructures)</li> </ul>"},{"location":"#local-installation-instructions","title":"Local Installation Instructions","text":"<ul> <li>Virtual Env.  on Windows devices with PIP*</li> <li>Virtual Env.  on Linux devices with PIP</li> </ul> <p>*PIP : Python's native package management system, which can pull the packages from the PYPI online repository.</p>"},{"location":"exercise2/","title":"Introduction to Python with an Example App Based on Geospatial Data","text":"Murat Kendir, Prof. Thomas Kolbe || Chair of Geoinformatics, TUM || murat.kendir@tum.de  <ul> <li>In the previous exercise we explored the BayernAtlas website and experienced the data services and interactions behind the web interface by using Web Developer Tool.</li> <li>In this exercise, you will learn how to access similar data sources (web services) and manage the data using some simple Python codes.</li> <li>However, before starting this exercise you need to know more about the datasets and how to access it.</li> </ul>"},{"location":"exercise2/#step-1-visit-bayernatlas-website","title":"Step 1) Visit BayernAtlas website","text":"<ul> <li> Open the \"web developer tool\" by pressing Ctrl+Shift+C (or Ctrl+Shift+I) or by finding the tool in the browser menu.</li> <li> Select a background map at any specific location on the map.</li> <li> Check the URL of a raster image taken as a base map from the BayernAtlas website.</li> <li> Copy the URL and try requesting this image by pasting the URL into the address bar.</li> <li> or you can test the URL using the \"curl\" program at the command prompt (CMD / Eingabeaufforderung). </li> </ul>"},{"location":"exercise2/#step-2-make-a-request-with-python-and-requests-library","title":"Step 2) Make a request with Python and \"Requests\" library","text":"<ul> <li> Start a text editor (Notepad, Notepad++, SublimeText) or an IDE (Idle, Spyder, PyCharm)</li> <li> Write the following code in the editor and save it as a file with .PY extension.</li> <li>Tip: Enable file extensions in Windows Explorer to view all file extensions.<ul> <li>how to enable file extensions (in english)</li> <li>how to enable file extensions (in german)</li> </ul> </li> <li> Open command prompt (Eingabeaufforderung) and navigate to the same folder as your python file. Execute the file by typing <code>python MY_PYTHON_CODE.py</code> (or type in <code>python3 MY_PYTHON_CODE.py</code> in Linux systems)</li> <li> Try running python within interactive mode by typing <code>python --interactive MY_PYTHON_CODE.py</code>.</li> </ul> <pre><code># Import the native \"requests\" library to send a request to the web source.\nimport requests\n\n# Replace the URL in the follwoing code with your selected URL\nmydata = requests.get(\"https://intergeo33.bayernwolke.de/betty/c_hist/13/4197/4598\")\n\n#Check what the \"mydata\" object.\nprint(mydata)\n</code></pre> <pre><code>&lt;Response [200]&gt;\n</code></pre> Variable Name mydata Data Type requests.models.Response"},{"location":"exercise2/#2a-what-is-happened","title":"2a) What is happened?","text":"<ul> <li><code>import requests</code> imported the library named \"requests\". This library is a simple HTTP library supports all the methods available in the HTTP protocol such as GET, POST, DELETE etc.</li> <li><code>mydata =</code> defines a variable and assigns it to the following object.</li> <li><code>requests.get()</code> calls a method in the requests library.</li> </ul> <p>When a class (e.g. requests) contains functions (e.g. get) defined for the class itself, these functions are called \"methods\". </p> <ul> <li><code>print(mydata)</code> represents the content of the returned object.</li> </ul>"},{"location":"exercise2/#2b-how-to-work-with-libraries","title":"2b) How to work with libraries?","text":"<ul> <li> Find and explore the documentation pages available on the Internet. requests doc</li> <li>Tip: You can use package repositories to find links to documentation pages. Python Package Installer site</li> <li> Use the help() function to read the summarized documentation about the requests library. Type (<code>help(requests)</code>) and run the code.</li> </ul>"},{"location":"exercise2/#2c-how-to-expose-the-existing-methods-in-a-library","title":"2c) How to expose the existing methods in a library?","text":"<ul> <li> In Python, everything is considered an object and each object can be examined by predefined functions such as type, dir, help etc. These predefined functions are called  \"Built-ins\" and can be listed by typing <code>dir(__builtins__)</code></li> <li> Since the requests class is also considered an object you can follow the same procedure to expose existing methods for this class. Type <code>dir(requests)</code></li> <li> Note that standard HTTP methods (get, post, put, delete etc.) area available in the list.</li> </ul>"},{"location":"exercise2/#2d-what-we-got-by-the-request","title":"2d) What we got by the request?","text":"<ul> <li> If you need to learn more about the data you received with the request, use the following functions:</li> <li> <code>help(mydata)</code></li> <li> <code>type(mydata)</code></li> <li> <code>dir(mydata)</code></li> <li>Note that if you are using an IDE to code you may have some useful tools to represent the information of variables. Check Spyder or PyCharm or Visual Studio Code IDE's.</li> <li> You can also examine the hierarchical structure of the \"requests\" class imported with the library.</li> <li> Try to find requests.models.Response with \"dir\" function:<ul> <li> dir(requests)</li> <li> dir(requests.models)</li> <li> dir(requests.models.Response)</li> <li>Note that the class names must be spelled exactly the same, because the python interpreter (the interactive compiler running at the backgorund) is case-sensitive. (e.g. <code>dir(requests.models.response)</code> would not work.)</li> </ul> </li> <li> If you followed the commands you might notice that the variable \"mydata\" is an instance object of the class \"requests.models.Response\". You can check it with the function <code>isinstance(my_object, (class_name))</code>.</li> </ul> <pre><code>print( isinstance(mydata, (requests.models.Response)))\n</code></pre> <pre><code>True\n</code></pre>"},{"location":"exercise2/#step-3-how-to-view-the-content-of-the-response","title":"Step 3) How to view the content of the response?","text":"<ul> <li> If you type <code>dir(mydata)</code> again, you can see all available methods to reveal the content of the object. <ul> <li> Try to reveal the content by typing <code>print( mydata.content )</code></li> <li> or by typing <code>print( mydata.text )</code></li> <li>Note that because the file is an image file in binary format, the content is displayed as strings that are not human readable.</li> </ul> </li> <li>TIP: You can follow different tactics to view an image file in python. A standard library (native library) called \"webbrowser\" can call a minimal browser and display the image inside the browser. Another method would be import the \"Image\" class from the \"PIL\" library. To import this class, you can add <code>from PIL import Image</code> at the beginning of your code block. Since \"PIL\" is not a native python library, you may need to install it on your environment using (<code>pip install Pillow</code>)</li> <li> For now we will just save the image file in the same folder using the following code:</li> </ul> <pre><code>with open(\"responses/exr2/my_requested_image.jpg\", \"wb\") as my_image_file:\n        my_image_file.write(mydata.content)\n</code></pre> <pre><code>File might be saved, check the folder: responses/exr2\n</code></pre> <ul> <li> \"open\" is another built-in function in pyhton. It needs the filename as the first parameter and the file mode as the second parameter. If you want to learn more about the \"file mode\", visit this page: Real Python or type <code>help(open)</code> in the python interpreter.</li> <li> We need to set the default export directory as relative path. To make these relative paths compatible with different operating systems (OS), the directory separator must be detected and replaced regarding to the current OS. A native python library \"os\" has such classes (os.path.sep and os.path.join) that makes it easy to implement.</li> </ul> <p>TIP: The reason for using \"open\" function via \"with\" is that the file should be closed after the manipulation. In the past, developers were often used the \"close\" function after every file manipulation. There is no need to use this file condition test when using \"with\" phrase.</p> <pre><code>import requests\n\n# Detect the current OS and change the relative paths regarding to it.\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n#print(export_folder)\n\n# Replace the URL in the follwing code with your selected URL\nmydata = requests.get(\"https://intergeo33.bayernwolke.de/betty/c_hist/13/4197/4598\")\n\nwith open(export_folder + \"my_requested_image.jpg\", \"wb\") as my_image_file:\n    my_image_file.write(mydata.content)\n    print(\"File might be saved, check the folder: responses/exr2\")\n</code></pre> <pre><code>File might be saved, check the folder: responses/exr2\n</code></pre> Variable Name mydata mydata.content Variable Type requests.models.Response bytes (binary) <p>TIP: You may notice that the last line (<code>my_image_file.write(mydata.content)</code>) does not contain any parentheses or curly braces to highlight the inner code block. This is because parentheses and curly brackets are not used in the python programming language to do that. You need to use indentation to create a hierarchical programming style (e.g. conditional statements, functions, loops, etc.). Indentation usually consists of 4 space characters, but it can also be customized (e.g. You can use 3 spaces or TAB chacracter). Also note that a column (:) character is needed at the end of the last line before the indented lines.</p> <p>An example comparison between C and Python programming languages shows how indentation interpreted in python: </p>"},{"location":"exercise2/#3b-optional-open-images-with-pillow","title":"3b (optional) Open Images with Pillow","text":"<ul> <li> You can show up the saved image using \"PIL\" (Pillow) library by running following code.</li> <li>TIP : If you are calling the \"PIL\" library for the first time in your local environment, you may need to install it with <code>pip install pillow</code> command.</li> </ul> <pre><code>from PIL import Image\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\nrequested_image = Image.open(export_folder + \"my_requested_image.jpg\")\n\ndisplay(requested_image)\n</code></pre>"},{"location":"exercise2/#3c-optional-open-images-with-web-browser","title":"3c (optional) Open Images with Web Browser","text":"<ul> <li> If you are running this notebook in your local environment, you can open the image on your default web browser by using the native python library \"webbrowser\". Try to execute following code.</li> </ul> <pre><code>import webbrowser\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\nwebbrowser.open_new_tab(export_folder + \"my_requested_image.jpg\")\n</code></pre> <pre><code>True\n</code></pre>"},{"location":"exercise2/#step-4-what-about-json-xml-html-based-files","title":"Step 4) What about JSON / XML / HTML based files?","text":"<ul> <li> Let's find another web service that offers JSON or GML based data files and follow similar instructions to save this data on our local machine or python environment. Visit following web page:<ul> <li>Basic geospatial data of the official surveying system in North Rhine-Westphalia (Geobasisdaten des amtlichen Vermessungswesens in Nordrhein-Westfalen )</li> </ul> </li> <li> Select one of the \"collection\"s (Landparcel/Flurst\u00fcck, Building/Gebaeude or Administrative Unit/Verwaltungseinheit). </li> <li> Select one of the features in the list and click on the JSON link at top right side of the page. If the data looks like too complex, try finding and installing a JSON viewer/parser add-on/extension for your browser.<ul> <li>TIP: It is recommended to search for \"JSON Lite\" in Firefox, \"JSON-Handle\" or \"JSON Viewer Pro\" in Chrome browser.</li> </ul> </li> <li> Check also the GML file on the same page (Top-right). You can also find some useful add-ons/extensions to visualize XML based files in a \"more human-readable way\", often called  \"pretty-print\" style.<ul> <li>TIP: It is recommended to search for \"Pretty XML\" in Firefox, \"XML Plus\" in Chrome browser.</li> <li>TIP: If the browser cannot open the GML/XML file in a new tab, then you can save the file on your local machine and open it by using web browser ( Right Click --&gt; Open with ).</li> </ul> </li> </ul> <p>Here you will see different visualizations of JSON or XML files within these extensions:</p> <p></p>"},{"location":"exercise2/#step-5-how-to-request-json-xml-html-based-files-from-the-web-services","title":"Step 5) How to request JSON / XML / HTML based files from the web services?","text":"<ul> <li> Remove the last two lines from your code block or convert them into comment by adding hashtag (#) to the beginning of lines. (Keyboard Shortcut: Ctrl + / )</li> <li> Copy and paste the requested URL in previous step (4) into your code block.</li> <li> Add the lines <code>myjson = mydata.json()</code> and <code>print(myjson)</code> just after the requested URL.</li> </ul> <pre><code>import requests\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmyjson = mydata.json()\n\n#print(myjson)\n</code></pre> Variable Name mydata mydata.json() Variable Type requests.models.Response dict(Python Dictionary)"},{"location":"exercise2/#5a-inspect-the-response","title":"5a) Inspect the response","text":"<p>Here you have As you may notice, it was not actually converted into a JSON object, but is now a \"JSON serializable Python object\". In general terms it has been converted into a \"python dictionary\" object. JSON stands for Java Script Object Notation and is designed to provide a more developer-friendly alternative to XML. If you would select a most python-native encoding format, that would be none of these, but YAML. However, YAML format is out of our focus for this exercise. That is, it is a natural data exchange format designed for JavaScript, but not for Python. Python uses predefined data types such as tuples, lists and the most JSON-like format \"dictionary\" to handle the same data internally. The given code part has converted the response object to a JSON by using a method of requests.get, but ...</p> <ul> <li> Is it really JSON?<ul> <li>Type <code>type(myjson)</code></li> </ul> </li> <li> What are available methods or attributes for this instance object?<ul> <li>Type <code>dir(myjson)</code></li> </ul> </li> <li> How can we use these available methods with this instance?<ul> <li>Type <code>help(myjson)</code></li> <li>or get the help document for a specific method (e.g. <code>help(myjson.items)</code>)</li> </ul> </li> </ul> <p>TIP: If you would select a most python-native encoding format, that would be none of these, but YAML. Since, the YAML format is out of our focus for this exercise, we didn't mention about that yet.</p> <ul> <li> If you try to save the python dictionary object to a file, you will notice an error. <code>with open(\"responses/exr2/my_request.json\", \"w\") as my_json_request:</code></li> </ul> <p><code>my_json_request.write(myjson)</code></p> <ul> <li> However, you can change the \"json()\" method with \"text\" method and save the file as received like in the example below.<ul> <li> Alternatively, you can cast (convert the data type) the dictionary type to a string using the built-in function str().</li> </ul> </li> </ul> <pre><code>import requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\n# Alternative method:\n# text_file = str(mydata)\ntext_file = mydata.text\n\n\nwith open(export_folder + \"my_request.json\", \"w\") as my_req:\n         my_req.write(text_file)\n\n#print(text_file)\n</code></pre> Variable Name mydata mydata.text Variable Type requests.models.Response str (String)"},{"location":"exercise2/#5b-convert-dictionary-to-text-using-json-library-dumps-method","title":"5b) Convert Dictionary to Text using JSON library (dumps method)","text":"<p>When this method is applied, \u2018text_file\u2019 is assumed to be just a dumped json file and is saved with the file extension \u2018.json\u2019. So it is currently no different from a normal text file. By importing the \u2018json\u2019 library, we will get more functionality within our data, such as filtering, sorting, re-indenting, etc.</p> <ul> <li> <p> To do this, you need to import the native library called \"json\". Add the line at the beginning of code block: <code>import json</code></p> </li> <li> <p> Then use <code>json.dumps</code> to convert the dictionary to a string. </p> </li> </ul> <pre><code>import json\nimport requests\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmyjson = mydata.json()\n\njson_file = json.dumps(myjson)\n\ntype(json_file)\n</code></pre> <pre><code>str\n</code></pre> Variable Name mydata mydata.json() json_file Variable Type requests.models.Response dict str"},{"location":"exercise2/#5c-convert-text-to-dictionary-using-json-library-loads-method","title":"5c) Convert Text to Dictionary using JSON library (loads method)","text":"<p>What if you had a text file instead of a python dictionary? Can you convert a text file to a JSON file? - [ ] If the response text is in regular JSON format, you can convert it to a dictionary using the loads method of the json library (see below). - If not, the json parser will throw an error and you may need to use additional string functions such as rstrip, lstrip, replace to fix the problem in the text. You can also browse this web page for python string methods.</p> <pre><code>import json\nimport requests\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmyjson = mydata.text\n\nmy_object = json.loads(myjson)\n\ntype(my_object)\n\n#print(my_object.get('links'))\n</code></pre> <pre><code>dict\n</code></pre> Variable Name mydata myjson my_object Variable Type requests.models.Response str dict"},{"location":"exercise2/#5d-save-the-json-file","title":"5d) Save the JSON file","text":"<ul> <li> Now, you can copy the JSON file to our local machine by using \"with\" statement.</li> </ul> <pre><code>import json\nimport requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmyjson = mydata.json()\n\njson_file = json.dumps(myjson)\n\nwith open(export_folder + \"my_request.json\", \"w\") as my_json_req:\n        my_json_req.write(json_file)\n\n#print(json_file)\n</code></pre>"},{"location":"exercise2/#5e-use-one-of-the-parameters-of-dumps-method-eg-indentation","title":"5e) Use one of the parameters of dumps method (e.g. Indentation)","text":"<ul> <li> Try using some of the available parameters of \"json.dumps\" method. (for exp. \"indent\")<ul> <li>To see all available parameters for the dumps method, type <code>help(json.dumps)</code>.</li> </ul> </li> </ul> <pre><code>import json\nimport requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmyjson = mydata.json()\n\njson_file = json.dumps(myjson, indent=4)\n\nwith open(export_folder + \"my_request.json\", \"w\") as my_json_req:\n        my_json_req.write(json_file)\n\n#print(json_file)\n</code></pre>"},{"location":"exercise2/#5f-get-a-subset-of-the-dictionary-using-json-library-__getitem__","title":"5f) Get a subset of the dictionary using JSON library (__getitem__ / [ ] )","text":"<ul> <li> Python dictionaries can be filtered by defining keys. ('geometry' in the sample below)<ul> <li>Note that <code>myjson['geometry']</code> and <code>myjson.__getitem__('geometry')</code> will produce the same results.</li> <li>The reason is square brakets [] are the shortcuts to the __getitem__ method and such shortcut mechanisms are called \"magic methods\" in Python. See this web page see more examples for the magic methods.</li> <li>You can type <code>help(myjson.__getitem__)</code> to expose the usage of the magic method.</li> </ul> </li> </ul> <pre><code>import json\nimport requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmyjson = mydata.json()\n\n# Alternative method: \n# my_geometry = myjson.__getitem__('geometry')\nmy_geometry = myjson['geometry']\n\njson_file = json.dumps(my_geometry, indent=4)\n\nwith open(export_folder + \"my_request.json\", \"w\") as my_json_req:\n        my_json_req.write(json_file)\n\n#print(json_file)\n</code></pre>"},{"location":"exercise2/#5g-saving-the-response-as-it-is-in-binary-format","title":"5g) Saving the response as it is in binary format","text":"<ul> <li> Another possibility to save the desired JSON file is to export it by reading the data in binary format using the \"w\" to \"b\" parameter in the open function. Note that you don't need to import the \"json\" library as there is nothing to do with the object.</li> </ul> <pre><code>import requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmy_content = mydata.content\n\nwith open(export_folder + \"my_request.json\", \"wb\") as my_json_req:\n        my_json_req.write(my_content)\n\ntype(my_content)\n#print(my_content.hex())\n</code></pre> <pre><code>bytes\n</code></pre> Variable Name mydata mydata.content Variable Type requests.models.Response bytes"},{"location":"exercise2/#step-6-read-a-json-file-and-display-in-python-interpreter","title":"Step 6) Read a JSON file and display in python interpreter","text":"<ul> <li> You can read and modify saved files by using the \"load\" or \"loads\" method of the \"json\" library. To do this, you need to use \"open\" function with the \"r\" mode, which stands for \"read\".</li> </ul> <pre><code>import json\nimport requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\nwith open(export_folder + \"my_request.json\", \"r\") as my_json_req:\n        json_file = my_json_req.read()\n\nmy_object = json.loads(json_file)\n\nmy_subset = my_object['geometry']\n\n#print(my_subset)\n</code></pre> Variable Name mydata my_object my_subset Variable Type requests.models.Response dict dict <ul> <li>TIP: If you are confused with the dump and load methods, take a look at the image below which explains how to convert json data into python dictionaries or vice a versa. </li> </ul>"},{"location":"exercise2/#step-7-convert-the-json-request-into-a-program-that-saves-only-properties-to-a-file","title":"Step 7) Convert the JSON request into a program that saves only properties to a file","text":"<p>Suppose we want to save only the attributes of a desired JSON to a text file without all other attributes.</p> <p>We can do this easily with loop conditions.</p> <ul> <li> Dictionaries, lists, tuples and sets are iterable data types in Python. So we don't need to do more, because the \"myjson\" variable is already a python dictionary. Let's change the filtering key with \"properties\".</li> </ul> <pre><code>import json\nimport requests\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmyjson = mydata.json()\n\nmysubset = myjson['properties']\n\ntype(mysubset)\n</code></pre> <pre><code>dict\n</code></pre> <ul> <li> Since our data is still in the form of a dictionary, we can easily iterate the \"key-value\" pairs in a \"for\" condition like the one below:</li> </ul> <pre><code>import json\nimport requests\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmyjson = mydata.json()\n\nmysubset = myjson['properties']\n\nfor prop in mysubset:\n    print(prop)\n</code></pre> <pre><code>aktualit\ngebnutzbez\nfunktion\n</code></pre> <ul> <li> Now you can use the \"for\" condition inside the \"open\" function to save the properties as a list with automatically generated line numbers.</li> <li>TIP: <code>i=0</code> and <code>i=i+1</code> automatically produces an integer and is casted as string to combine (concatenate) with other strings. Type casting is possible in python with built-in functions such as str(), int(), float(), bool(). </li> </ul> <pre><code>import json\nimport requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nmyjson = mydata.json()\n\nmysubset = myjson['properties']\n\nwith open(export_folder + \"my_request.txt\", \"w\") as my_req:\n        i=0\n        for prop in mysubset:\n            i=i+1\n            myformat = str(i) + ' : ' + prop + '\\n' \n            my_req.write(myformat)            \n</code></pre>"},{"location":"exercise2/#step-8-convert-your-code-block-into-a-function-and-let-users-define-their-own-url-requests","title":"Step 8) Convert your code block into a function and let users define their own URL requests","text":"<ul> <li> <p> You have already entered the URL you want in the code by manually changing the URL part. Now let's make the program more interactive to allow users to define their own URL on each different request. You need to define a function that listens for a user parameter and uses the same parameter in the computations. To do this, you need to use \"def\" which stands for \"definition\". Move the lines used to transform the data into the function definition using indentation.</p> </li> <li> <p>TIP: In Python programming, you can define multiple variables with the same name. Any variable defined inside a function will only be within the scope of that function. That is, if you declare a variable inside a function, it can only be accessed inside the function. This behavior is called \"local scope\" (see the \"mysubset\" variable in the code block below).</p> </li> <li>TIP: Defining a function is not enough to run it. If they are defined, you must call the function with mandatory parameters (\"custom_url\" in the example below.)</li> </ul> <pre><code>import json\nimport requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\ndef get_building_properties(custom_url):\n    mydata = requests.get(custom_url)\n    myjson = mydata.json()\n    mysubset = myjson['properties']\n    return mysubset\n\nmysubset = get_building_properties(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nwith open(export_folder + \"my_request.txt\", \"w\") as my_req:\n        i=0\n        for prop in mysubset:\n            i=i+1\n            myformat = str(i) + ' : ' + prop + '\\n' \n            my_req.write(myformat)\n#print (mysubset)\n</code></pre> Variable Name mydata myjson mysubset (local) mysubset (global) my_req Variable Type requests.models.Response dict dict dict _io.TextIOWrapper"},{"location":"exercise2/#8a-seperate-the-listing-mechanism-as-a-function","title":"8a) Seperate the listing mechanism as a function","text":"<ul> <li> We can also turn the code block that saves the file into a function, so that users can more easily determine the file name.<ul> <li>Note that the first parameter (my_object) of the save_property_as_list function is required.</li> <li>Second parameter (my_file_name) is optional, which means that the function will use the default value if it is not defined.</li> </ul> </li> </ul> <pre><code>import json\nimport requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\ndef get_building_properties(custom_url):\n    mydata = requests.get(custom_url)\n    myjson = mydata.json()\n    mysubset = myjson['properties']\n    return mysubset\n\ndef save_property_as_list(my_object, file_name='request.txt'):\n    my_file_name = export_folder + file_name\n    with open(my_file_name, \"w\") as my_req:\n        i=0\n        for prop in my_object:\n            i=i+1\n            myformat = str(i) + ' : ' + prop + '\\n' \n            my_req.write(myformat)\n\nbuilding_properties = get_building_properties(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n\nsave_property_as_list(building_properties, \"my_request.txt\")\n</code></pre>"},{"location":"exercise2/#8b-let-the-users-interact-with-your-program-input-function","title":"8b) Let the users interact with your program (input function)","text":"<ul> <li> You can apply the \"input\" function to turn the code into an interactive program.</li> </ul> <pre><code>import json\nimport requests\nimport os\n\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n\ndef get_building_properties(custom_url):\n    mydata = requests.get(custom_url)\n    myjson = mydata.json()\n    mysubset = myjson['properties']\n    return mysubset\n\ndef save_property_as_list(my_object, file_name='request.txt'):\n    # We implement an if-elif-else condition to consider empty input.\n    if file_name == '':\n        my_file_name = export_folder + 'request.txt'\n    elif file_name == '-' or file_name == ' ':\n        my_file_name = export_folder + 'request.txt'\n    else:\n        my_file_name = export_folder + file_name\n\n    with open(my_file_name, \"w\") as my_req:\n        i=0\n        for prop in my_object:\n            i=i+1\n            myformat = str(i) + ' : ' + prop + '\\n' \n            my_req.write(myformat)\n        print(\"List saved as a file :\", my_file_name)\n        # print(my_object)\n\nrequested_url = input(\"Enter the requested URL serves JSON : \")\nbuilding_properties = get_building_properties(requested_url)\n\ncustom_file_name = str(input(\"Specify a file name with extension : \"))\nsave_property_as_list(building_properties, custom_file_name)\n\n# Sample Inputs:\n# https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\n# my_request2.txt\n</code></pre> <pre><code>Enter the requested URL serves JSON :  https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\nSpecify a file name with extension :\n\n\nList saved as a file : responses/exr2/request.txt\n</code></pre>"},{"location":"exercise3/","title":"Spatial Data Infrastructures (SDI)","text":"Munich Technical University &gt; Engineering &amp; Design  Aerospace &amp; Geodesy || Chair of Geoinformatics  Murat Kendir, Prof. Thomas Kolbe || murat.kendir@tum.de  <ul> <li>In the previous exercise we explored the python programming language and tried to create a simple application to request geospatial data using the requests library.</li> <li>In this tutorial, you will learn how to search for a geospatial dataset using different levels (regional, city scale, etc.) of \u201cSpatial Data Infrastructures\u201d (SDIs). </li> <li>You will explore multiple SDI websites that provide some geospatial datasets in different formats or as different types of web services.</li> <li>You will then learn how to combine and represent these datasets in popular GIS platforms such as QGIS and ArcGIS Pro.</li> <li>Finally, you will create a small python application that connects and utilizes the selected geospatial data for a specific purpose.</li> </ul>"},{"location":"exercise3/#0-reminders","title":"0) Reminders","text":""},{"location":"exercise3/#what-we-have-learned-in-the-previous-exercise","title":"What we have learned in the previous exercise?","text":"<ul> <li>A python program can be executed simply by calling it with the python interpreter by simply typing <code>python my_first_python_program.py</code>. </li> <li>Python uses indentation to highlight the blocks of code.</li> <li>Python applications can be run in virtual environments with all necessary libraries pre-installed.</li> <li>Python have many libraries to support main applications with predefined classes, functions and data types (e.g. os, json, requests etc) and they can be implemented with import command.</li> <li><code>if / elif / else</code> is a conditonal statement.</li> <li><code>for x in array</code> creates a sequence to iterate in an array-like (iterative) object.</li> <li>There are useful built-in functions (which you can list all with <code>dir(__builtins__)</code>) to investigate an object in python such as type, dir, help, print, vars.</li> <li>A function can be set with the def (stands for DEFinition) command and mandatory and optional parameters can be specified in parentheses. For example: <code>def save_somebody(name, surname, species=\"Homo Sapiens\"):</code></li> <li>A file can be manipulated by specifiying file path and file permission. For example: <code>with open(\"current_folder/relative_file_path.txt\", \"w\") as myfile:</code></li> <li>A python dictionary is a bit different from a JSON object and they can be converted to eachother with json.load(s) and json.dump(s) functions of json library.</li> <li>A questionnaire can be set with <code>input(\"Enter a custom name\")</code> function.</li> </ul>"},{"location":"exercise3/#1-finding-the-datasets","title":"1) Finding the datasets","text":"<p>Global Sea Level is rising at an increasing rate every year, causing floods to occur more frequently all over the world. This forces local (or regional) governments to take measures against future floods. Suppose you are responsible for preparing a disaster management application in Hamburg. This application will calculate the flood risk for a specific building and generate a report with information on the extent of the risk and the relevant land parcel number. For this purpose, you need to find the most suitable geographic data services using the INSPIRE Geoportal, geoportal.de and Hamburg TransparenzPortal. Imagine that these datasets should contain the following data layers: </p> <ul> <li>Buildings footprints (DE: Gebeaude Grundst\u00fccke) | (will be searched for in the Section 3a)</li> <li>Land Parcels (DE: Flurst\u00fcck)</li> <li>Digital Elevation Model / DEM (DE: H\u00f6henmodell / DHM)</li> <li>Flood Risk Zones (DE: Hochwasserrisikos)</li> </ul> During the catastrophic flood of 1962, boats were used to rescue Hamburg residents from flooded buildings.              Source"},{"location":"exercise3/#2-a-a-short-preparation-creating-a-service-selection-tool","title":"2 a) A short preparation - Creating a \"Service Selection Tool\"","text":"<p>Before you start examining the given Spatial Data Infrastructures (SDIs), you will set up a function in python that makes it easy to store the names, links and additional information of the services.</p> <pre><code># In Python, there is no need to specify the variable data type.\n# However, you can still use type conversion methods or shortcuts to specify the data type.\n# For Exp. '{}' is a shortcut to create a python dictionary.\n\n#Create an empty dictionary.\nmy_services = {} \n\n# !Remember the role of identation in python.\ndef add_to_store(service_id, name, url, wms_url):\n# Here, you set a complex data in python dictionary data type.\n    my_services[service_id] = { \"name\" : name\n        , \"url\" : url\n        , \"WMS_URL\" : wms_url}\n    print(my_services)\n\n#Extras for checking the dictionary data type and result of the function:\n# type(my_services)\n# help(my_services)\n# add_to_store(\"service_1\", \"my_fav\", \"https://sdi.com\", \"https://wms.sdi.com/my_city?\")\n# print(my_services.get(\"service_1\"))\n# my_services.clear()\n# print(my_services.get(\"service_1\"))\n</code></pre>  TIP : You may have noticed that the square brackets [ ] we use to set a new item in the dictionary are also a shortcut. You can also find this information in related hidden functions like __getitem__() or __setitem__(). Type dir(my_services) or dir(dict()) to reveal them. <p>Now, suppose that you want to use the function in an interactive way to let other users also add the found services into the dictionary. To do that, we can implement another function which runs an input command for every instance in the dictionary:</p> <pre><code># You can now define another function to interactively ask and store the knowledge data in your dictionary.\n\nkeys = [\"name\", \"Url of SDI\", \"URL of WMS Service\"]\n\nmy_services = {}\n\n# Following line adds only the keys defined above. \n# These kind of inline functions called as comprehensions in Python.\nmy_services[0] = {key: None for key in keys}\n# print(my_services) \n\ndef add_to_store(service_id, name, sdi_url, wms_url):\n    # Here, you set a complex data in python dictionary data type.\n    my_services[service_id] = { keys[0] : name, keys[1] : sdi_url , keys[2] : wms_url}\n    print(my_services)\n\ndef found_service():\n    service_id = input(\"Give an ID (number or unique value)...\")\n    service_data = [] # Created a list to save the values temporarily\n    for i in range(3): # Meet another object here: range\n        questionnaire = \"Please specify the \" + keys[i]\n        service_data.append(input(questionnaire))\n        i+=1\n    #Note that a list index is very similar to range, but always starts from 0.\n    add_to_store(service_id, service_data[0], service_data[1], service_data[2])\n\n# found_service()\n# my_services.clear()\n</code></pre> <ul> <li> Save the code above as \"service_selection.py\" into \"/raw_codes/exr3\" directory.</li> </ul>"},{"location":"exercise3/#2-b-use-the-created-program-in-another-python-program","title":"2 b) Use the created program in another python program","text":"<ul> <li> Check if the file exists in the \"/raw_codes/exr3\" folder.</li> <li> Start a new code and import the functions and variables defined in the previously created python file.</li> </ul> <pre><code># When you save a python file contains classes, functions and variables into another folder\n# , this folder with its contents can be called as a \"python module\".\n\n# Note that importing a module is enough to access to the functions and variables.\n# The contents of the modules are only accessible with dot (.) operator.\n\n# Method 1\nfrom raw_codes.exr3 import service_selection as srv\n#print(srv.keys)\n\n# Method 2\n# from raw_codes.exr3.service_selection import keys, my_services, add_to_store, found_service\n# print(keys)\n\n# Now you can call your program to save the data about the found geospatial services:\n# srv.found_service() \n# srv.my_services.clear()\n</code></pre>  TIP : You may notice that importing a library into existing python code is very similar to importing an additional python program. This is so because the import command looks for multiple sources in a order. First it tries to find a python file, then it looks for the corresponding python file in the directories defined as the PYTHONPATH environment variable. To see the defined paths in your system import the library sys and print out sys.path object."},{"location":"exercise3/#3-a-building-footprints-grundstuck","title":"3 a) Building Footprints (Grundst\u00fcck)","text":"<p>Visit the web site Hamburg TransparenzPortal and search for the building footprints available for Hamburg city. Try to search with following possible words / tags: - Administrative Unit (Verwaltungseinheiten)  - House Coordinates (Hauskoordinaten)  - ALKIS  - Land Parcel (Flurst\u00fcck)  - Building (Gebaeude)</p> <p>Explore possible answers to the following questions: - [ ] Which one is the correct data for your purpose? - [ ] What kind of data it is? Is it a web service or static file? - [ ] How current is the data you find? - [ ] Where is the metadata of the service or file?</p> <p>Finally:  - [ ] If you think you have found a web service that suits your purpose, run the \u201cfound_service()\u201d function in the code (created in section 2b) and save the relevant information.</p>"},{"location":"exercise3/#3-b-land-parcels-flurstucke","title":"3 b) Land Parcels (Flurst\u00fccke)","text":"<p>Visit the web site geoportal.de and search for the land parcels available for Hamburg city. </p> <p>TIP: If you can not find the land parcels for the Hamburg city try adding \"HH\" to your keywords. \"HH\" is the city code for Hamburg used on license plates and it is possible to find relevant datasets using these codes. More information can be found on this site.</p> <p>Find the metadata of the dataset and explore possible answers to the following questions: - [ ] What is the base coordinate system for land parcels according to the metadata? - [ ] Who or which organization is responsible for the dataset?</p> <p>Find the XML responses of WMS or WFS services to the \"GetCapabilities\" operation and explore possible answers to the following questions: - [ ] Is the service response from the same domain? (Check the URL) - [ ] Are multiple coordinate systems supported for publishing? - [ ] How many layers does a selected web service consists of? - [ ] Can the layers be used for querying? - [ ] What other possible operations can be requested besides \"GetCapabilities\"?</p> <p>Finally:  - [ ] If you think you have found a web service that suits your purpose, run the \u201cfound_service()\u201d function.</p>"},{"location":"exercise3/#3-c-digital-elevation-model-dem-hohenmodell","title":"3 c) Digital Elevation Model / DEM (H\u00f6henmodell)","text":"<p>Visit the web site INSPIRE Geoportal and search for the Digital Elevation Model available for the Hamburg city. - Click to \"Browse INSPIRE Thematic Datasets\". - Click to \"INSPIRE Data Themes\" - Find the relevant theme on this page and select the country on the following web page.</p> <p>Explore possible answers to the following questions: - [ ] Where is the service URL? - [ ] What kind of services are available in the theme?  - [ ] Can TANDEM-X datasets be useful for our project? If not, why? - [ ] Is the selected dataset also available on geoportal.de ? - [ ] Is the selected dataset also available on Hamburg Transparenzportal? - [ ] Are all domain names in the service URLs the same?</p> <p>Finally:  - [ ] If you think you have found a web service that suits your purpose, run the \u201cfound_service()\u201d function.</p>"},{"location":"exercise3/#3-d-flood-risk-zones","title":"3 d) Flood Risk Zones","text":"<p>Visit the web site INSPIRE Geoportal again and search for the flood risk zones available for the Hamburg city.</p> <ul> <li>Click to \"Browse Priority Data Sets\".</li> <li>Click to \"Environmental Domains\".</li> <li>Click to \"Water\".</li> <li>Select the country and search with following possible words / tags:</li> <li>Wasserrahmenrichtlinie (Water Framework Directive)</li> <li>Gew\u00e4sser (Water Bodies)</li> <li>Hochwasserrisikos (Flood Risks)</li> <li>Flie\u00dfgew\u00e4ssern (Watercourses)</li> </ul> <p>Finally:  - [ ] If you think you have found a web service that suits your purpose, run the \u201cfound_service()\u201d function.</p>"},{"location":"exercise3/#4-adding-services-to-gis-software","title":"4) Adding Services to GIS Software","text":"<p>In this chapter, you will learn how to add web services or datasets to a GIS software. You probably don't know what \"web service\" actually means or how to use it correctly, but you don't need to have a deep understanding of web services right now. You may need to recognize the type of web service, but nothing more.</p>"},{"location":"exercise3/#4-a-adding-services-to-qgis","title":"4 a) Adding Services to QGIS","text":""},{"location":"exercise3/#4a-i-add-xyz-basemap","title":"4a i) Add XYZ Basemap","text":"<ul> <li>Start by adding a basemap with global coverage and simple styling. \"Carto Positron\" would be a good option for this purpose. (If you want to try other XYZ basemap services, visit Klas Karlsson's github repository or search online.</li> <li> Find XYZ Tiles in browser panel on the left side and right click to add a new connection.</li> <li> Copy and paste https://cartodb-basemaps-a.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png link to the URL textbox and give any name as you want. Click Ok button.</li> <li> Find the city center of Hamburg on the map and zoom in until the canvas covers only some buildings. Alternatively, at the bottom of the QGIS window you can set the scale to 1:2000 or larger. <p>TIP: Sometimes you need to zoom in on your area of interest to avoid long loading times or just to make sure that the layer is visible in the area.</p> </li> </ul> <ul> <li>Check the coordinate system of the active map canvas (map widget in the software). If it is defined as OGC:CRS84, change it to EPSG:4326 Coordinate Reference System (CRS). You will notice some distortion on the map canvas, this is normal because EPSG:4326 (aka WGS84) is a geographic coordinate system, not a projected coordinate system. You may need to use this coordinate system from time to time because it is one of the most widely supported CRS by web services.</li> <li>Check the type of web services you noted in section 1) and add them considering the type of web services. <p>TIP: There are multiple ways to check the type of web services. One could be to check the categories or filters available on the SDI website. The other method could be to check the metadata to find the type. Finally, if you segment the request URL, you might see a query parameter like \"service=WMS\" or \"service=WFS\".</p> </li> </ul>"},{"location":"exercise3/#4a-ii-add-wms-service","title":"4a ii) Add WMS Service","text":"<ul> <li> Go to Layer &gt; Add Layer &gt; Add WMS/WMTS Layer in the menu bar.</li> <li> To create a new connection, click the New button and copy &amp; paste the URL you noted in part 1). Click OK and then click the Connect button.</li> <li> Click to any available layer in the service, check the coordinate system and click to Add Button.</li> </ul>"},{"location":"exercise3/#4a-iii-add-wfs-service","title":"4a iii) Add WFS Service","text":"<p>IMPORTANT NOTE Some servers provide Complex Data Features with WFS services, which makes it difficult to add these services to GIS software. So, if you notice such a WFS with complex data, avoid adding this service.   - [ ] Go to Layer &gt; Add Layer &gt; Add WFS / OGC API - Features Layer in the menu bar. To create a new connection, click the New button and copy and paste the URL you noted in part 1). Specify the \"Max. number of features\" as 200 or less. Click OK and then click the Connect button.   - [ ] Click to any available layer in the service, check the coordinate system and click to Add Button.   - [ ] Select only a few features from the screen or press Ctrl + F6 buttons. Take a glance on existing attributes and values for the features. Tip: Sometimes features can be presented as overlapping polygons in the same data service. If you are in doubt about overlapping polygons, simply change the symbology of the layer in the properties window to transparent fill to reveal the overlapping polygons.</p>"},{"location":"exercise3/#4-b-adding-services-to-arcgis-pro","title":"4 b) Adding Services to ArcGIS Pro","text":"<ul> <li>ArcGIS Pro collects all the data services in the \u201cServers\u201d section.</li> <li> Navigate to Connections &gt; Server &gt; New WMS Server from the Insert tab.      </li> <li> Copy &amp; Paste WMS address into \u201cServer URL\u201d text box. Specify user authentication if it is needed.</li> </ul> <ul> <li> If the server has been successfully added, it can be added into map canvas from Add Data menu. Right Click on \u201cMap\u201d in the left Contents pane and select Add Data.</li> <li> Go to Servers and find the WMS Server connection set up in the previous step.</li> <li> Select the WMS Server and click to Ok.</li> <li> Select the layers of interest from the WMS layers tree.</li> <li> If the WMS server connection is \"queryable\", you can query features in the WMS layers by clicking directly on them. Zoom in on a specific feature and find the \"Locate\" icon on the Map tab. Then click on the feature.</li> </ul> <ul> <li>You will see feature information in a pop-up window in the right pane. If there are multiple features on the map canvas, you may see multiple WMS layers and multiple feature information windows in the popup.</li> <li> Press Ctrl+Alt+M or go to Help &gt; Performance &gt; Diagnostic Monitor to examine the requests send by ArcGIS Pro.</li> <li>Now you can combine all the layers in your selected GIS software.</li> <li>You can now manually inspect land parcels and buildings that intersect flood zones.</li> <li>This point can be considered as an outline of a Disaster Management Application apart from the need for automation.</li> </ul>"},{"location":"exercise3/#4-c-adding-a-wms-service-in-fme","title":"4 c) Adding a WMS Service in FME","text":"<ul> <li>There are multiple ways to use web services in FME. One of the simplest is to use the WMS as a background map in the \u201cVisual Preview\u201d window/widget.</li> </ul>"},{"location":"exercise3/#4c-i-adding-a-wms-service-to-fme-as-background-map","title":"4c i) Adding a WMS Service to FME as Background Map","text":"<ul> <li> To use a WMS layer as a background map, find \u201cFME Options\u201d in the menu under Tools. Select the \u201cBackground Maps\u201d tab.</li> <li> Visit the website geoservice.dlr.de and search for the service called \u201cTanDEM-X 30m DEM\u201d. Find the endpoint (WMS URL of the service) of one of the Hillshade layers in the service.</li> <li> Go back to FME and click on the plus icon (+) at the bottom left in the Background Maps window.</li> </ul> <ul> <li> Select \u201cOGC WMS (Web Map Service)\u201d from the \u201cSource\u201d menu.</li> <li> Enter any custom name for the web service.</li> <li> Copy and paste the WMS URL (endpoint) of the selected layer into the \u201cURL\u201d text box in the \"WMS Connection\" group.</li> <li> Click the three dots (...) button next to the \u201cLayers\u201d text box and select the shorten name of the desired layer.</li> <li> If everything went well, you will be able to select the background map as the selected WMS service.</li> </ul>"},{"location":"exercise3/#4c-ii-adding-a-wms-service-to-fme-as-reader","title":"4c ii) Adding a WMS Service to FME as Reader","text":"<ul> <li>You can also add the WMS service as a data source (Reader) in FME. This procedure can be useful for tasks related to raster images.</li> <li>To do that, just type \"OGC WMS\" in an empty area on the main pane of FME Workbench. </li> <li>\u201cPointOnRasterValueExtractor\u201d can be one of the useful transformers that can select the band color value of a raster image using point coordinates.</li> </ul>"},{"location":"exercise3/#4c-iii-using-getfeatureinfo-request-in-fme-optional-step","title":"4c iii) Using GetFeatureInfo request in FME (Optional Step)","text":"<ul> <li>Since, the service operation \"GetFeatureInfo\" is not a mandatory in the WMS satndard, there is no a built-in tool to do use it. (You can search in the Community Hub for such a function)</li> <li> If you need to implement such a function in FME, then you might be interested with the following tutorial video:</li> <li>youtube.com/watch?v=kNeMNr2fAtM</li> </ul>"},{"location":"exercise3/#5-accessing-wms-services-with-owslib-python-library","title":"5) Accessing WMS services with OWSLib Python Library","text":"<p>OWSLib is one of the OGC compliant web service client and it supports OGC interface standards. Before using the OWSLib consider the following steps: - If you are on working in online environment, please install OWSLib to your current python environment using : pip install OWSLib - Then you need to import the OWSLib library into your code. - Check the following site to get more information about the OWSLib:   - https://owslib.readthedocs.io/en/latest/ </p> <pre><code>import owslib\n</code></pre> <ul> <li> Check available contents (packages + classes) in the library with following code: <code>help(owslib)</code></li> </ul> <p>You can specify a class or package to reduce the loaded library content in your code. There are multiple ways to do so: - First Option: <code>from owslib import wms</code>   - Imports only wms module from owslib package   - Type: <code>help(wms)</code> - Second Option: <code>import owslib.wms</code>   - Again, it calls only wms module from owslib package   - Type: <code>help(owslib.wms)</code> - Another option to import only the relevant function: <code>from owslib.wms import WebMapService as any_shorten_form</code>   - Imports only WebMapService function in the wms module and assigns a custom alias to it.   - Type: <code>help(any_shorten_form)</code></p>"},{"location":"exercise3/#5-a-examine-a-wms-service-with-owslib","title":"5 a) Examine a WMS service with OWSLib","text":"<p>Select any Web Map Service (WMS) from your previous work, or select a random WMS that covers the city of Hamburg in whole or in part. (If you want to add a random WMS, revisit the Hamburg TransparenzPortal or geoportal.de or INSPIRE Geoportal websites to search for the appropriate web service.)</p> <pre><code># Decide a way to import the library. \nfrom owslib.wms import WebMapService as mywms\n# help(mywms)\n</code></pre> <p>If you type help(mywms), you will see an explanation of the function as below.</p> <p>WebMapService(url, version='1.1.1', xml=None, username=None, ...)</p> <p>Notice that only \"url\" parameter is not assigned to a value. This means that the only mandatory parameter is the \"url\" and all other parameters will be accepted with their default values unless their values are specified.</p> <ul> <li> Now, test your selected WMS with the imported WebMapService function.</li> </ul> <pre><code># mytest = mywms('https://geodienste.hamburg.de/HH_WMS_DGM1')\n# The website serves the metadata of the WMS highlights that\n# the recommended version is \"1.3.0\". So we can specify that:\nmytest = mywms('https://geodienste.hamburg.de/HH_WMS_DGM1', version='1.3.0')\n</code></pre> <ul> <li> Now, you can use \"the built-in functions\" to know more about the returned object: <code>print(mytest)</code> / <code>type(mytest)</code> / <code>help(mytest)</code> / <code>dir(mytest)</code> If you are sure about the data is an iterable object (tuple, set, list, dictionary) then you can use also \"list\" function.</li> </ul> <pre><code>list(mytest.contents)\n# Alternatively: print(mytest.contents.keys())\n</code></pre> <pre><code>['HH_WMS_DGM1', 'WMS_DGM1_HAMBURG', 'WMS_DGM1_farbig', 'WMS_DGM1_farbig_10000']\n</code></pre> <ul> <li> Check the available methods by typing dir(mytest).</li> <li>You may notice the \"operations\" method in the list.</li> </ul> <pre><code>list(mytest.operations)\n</code></pre> <pre><code>[&lt;owslib.map.wms130.OperationMetadata at 0x702a34394ad0&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a34396de0&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a34394290&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a34394230&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a343941d0&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a343943b0&gt;]\n</code></pre> <ul> <li> As operations stored as objects in a list (array), we can access them using list index (For Exp. mylist[0]). Then you can check the available methods or attributes in the class instance by typing <code>dir(mytest.operations[0])</code>. </li> </ul> <pre><code>for x in mytest.operations:\n    print(x.name)\n</code></pre> <pre><code>GetCapabilities\nGetMap\nGetFeatureInfo\nDescribeLayer\nGetLegendGraphic\nGetStyles\n</code></pre> <ul> <li>Alternatively, you can inspect the webservice using the \"getServiceXML\" method. Please note that the result will be returned as a binary file in XML format. This means that you have to consider the binary format if you want to store or read the returned object as a file. For example, we specified the file mode as \"wb\" (Write + Binary) in the following code, because the object \"mytest.getServiceXML()\" was in bytes format, not a string. </li> </ul> <pre><code># type(mytest.getServiceXML())\n# Specify your own relative or full path to save the XML file, if it is required.\nwith open(\"responses/exr3/my_wms_servicexml.xml\", \"wb\") as my_wms_xml:\n        my_wms_xml.write(mytest.getServiceXML())\n</code></pre> <ul> <li>Check the saved XML file and try to find where the layers, bounding boxes or coordinate reference systems (CRSs) are defined.</li> </ul>  Reminder: Firefox and Google Chrome browsers have some extensions to visiualize XML files in a \"pretty\" way. Otherwise you can open the XML file with your favorite text editor and search for a \"pretty print\" solution. (For Example: XMLTools extension is available in the Notepad++ plugin repository.)  <ul> <li>You can also send queries to get single images with predefined properties. To do that, you may need to expose more informaiton about the WMS service using following commands:</li> </ul> <pre><code>print('CRS Options : ',mytest['WMS_DGM1_HAMBURG'].crsOptions, '\\n')\nprint('Bounding Box : ', mytest['WMS_DGM1_HAMBURG'].boundingBox, '\\n')\nprint('Layer Style : ', mytest['WMS_DGM1_HAMBURG'].styles, '\\n')\nprint('Supported Formats : ', mytest.getOperationByName('GetMap').formatOptions)\n</code></pre> <pre><code>CRS Options :  ['EPSG:25832', 'EPSG:3857', 'EPSG:4258', 'CRS:84', 'EPSG:3044', 'EPSG:25833', 'EPSG:4326', 'EPSG:31467', 'EPSG:4647']\n\nBounding Box :  (8.482047, 53.385591, 10.355638, 53.941383)\n\nLayer Style :  {'default': {'title': 'default', 'legend': 'https://geodienste.hamburg.de/HH_WMS_DGM1?language=ger&amp;version=1.3.0&amp;service=WMS&amp;request=GetLegendGraphic&amp;sld_version=1.1.0&amp;layer=WMS_DGM1_HAMBURG&amp;format=image/png&amp;STYLE=default', 'legend_width': '298', 'legend_height': '865', 'legend_format': 'image/png'}}\n\nSupported Formats :  ['image/png', 'image/jpeg', 'image/png; mode=8bit', 'image/vnd.jpeg-png', 'image/vnd.jpeg-png8', 'application/x-pdf', 'image/svg+xml', 'image/tiff', 'application/vnd.google-earth.kml+xml', 'application/vnd.google-earth.kmz', 'application/vnd.mapbox-vector-tile', 'application/x-protobuf', 'application/json']\n</code></pre> <ul> <li>So, you are aware of capability of the WMS service and you can use this data to get data from the server:</li> </ul> Note: Note that if you are using a different WMS service, you need to change the parameters given in the next example. <pre><code>from IPython.display import Image\n\nimg = mytest.getmap(\n    layers=['WMS_DGM1_HAMBURG'],\n    size=[300, 300],\n    srs=\"EPSG:4326\",\n    bbox=[9.5, 53.4, 10, 53.7],\n    format=\"image/jpeg\")\n\nImage(img.read())\n</code></pre> <p></p>"},{"location":"install_w_pip_on_lnx/","title":"Local installation for Linux:","text":""},{"location":"install_w_pip_on_lnx/#prerequisites","title":"Prerequisites:","text":"<ul> <li>git</li> <li>python3</li> <li>venv (<code>pip install venv</code>)</li> <li>Check the python installation by typing <code>python3 --version</code> in Terminal (Command Line Interface).</li> <li>Alternatively you can execute a selected code from the \"raw_code\" folder like below: <pre><code>python3 --interactive raw_codes/exr2/exr2_step2.py\n</code></pre></li> <li>TIP: Type <code>quit()</code> to exit from the current python shell.</li> </ul>"},{"location":"install_w_pip_on_lnx/#installation","title":"Installation:","text":"<ul> <li>(1) Go to your home directory and copy the github repository to your computer in Terminal: <pre><code>cd ~\ngit clone https://github.com/muratkendir/dist-gis-exercises.git\n</code></pre></li> <li>(2) Go into the downloaded directory: <pre><code>cd dist-gis-exercises\n</code></pre></li> <li>(3) Create a python environment as \"myenv\" or just use a custom name: <pre><code>python3 -m venv myenv\n</code></pre></li> <li>(Checkpoint) Check the \"myenv\" by listing it's contents: <pre><code>ls myenv\nls myenv/bin\n</code></pre></li> <li>(4) Activate the environment (Environment name should appear on the left): <pre><code>source myenv/bin/activate\n</code></pre></li> <li>TIP: Type only <code>deactivate</code> to exit from the current environment and turn back to the base.</li> <li>(Checkpoint) Check the list of required python libraries: <pre><code>cat requirements.txt\n</code></pre></li> <li>(5) Install the required libraries: <pre><code>pip install --requirement requirements.txt\n</code></pre></li> <li>(6) Install the Jupyter Notebook using pip command: <pre><code>pip install notebook\n</code></pre></li> <li>(7) Run the Jupyter Notebook and visit the locally hosted site (localhost:8888) after that: <pre><code>jupyter notebook\n</code></pre></li> <li>TIP: Press Ctrl+C to shut down the current Jupyter session.</li> <li>(8) Find the file with IPYNB extension and double click on it.</li> <li>To edit a cell (A block may contain code or makrdown document) double click on it</li> <li>To run a cell press Ctrl+Enter</li> <li>To swtich the content type of the cell use the dropdown menu on the top menu. </li> <li>(9) (Optional) If you want to check libraries, classes or built-ins, it is recommended to use bpython. Install bpython via pip: <pre><code>pip install bpython\n</code></pre></li> <li>TIP: Type <code>Exit()</code> to close current bpython session.</li> </ul>"},{"location":"install_w_pip_on_win/","title":"Windows w PIP","text":""},{"location":"install_w_pip_on_win/#local-installation-for-windows","title":"Local Installation for Windows","text":""},{"location":"install_w_pip_on_win/#prerequisites","title":"Prerequisites:","text":"<ul> <li>python3</li> <li>venv (<code>pip install venv</code>)</li> <li>Check the python installation by typing <code>python --version</code> in CMD (Command Prompt).</li> <li>Alternatively you can execute a selected code from the \"raw_code\" folder like below: <pre><code>python -i .\\raw_codes\\exr2\\exr2_step2.py\n</code></pre></li> <li>TIP: Type <code>quit()</code> to exit from the current python shell.</li> </ul>"},{"location":"install_w_pip_on_win/#installation","title":"Installation:","text":"<ul> <li>(1) Download the ZIP file from the github repository and extract the contents into a folder. Than simply change the directory to the extracted one: <pre><code>cd  C:\\Users\\USERNAME\\EXTRACTED_FOLDER\n</code></pre></li> <li>(2) Create a python environment as \"myenv\" or just use a custom name: <pre><code>python -m venv myenv\n</code></pre></li> <li>(Checkpoint 1) Check the \"myenv\" by listing it's contents: <pre><code>dir myenv\ndir myenv\\Scripts\n</code></pre></li> <li>(3) Activate the environment (Environment name should appear on the left): <pre><code>.\\myenv\\Scripts\\activate.bat\n</code></pre></li> <li>TIP: Type <code>.\\myenv\\Scripts\\deactivate.bat</code> to deactivate the current environment and turn back to the base.</li> <li>(Checkpoint) Check the list of required python libraries: <pre><code>type requirements.txt\n</code></pre></li> <li>(4) Install the required libraries: <pre><code>pip install --requirement requirements.txt\n</code></pre></li> <li>(5) Install the Jupyter Notebook using pip command: <pre><code>pip install notebook\n</code></pre></li> <li>(6) Run the Jupyter Notebook and visit the locally hosted site (localhost:8888) after that: <pre><code>jupyter notebook\n</code></pre></li> <li>TIP: Press Ctrl+C to shut down the current Jupyter session.</li> <li>(7) Find the file with IPYNB extension and double click on it.</li> <li>To edit a cell (A block may contain code or makrdown document) double click on it</li> <li>To run a cell press Ctrl+Enter</li> <li>To swtich the content type of the cell use the dropdown menu on the top menu.</li> </ul>"}]}