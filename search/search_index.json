{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dist-gis-exercises","text":""},{"location":"#the-notebooks-used-in-the-distributed-geoinformation-systems-and-cloud-computing-courses","title":"The notebooks used in the \"Distributed Geoinformation Systems and Cloud Computing\" courses","text":"<p>Main Author: M. Sc. Murat Kendir Supervisor: Prof. Thomas Kolbe</p> <p>Contact: murat.kendir(at)tum.de</p> <p>Run the Python Notebook via Binder:</p> <p></p>"},{"location":"#exercises","title":"Exercises","text":"<ul> <li>Exercise 1:</li> <li>Exercise 1 (Distributed Systems, Computer Networks &amp; Internet)</li> <li>Bonus Exercise - Docker Usage</li> <li>Exercise 2 (Introduction to Python with Samples)</li> <li>Exercise 3 (Spatial Data Infrastructures)</li> <li>Exercise 4 (Web Mapping in 2D / 3D)</li> <li>Exercise 5 (Virtualization &amp; Cloud Computing):<ul> <li>Preparation for Exercise 5</li> <li>Exercise 5</li> </ul> </li> </ul>"},{"location":"#other-materials","title":"Other Materials","text":"<ul> <li>OGC Web Service Samples for Discussion</li> <li>Essentials of Web Mapping</li> <li>OGC Services Sample Links</li> </ul>"},{"location":"#local-installation-instructions","title":"Local Installation Instructions","text":"<ul> <li>Virtual Env.  on Windows devices with PIP*</li> <li>Virtual Env.  on Linux devices with PIP</li> </ul> <p>*PIP : Python's native package management system, which can pull the packages from the PYPI online repository.</p>"},{"location":"essentials_of_web_mapping/","title":"Essentials of Web Mapping based on JavaScript Libraries","text":"<p>Munich Technical University || Chair of Geoinformatics</p> <p>Murat Kendir, Prof. Thomas Kolbe || murat.kendir@tum.de</p> <ul> <li>In this document we will discuss concepts related to web mapping based on JavaScript libraries.</li> <li>Since all web mapping libraries used in this document are based on the JavaScript language, we will also partially discuss some basic concepts of JavaScript.</li> </ul> <p>Presentation Mode</p>"},{"location":"essentials_of_web_mapping/#1-how-to-combine-different-sources-in-html","title":"1) How to combine different sources in HTML?","text":"<ul> <li>In an HTML document, you can combine different resources for use in the web interface.</li> <li>Traditionally, files related to style, content and programs are stored in separate files and combined into one HTML file. One popular method of file separation is to use HTML (content), CSS (style) and Javascript (program) files.</li> <li>It should be noted that separation is not always the best method. Sometimes developers prefer to use them in a single HTML file.</li> </ul>"},{"location":"essentials_of_web_mapping/#1a-b-defining-styles-for-html-elements","title":"1.a-b) Defining styles for HTML elements","text":"<p>Demo 1a <pre><code>&lt;title&gt;My Web Page&lt;/title&gt;\n&lt;div align=\"center\"&gt;\n&lt;h1&gt;Welcome to my website!&lt;/h1&gt;\n&lt;p align=\"right\"&gt;This is my first web page design.&lt;/p&gt;\n&lt;p align=\"left\"&gt;I am still very excited to make this.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p> <p>Demo 1b <pre><code>&lt;title&gt;My Web Page&lt;/title&gt;\n&lt;style&gt;\nh1 {text-align:center;}\np {text-align:left;} &lt;/style&gt;\n&lt;div&gt;\n&lt;h1&gt;Welcome to my website!&lt;/h1&gt;\n&lt;p&gt;This is my first web page design.&lt;/p&gt;\n&lt;p&gt;I am still very excited to make this.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"essentials_of_web_mapping/#1c-referencing-to-html-elements","title":"1.c) Referencing to HTML elements","text":"<p>Demo 1c <pre><code>&lt;title&gt;My Web Page&lt;/title&gt;\n&lt;style&gt;\n#title1 {text-align:center;}\n#paragraph1 {text-align:left;} .right {text-align:right;}\n&lt;/style&gt;\n&lt;div&gt;\n&lt;h1 id=\"title1\"&gt;Welcome to my website!&lt;/h1&gt;\n&lt;p class=\"right\"&gt;This is my first web page design.&lt;/p&gt;\n&lt;p id=\"paragraph1\"&gt;I am still very excited to make this.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"essentials_of_web_mapping/#1d-referencing-to-html-elements","title":"1.d) Referencing to HTML elements","text":"<p>Demo 1d</p> <pre><code>&lt;title&gt;My Web Page&lt;/title&gt;\n&lt;style&gt;\n#title1 {text-align:center;}\n#paragraph1 {text-align:left;} .right {text-align:right;}\n&lt;/style&gt;\n&lt;div&gt;\n&lt;h1 id=\"title1\"&gt;Welcome to my website!&lt;/h1&gt;\n&lt;p class=\"right\"&gt;This is my first web page design.&lt;/p&gt;\n&lt;p id=\"paragraph1\"&gt;I am still very excited to make this.&lt;/p&gt;\n&lt;p id=\"paragraph1\" class=\"right\"&gt;What an exciting moment.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"essentials_of_web_mapping/#1e-importing-styles-from-an-external-file","title":"1.e) Importing Styles from an external file","text":"<p>Demo 1e</p> <pre><code>&lt;title&gt;My Web Page&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"my_style.css\"&gt;\n&lt;div&gt;\n&lt;h1 id=\"title1\"&gt;Welcome to my website!&lt;/h1&gt;\n&lt;p class=\"right\"&gt;This is my first web page design.&lt;/p&gt;\n&lt;p id=\"paragraph1\"&gt;I am still very excited to make this.&lt;/p&gt;\n&lt;p id=\"paragraph1\" class=\"right\"&gt;What an exciting moment.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"essentials_of_web_mapping/#1f-importing-styles-from-an-external-file","title":"1.f) Importing Styles from an external file","text":"<p>Demo 1f</p> <pre><code>&lt;title&gt;My Web Page&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"https://www.neredekaliyor.com/koordinat_paylasma/my_style.css\"&gt;\n&lt;div&gt;\n&lt;h1 id=\"title1\"&gt;Welcome to my website!&lt;/h1&gt;\n&lt;p class=\"right\"&gt;This is my first web page design.&lt;/p&gt;\n&lt;p id=\"paragraph1\"&gt;I am still very excited to make this.&lt;/p&gt;\n&lt;p id=\"paragraph1\" class=\"right\"&gt;What an exciting moment.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"essentials_of_web_mapping/#2a-how-to-configure-modern-web-sites-using-javascript-libraries","title":"2.a) How to configure modern web sites using JavaScript libraries?","text":"<ul> <li>Similar to CSS implementations, JavaScript code can be applied to HTML files using internal or external sources.</li> <li>Modern websites often combine multiple JavaScript libraries.</li> </ul> <p>An Example: ThreeJS</p> <ul> <li>Not only for geospatial use cases, but also animations, 3D models etc.</li> <li>is base library of various geospatial JavaScript libraries (e.g. three-geo, three-globe)</li> <li>Implemented into QGIS to use as 3D Visualizer</li> <li>accessible through View &gt; 3D Map Views</li> </ul> <p>Demo 2a</p>"},{"location":"essentials_of_web_mapping/#3a-web-map-with-openlayers","title":"3.a) Web Map with OpenLayers","text":"<ul> <li>OpenLayers is one of the most advanced 2D web map libraries.</li> </ul> <p>Demo3a</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/ol@v7.2.2/dist/ol.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/ol@v7.2.2/ol.css\"&gt;\n&lt;title&gt;Empty Map with defaults&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"demo3a.css\"&gt;&lt;/link&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"box\"&gt; Check the style of this box. &lt;/div&gt;\n&lt;script type=\"text/javascript\" src=\"demo3a.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"essentials_of_web_mapping/#3b-understanding-the-javascript-code","title":"3.b) Understanding the JavaScript code","text":"<pre><code>var map = new ol.Map({\ntarget: 'map',\nlayers: [\nnew ol.layer.Tile({\nsource: new ol.source.OSM()})\n],\nview: new ol.View({\ncenter: [1287392,6123424],\nzoom: 10\n})\n});\n</code></pre> <ul> <li>var map --&gt; defines a custom variable</li> <li>new ol.Map --&gt; calls the Map class from the ol module.</li> <li>target: 'map' --&gt; sets target HTML element as \"map\"</li> <li>layers: [] --&gt; adds some layer to show in map object<ul> <li>new ol.layer.Tile() --&gt; adds a layer as a tiled map</li> <li>new ol.source.OSM() --&gt; sets the source of the tile map as OSM</li> </ul> </li> <li>view: new ol.View() --&gt; sets view as a new View object.</li> </ul>"},{"location":"essentials_of_web_mapping/#3c-finding-the-elements-of-a-javascript-object","title":"3.c) Finding the elements of a JavaScript object","text":"<ul> <li>Type <code>console.dir(map)</code> in the (Web) Developer Tool of browser</li> <li>After finding the target element, you can print the content with <code>console.log(map.targetElement_)</code></li> <li>Search for the target, layers and view elements.</li> </ul>"},{"location":"essentials_of_web_mapping/#3c-finding-the-elements-of-a-javascript-object_1","title":"3.c) Finding the elements of a JavaScript object","text":"<ul> <li>Try to find the specified map center coordinates <code>console.dir(map)</code></li> <li>Check <code>console.log(map.viewPropertyListenerKey_.target.values_)</code></li> </ul>"},{"location":"essentials_of_web_mapping/#3d-state-diagram-for-a-html-parsing-process-htmlcssopenlayers","title":"3.d) State Diagram for a HTML Parsing Process (HTML+CSS+OpenLayers)","text":""},{"location":"essentials_of_web_mapping/#4a-in-which-coordinate-reference-system-crs","title":"4.a) In which Coordinate Reference System (CRS)?","text":"<ul> <li>Even if a custom CRS is not defined, the map has to be visualized based on a default CRS.</li> <li>Check <code>console.log(map.viewPropertyListenerKey_.target.projection_)</code></li> <li>Search with the EPSG code on epsg.io to learn more about it.</li> </ul>"},{"location":"essentials_of_web_mapping/#4b-how-about-the-zoom-level","title":"4.b) How about the Zoom Level?","text":"<ul> <li>The zoom level is defined as 10 in the JavaScript code.</li> <li>Many web map applications are using the zoom level as one of the main map constructor.</li> <li>e.g. https://www.openstreetmap.org/#map=10/48.1038/11.6483</li> <li>To learn and test the zoom levels in the same CRS, you can use some plugins in QGIS:</li> <li>Set the CRS as EPSG:3857 (Pseudo-Mercator) in Map Properties</li> <li>Search for \"Zoom Level\" and/or \"Layer Tiles Mapcanvas\" in Plugins Manager</li> </ul>"},{"location":"essentials_of_web_mapping/#4c-get-the-current-zoom-level-and-write-to-an-html-element","title":"4.c) Get the current zoom level and write to an HTML element","text":"<p>Demo4c</p> <pre><code>function onZoomEnd(evt) {\nconst map = evt.map;\nvar zoomInfo = 'Zoom level : \\n' + map.getView().getZoom(); ;\nconsole.log(zoomInfo);\ndocument.getElementById('topright_box').innerHTML = zoomInfo;\n}\nmap.on('moveend', onZoomEnd);\n</code></pre>"},{"location":"essentials_of_web_mapping/#5a-how-to-add-wms-service-to-the-openlayers","title":"5.a) How to add WMS service to the OpenLayers?","text":"<p>Which one is a correct definition for a WMS service in OpenLayers?</p> <p>Demo5a</p> <p>A <pre><code>new ol.layer.Image({\nsource: new ol.source.ImageWMS({\nurl: 'https://geoportal.muenchen.de/geoserver/gsm_wfs/awm_wertstoffhoefe_opendata/ows',\nparams: {'LAYERS': 'awm_wertstoffhoefe_opendata'},\n}),\n</code></pre></p> <p>B <pre><code>new Image({\nsource: new ImageWMS({\nurl: 'https://geoportal.muenchen.de/geoserver/gsm_wfs/awm_wertstoffhoefe_opendata/ows',\nparams: {'LAYERS': 'awm_wertstoffhoefe_opendata'},\n}),\n</code></pre></p>"},{"location":"essentials_of_web_mapping/#5b-how-to-detect-the-module-hierarchy-in-a-package","title":"5.b) How to detect the module hierarchy in a package?","text":"<p>Method 1: Check the debugger tool in (Web) Developer Tool.</p> <p>Method 2: Check the documentation of the used library (e.g. OpenLayers API Doc ).</p> <p></p>"},{"location":"essentials_of_web_mapping/#5c-how-to-get-feature-info","title":"5.c) How to get feature info?","text":"<p>Demo5c</p> <ul> <li> <p>Check the GetFeatureInfo operation's documentation: OGC e-Learning</p> </li> <li> <p>Check the following classes/methods in OpenLayers API Doc:</p> </li> <li>Search for \"on(type, listener)\" method</li> <li>Search for \"getFeatureInfoUrl\" method</li> </ul> <pre><code>map.on('singleclick', function (evt) {\n//console.log(evt);\ndocument.getElementById('topright_box').innerHTML = '';\nconst viewResolution = view.getResolution();\nconst url = wmsSource.getFeatureInfoUrl(\nevt.coordinate,\nviewResolution,\n'EPSG:3857',\n{'INFO_FORMAT': 'text/plain'},\n);\n});\n</code></pre>"},{"location":"essentials_of_web_mapping/#5d-display-the-feature-information-in-a-html-element","title":"5.d) Display the feature information in a HTML element","text":"<p>Demo5c</p> <ul> <li>If you are not familiar with some JavaScript functions or classes like 'let', 'const', 'Promise', check the documents for the 2015 JavaScript version (aka ECMAScript 6/ES6):</li> <li>https://www.w3schools.com/Js/js_es6.asp</li> </ul> <pre><code>map.on('singleclick', function (evt) {\n//console.log(evt);\ndocument.getElementById('topright_box').innerHTML = '';\nconst viewResolution = view.getResolution();\nconst url = wmsSource.getFeatureInfoUrl(\nevt.coordinate,\nviewResolution,\n'EPSG:3857',\n{'INFO_FORMAT': 'text/plain'},\n);\nif (url) {\nfetch(url)\n.then((response) =&gt; response.text())\n.then((html) =&gt; {\ndocument.getElementById('topright_box').innerHTML = html;\n});\n}\n});\n</code></pre>"},{"location":"essentials_of_web_mapping/#6a-how-to-add-wmts-layer-to-the-openlayers","title":"6.a) How to add WMTS layer to the OpenLayers?","text":"<p>USGS WMTS service (Capabilities)</p> <ul> <li>Which one is a correct definiiton for a WMTS connection?</li> </ul> <p>A <pre><code>const my_wmts = new ol.layer.Tile({\nopacity: 0.5,\nsource: new ol.source.WMTS({\nurl: 'https://mrdata.usgs.gov/mapcache/wmts',\nlayer: 'sgmc2',\nwidth: '256px',\nheight: '256px',\nformat: 'image/png',\n}),\n});\n</code></pre></p> <p>B <pre><code>const my_wmts = new ol.layer.Tile({\nopacity: 0.5,\nsource: new ol.source.WMTS({\nurl: 'https://mrdata.usgs.gov/mapcache/wmts',\nlayer: 'sgmc2',\nmatrixSet: 'GoogleMapsCompatible',\nformat: 'image/png',\n}),\n});\n</code></pre></p>"},{"location":"essentials_of_web_mapping/#6b-what-are-the-resolution-and-matrixset-ids","title":"6.b) What are the resolution and MatrixSet IDs?","text":"<ul> <li>Also check the EPSG:3857 (Pseudo-Mercator) extents : EPSG.io</li> </ul> <p>Demo6a</p> <pre><code>const projection = ol.proj.get('EPSG:3857');\nconst projectionExtent = projection.getExtent();\nconsole.log('Projection Extent : ', projectionExtent);\nconst size = ol.extent.getWidth(projectionExtent) / 256;\nconsole.log('Size : ' , size);\nconst resolutions = new Array(19);\nconst matrixIds = new Array(19);\nfor (let z = 0; z &lt; 19; ++z) {\n// generate resolutions and matrixIds arrays for this WMTS\nresolutions[z] = size / Math.pow(2, z);\nmatrixIds[z] = z;\n}\n</code></pre>"},{"location":"essentials_of_web_mapping/#6c-implementing-the-resolution-and-matrixset-ids-with-openlayers-wmts-request","title":"6.c) Implementing the resolution and MatrixSet IDs with openlayers WMTS request","text":"<p>Demo6a</p> <pre><code>const my_wmts = new ol.layer.Tile({\nopacity: 0.5,\nsource: new ol.source.WMTS({\nurl: 'https://mrdata.usgs.gov/mapcache/wmts',\nlayer: 'sgmc2',\nmatrixSet: 'GoogleMapsCompatible',\nformat: 'image/png',\nprojection: projection,\ntileGrid: new ol.tilegrid.WMTS({\norigin: ol.extent.getTopLeft(projectionExtent),\nresolutions: resolutions,\nmatrixIds: matrixIds,\n}),\nstyle: 'default',\nwrapX: false,\n}),\n});\n</code></pre>"},{"location":"essentials_of_web_mapping/#7a-3d-mapping-with-cesium","title":"7.a) 3D Mapping with Cesium","text":"<ul> <li>The existing base map options in CesiumJS need authorization (API token) to limit map requests (e.g. Bing Map)</li> <li>However, OpenStreetMap offers a tile basemap that does not require any authorization and can be used in CesiumJS.</li> </ul> <pre><code>&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Cesium Demo&lt;/title&gt;\n&lt;script src=\"../cesium/Build/Cesium/Cesium.js\"&gt;&lt;/script&gt;\n&lt;link href=\"../cesium/Build/Cesium/Widgets/widgets.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body style=\"width:100%;height:100%;\"&gt;\n&lt;div id=\"cesiumContainer\"&gt;&lt;/div&gt;\n&lt;script&gt;\n// Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.\nconst viewer = new Cesium.Viewer('cesiumContainer', {\n//Use OpenStreetMaps\nimageryProvider : new Cesium.OpenStreetMapImageryProvider({\nurl : 'https://a.tile.openstreetmap.org/'\n}),\n});      &lt;/script&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"essentials_of_web_mapping/#7b-converting-local-js-file-references-to-cloud-repository-references","title":"7b) Converting local JS file references to cloud repository references","text":"<p>Cesium with online repositories</p> <ul> <li>Usually online JS repositories provided in the documentation page of the library.</li> <li>However, you can also check some known JS repositories such as cdnjs, jsdelivery etc.</li> </ul> <pre><code>&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Cesium Demo&lt;/title&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/cesium/1.124.0/Cesium.js\"&gt;&lt;/script&gt;\n&lt;link href=\"https://cdn.jsdelivr.net/npm/cesium@1.124.0/Build/Cesium/Widgets/widgets.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body style=\"width:100%;height:100%;\"&gt;\n&lt;div id=\"cesiumContainer\"&gt;&lt;/div&gt;\n&lt;script&gt;\n// Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.\nconst viewer = new Cesium.Viewer('cesiumContainer', {\n//Use OpenStreetMaps\nimageryProvider : new Cesium.OpenStreetMapImageryProvider({\nurl : 'https://a.tile.openstreetmap.org/'\n}),\n});  &lt;/script&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"essentials_of_web_mapping/#7c-camera-object","title":"7.c) Camera Object","text":"<ul> <li>Unlike 2D maps, 3D map environments need a camera object so that a scene selected on the map can be presented to the end user.</li> </ul> <p>Cesium with camera initialization</p> <pre><code>// Fly the camera to San Francisco at the given longitude, latitude, and height.\nviewer.camera.flyTo({\ndestination : Cesium.Cartesian3.fromDegrees(11.575,48.107, 4000),\norientation : {\nheading : Cesium.Math.toRadians(0.0),\npitch : Cesium.Math.toRadians(-45.0),\n}\n});\n</code></pre>"},{"location":"essentials_of_web_mapping/#7d-what-is-cartesian3","title":"7.d) What is \"Cartesian3\"?","text":"<ul> <li>Images taken from https://kartoweb.itc.nl/geometrics/Coordinate%20systems/coordsys.html</li> </ul>"},{"location":"essentials_of_web_mapping/#7e-how-the-basemaps-are-loaded-into-cesium-tiling-mechanism","title":"7.e) How the basemaps are loaded into Cesium (Tiling Mechanism)","text":"<ul> <li>Visit the next demo page and try to give some tilt angle to the current view.</li> <li>Unfold the Cesium Viewer Inspector and find the Terrain group at the bottom.</li> <li> <p>Enable the \"Show Tile Coordinates\" and the \"Suspend LOD Update\" options, then try zooming out.</p> </li> <li> <p>This is the basic 2D tiling mechanism that used to overlay 2D maps and terrain files.</p> </li> </ul> <p>Cesium with viewer Inspector</p>"},{"location":"essentials_of_web_mapping/#7f-how-to-add-wms-service-to-the-cesium","title":"7.f) How to add WMS service to the Cesium","text":"<ul> <li> <p>CesiumJS simply calculates the coverage area and tries to request for the WMS image by comparing with the current view area of the camera (frustum).</p> </li> <li> <p>Check the Capabilities of a found WMS service: M\u00fcnchen Bezirksteil</p> </li> </ul> <p>Cesium with WMS service</p> <pre><code>// Add the main URL of WMS service\nconst geourl = 'https://geoportal.muenchen.de/geoserver/gsm_wfs/vablock_bezirksteil_opendata/ows?';\n//Define the WMS service using available parameters\nconst geoWmsLayer = new Cesium.WebMapServiceImageryProvider({\nurl : geourl,\nparameters: {\nservice : 'WMS',\nformat : 'image/png',\ntransparent : true,\n},\nlayers : 'vablock_bezirksteil_opendata',\nEPSG: '4326'\n});\n//Add to the list of imagery layers of the current viewer.\nviewer.imageryLayers.addImageryProvider(geoWmsLayer);\n</code></pre>"},{"location":"essentials_of_web_mapping/#7g-how-to-add-default-world-terrain-using-cesium-ion-token","title":"7.g) How to add default world terrain using Cesium Ion token","text":"<p>Cesium with Terrain</p> <ul> <li>Create an account on Cesium Ion and generate a token specifically reserved for an application or limited in time.</li> <li>Add to the beginning of your CesiumJS code.</li> </ul> <pre><code>//Change the token here below\nCesium.Ion.defaultAccessToken = \"xyzabcxyzabcxyzabcxyzabcxyzabcxyzabcxyzabcxyzabcxyzabcxyzabcxyzabcxyzabcxyzabc\";\n</code></pre> <ul> <li>Go to Asset Manager in Cesium Ion web site and find the ID number \u0131f the world terrain.</li> <li>Than add the terrain by using its ID number as below.</li> </ul> <pre><code>viewer.scene.setTerrain(\nnew Cesium.Terrain(\nCesium.CesiumTerrainProvider.fromIonAssetId(1),\n),\n);\n</code></pre>"},{"location":"essentials_of_web_mapping/#8a-adding-3d-tiles","title":"8.a) Adding 3D Tiles","text":"<p>Cesium with 3D Tiles</p> <ul> <li>Add the main JSON link of the 3DTiles to Cesium </li> <li>e.g. BaseMap.de - LOD2 Buildings</li> </ul> <pre><code>var tileset = viewer.scene.primitives.add(new Cesium.Cesium3DTileset({\nurl: 'https://web3d.basemap.de/cesium/buildings-fly/root.json'\n}));\n</code></pre> <ul> <li>You can add attribute specific styles</li> </ul> <pre><code>var cityStyle = new Cesium.Cesium3DTileStyle({\ncolor : {\nconditions : [\n[\"${surface} === 'wall'\", \"color('#f2f2f2')\"],\n[\"${surface} === 'roof'\", \"color('#ff5c4d')\"],\n[\"${surface} === 'bridge'\", \"color('#999999')\"]\n]\n},\n});\n</code></pre>"},{"location":"essentials_of_web_mapping/#8b-enable-cesium-3dtiles-inspector","title":"8.b) Enable Cesium 3DTiles Inspector","text":"<p>Cesium with 3D Tiles and Inspector</p> <p><pre><code>viewer.extend(Cesium.viewerCesium3DTilesInspectorMixin);\n</code></pre> - Try to play with \"Dynamic Screen Space Error\" values - Check the \"Memory Usage\" and the \"Rendering Statistics\"</p>"},{"location":"exercise1-bns/","title":"Exercise - Docker Usage","text":"Munich Technical University / Chair of Geoinformatics  Murat Kendir, Jicang Zhu, Prof. Thomas Kolbe  murat.kendir@tum.de   v. WiSe 2025-2026"},{"location":"exercise1-bns/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <ol> <li>Aim of the Exercise</li> </ol> </li> <li>0.1. General Preparation</li> <li>0.2. Cheatsheets</li> <li>0.3. Play With Docker</li> <li> <ol> <li>First Practice on the Local Machine with Docker</li> </ol> </li> <li>1.1. Docker Desktop Installation on Windows systems - Optional</li> <li>1.2. Running Docker Container as an Instance</li> <li>1.3. What actually happens after executing the \"docker run\" command?</li> <li>1.4. How to remove/delete docker images from the instance? - Optional</li> <li>1.5. Docker Cheatsheet and the Relevance between linux commands</li> <li>1.6. Access to the Grafana Dashboard</li> </ul>"},{"location":"exercise1-bns/#0-aim-of-the-exercise","title":"0. Aim of the Exercise","text":"<p>This exercise primarily focuses on the usage of docker virtualization. You will practice with docker command line interface or the desktop application by running and inspecting some containers and images. In general, you will need to complete the following tasks:</p> <ul> <li>Learn how to use Docker using the given preparation materials.</li> <li>Run a docker container running the PlantUML Server on your own machine.</li> <li>Try to reach out to the server.</li> </ul> <p>You can refer to the following resources when needed:</p>"},{"location":"exercise1-bns/#01-general-preparation","title":"0.1. General Preparation","text":"<ul> <li> Check the What is Docker and How it works? video (16 min)</li> <li> Check the page \"Docker - Get started - Introduction\" and follow the instructions below one of the options (Docker Desktop / Play with Docker) (~15 min).</li> </ul>"},{"location":"exercise1-bns/#02-cheatsheets","title":"0.2. Cheatsheets","text":"<ul> <li> Docker CLI (Command Line Interface) Cheat Sheet</li> </ul>"},{"location":"exercise1-bns/#03-play-with-docker","title":"0.3. Play With Docker","text":"<p>Open the following website: play-with-docker</p> <ul> <li> Click to login and select docker</li> <li>Register with your email account first if you do not have a docker hub account.<ul> <li>If the popup is blocked, disable the popup blocker and try again.</li> </ul> </li> <li> Docker Playground will be launched and a session will be started which will be live for 2 hours.</li> <li> Click to Add New Instance</li> <li> An instance runtime will be started with a specific local ip address and ssh key.</li> <li> List the running docker containers by typing docker ps in the terminal screen (e.g. command prompt of the instance).</li> <li> If you want to check all (running and idle) available docker containers, type docker ps -- all</li> <li> Check all available commands: docker -- help</li> <li> If you want to check command-specific options and arguments, type docker any_command -- help (For exp. \"docker ps --help\")</li> </ul> <p>TIP: The terminal screen and available commands here will have the same or similar commands as a Linux terminal screen (command line), because usually the examples run on a Linux system. To check which version of Linux is used as the base operating system, type uname -a in the terminal.</p> Play with Docker web site"},{"location":"exercise1-bns/#1-first-practice-on-the-local-machine-with-docker","title":"1. First Practice on the Local Machine with Docker","text":""},{"location":"exercise1-bns/#11-docker-desktop-installation-on-windows-systems-optional","title":"1.1. Docker Desktop Installation on Windows systems - Optional","text":"Windows (Built-in) Features <p>Check this step if you want to download and install the Docker Desktop or CLI tool on your personal computer</p> <ul> <li>If this is your first time downloading and installing Docker Desktop, it may be more effective to enable the *WSL2 option in Docker Settings.</li> <li>Search for \"Windows Properties\" and try to enable \"Windows Subsystem\". It is mandatory to enable Hyper-V. Hyper-V is a virtualization support that might be provided by your computer's CPU hardware. If it is not possible to enable it, you should check the BIOS configuration and look for a virtualization support option (it is usually on the \"Advanced\" page or tab).</li> <li>Enable Windows Subsystem </li> <li>Click on the gear icon in the top right corner and go to Resources  WSL Integration.</li> <li>At the first start of the Docker Desktop app, log in to Docker Hub using the Login button in the top right corner.</li> <li>You will continue using the CLI (Command Line Interface) tool, but you can still check the Desktop App to view the containers, images etc.</li> </ul> WSL2 Option"},{"location":"exercise1-bns/#12-running-docker-container-as-an-instance","title":"1.2. Running Docker Container as an Instance","text":"<ul> <li> There is no working docker containers yet.</li> <li> Start a new docker container by typing:     <pre><code>docker run -d -p 3000:3000 \\\n--name=grafana \\\n-e \"GF_INSTALL_PLUGINS=iosb-sensorthings-datasource\" \\\ngrafana/grafana:latest\n</code></pre></li> <li>Explanations of options and arguments:<ul> <li>-d or --detach : The container continues to run in the background.</li> <li>-p or --publish : Forward (Publish) a port in the container to the host (Left side shows the port of the host machine and right side of the column shows the port of the container)</li> <li>-e or --env : Sets environment variables</li> <li>--name (no alias) : Assign a name to the container, to easily recognize containers.</li> <li>grafana\\/grafana:latest means \"publisher\\/image:anyTag\" : The last argument is the full name of the docker image. Usually, tags include version numbers.</li> </ul> </li> <li> Check the available docker containers by typing docker ps</li> </ul>"},{"location":"exercise1-bns/#13-what-actually-happens-after-executing-the-docker-run-command","title":"1.3. What actually happens after executing the \"docker run\" command?","text":"<ul> <li>The Docker app checked if the requested image (grafana/grafana:latest) already exists in our host machine. </li> <li> <p>If it is not available, it tries to download it from Docker Hub by searching for the same image name.</p> </li> <li> <p> Visit the Docker Hub page and search for our image manually:</p> </li> <li>hub.docker.com</li> <li>You can optionally search for any docker image on the command line:</li> <li>docker search grafana</li> <li>Check the available docker images in the host machine:</li> <li>docker image ls</li> </ul> Docker Hub"},{"location":"exercise1-bns/#14-how-to-removedelete-docker-images-from-the-instance-optional","title":"1.4. How to remove/delete docker images from the instance? - Optional","text":"<ul> <li> Try deleting the image:</li> <li><code>docker rmi grafana/grafana:latest&lt;/mark&gt;</code></li> <li> When an image is referenced to a container, the terminal will show an error and the container may still be running. So what we need to do is first stop the running container and then remove the referenced container:</li> <li><code>docker stop \\&lt;CONTAINER_NAME\\&gt;</code></li> <li>or alternatively use the container ID shown in<ul> <li>Type <code>docker container list</code> (same as \"ps\" command) to see container IDs and names.</li> <li><code>docker stop \\&lt;CONTAINER_ID\\&gt;</code></li> </ul> </li> <li> Check existing containers with the -all option:</li> <li><code>docker ps \\-\\-all</code></li> <li> Remove the container:</li> <li><code>docker rm grafana</code></li> <li>or alternatively with Container ID:<ul> <li><code>docker rm 829224beac3f</code> (container IDs are not fixed numbers, try find your container's ID and replace with given one)</li> </ul> </li> <li> Finally, remove the image from your instance:</li> <li><code>docker rmi grafana/grafana:latest</code></li> </ul>"},{"location":"exercise1-bns/#15-docker-cheatsheet-and-the-relevance-between-linux-commands","title":"1.5. Docker Cheatsheet and the Relevance between linux commands","text":"<p>Many command abbreviations are inherited from Linux/Unix-based systems. These long command names can be used, for example, to make it easier to memorize abbreviated commands:</p> <ul> <li>cp : Copy</li> <li>rm : Remove</li> <li>exec : Execute</li> <li>cd : Change Directory</li> <li>ls : List</li> <li>ps : Processes</li> <li>diff : Difference</li> </ul> <p>TIP: However, one of the best ways to learn these commands is not to memorize them but to use a \"Cheatsheet\" document as an aid during the exercises. If you want to use such a document, visit this page: Docker CLI Cheat Sheet</p>"},{"location":"exercise1-bns/#16-access-to-the-grafana-dashboard","title":"1.6. Access to the Grafana Dashboard","text":"<ul> <li> If you have already removed the container and image while following the instructions in section 1.4, start from scratch and start the docker container with the same command given earlier:</li> <li>docker run -d -p 3000:3000 --name=grafana -e \\\"GF_INSTALL_PLUGINS=iosb-sensorthings-datasource\\\" grafana/grafana:latest</li> <li> Now click the Open Port button at the top of the page and specify port 3000. If your forwarded/published port is different, check the actual port number by typing docker ps.</li> <li> Type \"admin\" as username and password.</li> <li> Grafana will ask for a new password on the next page, type any password.</li> <li>If everything is OK, the Grafana start page will be shown.</li> </ul> Grafana Interface"},{"location":"exercise1/","title":"Exercise - Distributed Systems &amp; System Arcihtectures","text":"Munich Technical University / Chair of Geoinformatics   Murat Kendir*, Jicang Zhu, Prof. Thomas Kolbe   murat.kendir@tum.de  v. WiSe 2025-2026"},{"location":"exercise1/#table-of-contents","title":"Table of Contents","text":"<ul> <li>0. Aim of the Exercise</li> <li>0.1 General Preparation</li> <li>0.2 Cheatsheets</li> <li>1. Technical Diagrams and UML</li> <li>1.1. How to draw a Sequence Diagram using PlantUML<ul> <li>1.1.1. Sample PlantUML Code</li> </ul> </li> <li>1.2. How to draw a sequence Diagram using Draw.io? - Optional</li> <li>2. Thin-Client &amp; Fat-Client Architectures in the Web Applications</li> <li>2.1. Preparation for the Next Discussion about Tiers - Web Developer Tool / Developer Tool</li> <li>2.2. Discussion about the Tiers in Layered Architectures<ul> <li>2.2.1. Seismic Monitor - IRIS</li> <li>2.2.2. Geoportal Bayern</li> <li>2.2.3. TURF JS - Advanced geospatial analysis for browsers</li> </ul> </li> <li>3. Creating a Sequence Diagram using a Sample Request \u2013 Response Example</li> <li>3.1. Review the requests and responses before and after creating a route for mountain bikes in the BayernAtlas web app</li> <li>3.2. Create the Sequence Diagram by considering the previously interactions</li> <li>3.3. Request the UML Sequence Diagram from an AI Chatbot</li> </ul> <pre><code>import iplantuml\n</code></pre>"},{"location":"exercise1/#0-aim-of-the-exercise","title":"0. Aim of the Exercise","text":"<p>This exercise primarily focuses on creating UML Sequence Diagrams and understanding the importance of technically diagramming interactions between distributed systems. You will practice using diagramming tools and encounter spatial web applications to understand the mechanisms working in the background. In general, you will need to complete the following tasks:</p> <ul> <li>Select a specific interaction on any of the given websites and try to understand the interactions between the user interface and the back-end applications/services using developer tools of the browsers. (Chapter 2)</li> <li>Try to visualize the selected interaction using PlantUML or (alternatively) Draw.io, following UML Sequence Diagram rules. (Chapter 3)</li> </ul> <p>You can refer to the following resources when needed:</p>"},{"location":"exercise1/#01-general-preparation","title":"0.1 General Preparation","text":"<ul> <li> Check the General Principles of the UML Sequence Diagrams (on Moodle, 1. Week, \"01-System Architectures\" presentation, \"UML Sequence Diagrams\" section)</li> <li> Visual Paradigm - UML Tutorial</li> <li> Firefox DevTools User Docs</li> </ul>"},{"location":"exercise1/#02-cheatsheets","title":"0.2 Cheatsheets","text":"<ul> <li> PlantUML Language Reference Guide</li> <li> Understand Browser Dev Tools Network Tab - Video Tutorial</li> </ul>"},{"location":"exercise1/#1-technical-diagrams-and-uml","title":"1. Technical Diagrams and UML","text":"Technical diagrams are a visually rich way of expressing the procedures, workflows, plans, data models or scenarios in various domains. A Unified Modeling Language (UML) diagram is a standardized visual representation used to model and design software systems. It provides a blueprint of the system\u2019s structure and behavior, helping developers, analysts, and stakeholders understand, communicate, and document software architecture and processes.  <p>In the following table you will find some UML and non-UML diagram types. </p> <p>Please note that we only focus on two type of the UML diagrams (Sequence Diagram &amp; State Machine Diagram) in the Distributed GIS &amp; Cloud Computing course.</p> UML Diagram Types Non-UML Diagram Types Sequence JSON Data Usecase Wireframe graphical interface Class Archimate Activity Specification and Description Language (SDL) Component Ditaa State (Machine) Gantt Object MindMap Deployment Work Breakdown Structure Timing Mathematic with AsciiMath or JLaTeXMath notation Communication Concrete Resource Diagrams (AWS/Azure) Profile Context-Container-Component-Code (C4) Package Entity-Relationship (ER)"},{"location":"exercise1/#11-how-to-draw-a-sequence-diagram-using-plantuml","title":"1.1. How to draw a Sequence Diagram using PlantUML","text":"<p>PlantUML is an open-source tool that lets you create UML and many other technical diagrams from plain-text source code instead of dragging shapes on a canvas.</p> <p>There are also alternatives to text-based diagramming tools such as PlantUML, including Mermaid, ZenUML, etc.</p> <p>In this exercise, we will focus on using PlantUML, but you can also use different diagramming tools to visualize your diagrams according to your own purposes.</p> <p>There are multiple ways of rendering PlantUML diagrams: - [ ] plantuml.com provides an online plantuml server which is free to use. (Recommended Method)   - Just type the plantmul codes into the textbox and press submit button. - [ ] In the text editor SublimeText, there is a plugin called \"PlantUMLDiagrams\". (Optional)   - To install this plugin, press \\&lt;Ctrl&gt;+\\&lt;Shift&gt;+\\&lt;P&gt; buttons and type \"Install Package\".   - After the list of the plugins appear, search for \"PlantUMLDiagrams\" and press on it.   - After the plugin installation finished, press again \\&lt;Ctrl&gt;+\\&lt;Shift&gt;+\\&lt;P&gt; buttons and search for \"Generate Diagrams for Active View\"   - NOTE: You have to have a \"PlantUML file\" with the correct notation and file extension (.puml or .pu) - [ ] In the code editor Visual Studio Code, there is a very popular extension called \\\"PlantUML\\\".   - To install this extension, press \\&lt;Ctrl&gt;+\\&lt;Shift&gt;+\\&lt;X&gt; to open the Extensions view.   - After the Extensions sidebar appears, search for \\\"PlantUML\\\" in the search box.   - Find the official extension (usually the first one, by Jebbs) from the list and click the blue \\\"Install\\\" button.   - After the extension has finished installing, open your file that contains PlantUML code.   - To generate a preview of your diagram, press the shortcut keys \\&lt;Alt&gt;+\\&lt;D&gt;.   - (Optional) Alternatively, you can press \\&lt;Ctrl&gt;+\\&lt;Shift&gt;+\\&lt;P&gt; to open the Command Palette, then search for \\\"PlantUML: Preview Current Diagram\\\" and press Enter. - [ ] In Jupyter Lab (You can run it via Anaconda), there is an interactive PlantUML library called \"iplantuml\" (Optional)   - Type \"pip install iplantuml\" in the running jupyter notebook.   - Create an empty code cell and enter \"import iplantuml\"   - Create an additional code cell and start to typing your plantuml text starting with \"%%plantuml\".   - After running both of the cells, you can visualize the plantuml diagram</p>"},{"location":"exercise1/#111-sample-plantuml-code","title":"1.1.1. Sample PlantUML Code","text":"<p>You can use the following code as an example to test the tools described in the previous section.</p> <pre><code>%%plantuml\n@startuml\nactor Alice\nAlice -&gt; Bob: Authentication Request\nActivate Bob\nBob -&gt; Alice: Authentication Response\nDeactivate Bob\nAlice -&gt; Bob: Another authentication Request\nActivate Bob\nAlice &lt;- Bob: Another authentication Response\nDeactivate Bob\n@enduml\n</code></pre> <pre><code>Writing output for /home/murat/gitpot/dist-gis-exercises/docs/notebooks/550589d4-9c76-4585-bb28-b01cceb48aed.uml to 550589d4-9c76-4585-bb28-b01cceb48aed.svg\n</code></pre> <p></p>"},{"location":"exercise1/#12-how-to-draw-a-sequence-diagram-using-drawio-optional","title":"1.2. How to draw a sequence Diagram using Draw.io? - Optional","text":"<p>You can create UML diagram on Diagrams Net</p> <ul> <li> Choose the location where you want to save your diagram. We suggest saving it in your local device, thus you don\u2019t need to log in or register an account. You can start drawing by creating a blank diagram.</li> </ul> Draw.io - Choose Type <ul> <li> As you start drawing, a panel will appear on the left side, where you can select UML shapes. Find those relevant shapes and use them to create your sequence diagram. You can refer to the lecture slides and see which shapes are relevant.</li> </ul> Draw.io - UML Shapes Collection <p>Tip: In the application you can use the shapes named \u201cActor\u201d, \u201cLifeline\u201d, \u201cActivation Bar\u201d, \u201cSelf Call\u201d, \u201cMessage\u201d and \u201cReturn\u201d. If you have forgotten the notations of the UML sequence diagram, check the slides 31-39  of the presentation \u201c01 \u2013 System architectures\u201d. </p>"},{"location":"exercise1/#2-thin-client-fat-client-architectures-in-the-web-applications","title":"2. Thin-Client &amp; Fat-Client Architectures in the Web Applications","text":"<p>In this step,  we will learn how to observe some interactions on different web sites using \u201cweb developer tools\u201d (in Firefox) or \u201cDeveloper Tools\u201d (Chrome). We will discuss which interactions are based on a Fat-Client or Thin-Client architecture in relation to our observations (Relevant Presentation: 01 - System Architectures / page 17).</p>"},{"location":"exercise1/#21-preparation-for-the-next-discussion-about-tiers-web-developer-tool-developer-tool","title":"2.1. Preparation for the Next Discussion about Tiers - Web Developer Tool / Developer Tool","text":"<ul> <li>Open Firefox or Google Chrome web browser.</li> <li>Simply navigate to the relevant page shown in the next topic ( IRIS Seismic Monitor ) or go to a random web site.</li> <li>Press Ctrl + Shift + C buttons together or Ctrl + Shift + I / Alternatively, you can navigate from menu:</li> <li>For Firefox: Menu &gt; More Tools &gt; Web Developer Tool</li> <li>For Chrome: Menu &gt; More Tools &gt; Developer Tool</li> <li>Navigate to the Network tab and press reload button. / Alternatively, you can press F5 key for refreshing the page. (If you want to refresh the web page by clearing the cache, press Ctrl + F5)</li> <li>Enable \u201cDisable Cache\u201d by checking the box.</li> <li>Observe at a quick glance which files have been successfully downloaded and which have not. Download status is exposed as \u201cstatus codes\u201d in the first column of the Network tab. If you want to learn more about status codes, visit the page: HTTP Status Codes or search for \u201cHTTP status codes\u201d</li> <li>Right-click on the column headers in the Network Pane and enable the Start Time, End Time, Response Time and Duration columns. All these temporal attributes will be visualized in the Timeline (called Waterfall in the Chrome browser) section in the Network Pane. (The same attributes are available in the Waterfall column in the Chrome browser. If you cannot see the Waterfall column, right-click on one of the column headers and enable it).</li> <li>It is now possible to see loaded resources in ascending or descending time order. This is very useful for detecting the latest loaded resources on a web page.</li> <li>Simply click on a row to view methods for these resources (GET/POST or DELETE) and header attributes (such as MIME types, and charset).</li> <li>You can use the \u201cRaw\u201d switch to see raw data in the Response tab.</li> </ul> <p>On Chrome: Clear panel, filter requests by requested data type.</p> Chrome Filter Requests <p>On Chrome: Read the request header and the corresponding response, check the detailed data type (MIME type and character encoding / charset).</p> Chrome Check Details <p>On Chrome: You can sort requests by clicking on the column names and it is also possible to sort by start time, end time, response time, etc. These are not displayed directly as separate columns, but you can find them in the \u201cTimeline\u201d/\u201cWaterfall\u201d.</p> Chrome Waterfall <p>On Firefox: Clear panel, filter requests by type of requested data</p> Firefox Data Type <p>On Firefox: By clicking on a row, you can also view the details of a request and corresponding response. Also it\u2019s possible to sort requests by start time, end time, etc. in Firefox.</p> Firefox Data Type"},{"location":"exercise1/#22-discussion-about-the-tiers-in-layered-architectures","title":"2.2. Discussion about the Tiers in Layered Architectures","text":"<p>Examine the following web sites by using the \u201cWeb Developer Tools\u201d / \u201cDeveloper Tools\u201d as described above and try to answer questions: - A) What kind of tiers might the web applications have? (Application-Interface, Application, Data) - B) Are the parts/files represented on the web app downloaded automatically or is the download triggered by an interaction? - C) Is the web site in Thin-Client Architecture or Fat-Client Architecture?</p>"},{"location":"exercise1/#221-seismic-monitor-iris","title":"2.2.1. Seismic Monitor - IRIS","text":"<p>https://ds.iris.edu/seismon/index.phtml</p> <ul> <li>1) Do the HTML, CSS and image files represent the application interface?</li> </ul> IRIS - Web Content Types <ul> <li>2)  After clicking on a point on the map, the World Seismic Map changed. Thus, the click event triggered the app to download another data from the server.</li> </ul> IRIS - Interaction with the Map <p>This website is a very old but working example of a web mapping application. It is a good example of a \"thin client\" architecture as data is always downloaded from the server by requests.</p>"},{"location":"exercise1/#222-geoportal-bayern","title":"2.2.2. Geoportal Bayern","text":"<p>https://geoportal.bayern.de/bayernatlas</p> <p>In the home page, select the base map to be loaded on the screen.</p> BayernAtlas - Basemap Selection <p>To load bike paths (Radwege), a cycling map, activate the Hiking and cycling trails layers (Home page:Themen&gt; Sport- und Freizeit &gt; Wander- und Radwege&gt; Radwege). Once activated, you will see a green network on the map.</p> BayernAtlas - Overlay <p>This individual biking trail net is retrieved from the server and is displayed as a transparent image. Let\u2019s assume you need this image for another purpose, while you don\u2019t see any button that allows you to directly download it. In this case, Web Developer Tool might be helpful. Open Web Developer Tool, refresh the page, you will see a list of requests with image data. In order not to spend time on previewing each image, you can filter requests by \u201cName\u201d. In our case, we search for \u201cradwege\u201d data, therefore we type \u201cradwege\u201d in Filter textbox.</p> Bayernatlas - Radwege (Biking Trails) <p>Double-click on the relevant row and you will see a png file on a separate web page and you can easily save this bike path image.</p> Bayernatlas - Radwege (Biking Trails) response"},{"location":"exercise1/#223-turf-js-advanced-geospatial-analysis-for-browsers","title":"2.2.3. TURF JS - Advanced geospatial analysis for browsers","text":"<p>https://turfjs.org/</p> <p>TurfJS is a JavaScript library that supports dealing with geospatial datasets in browsers and manipulating them using some spatial functions. It usually loads JS packages into the browser in compressed or linearized format like the other JS libraries.</p> <p>Tip: You can use prettier.io web application to see these files in a \u201cpretty printed\u201d format.</p> TurfJS - Packages <p>Clear the available requests in the network pane and try to select an operation on the main web page (For example select \u201cVoronoi\u201d).</p> TurfJS - Voronoi algorithm <p>Try to zoom in and zoom out on one of the map (input or output widget).</p> TurfJS - Zoom In / Out"},{"location":"exercise1/#3-creating-a-sequence-diagram-using-a-sample-request-response-example","title":"3. Creating a Sequence Diagram using a Sample Request \u2013 Response Example","text":"<p>In this step, you will observe an interaction that takes place in the BayernAtlas web app. This interaction is a simple routing / navigation application that provides a route for specified leisure activity. You will then create a sequence diagram taking into account this interaction and possible web services working in the background.</p> <p>Note: Do not consider timings (start time, duration etc.) of the requests.</p>"},{"location":"exercise1/#31-review-the-requests-and-responses-before-and-after-creating-a-route-for-mountain-bikes-in-the-bayernatlas-web-app","title":"3.1. Review the requests and responses before and after creating a route for mountain bikes in the BayernAtlas web app","text":"<p>Choose a routing mode. Such as \u201chiking\u201d (wandern)  as shown in the first icon. Select the start point and end point on the map, a route will be created and a profile showing the elevation along the route.</p> Bayernatlas - Routing (Interaction) Bayernatlas - Mountain Bike (Interaction) <p>The \u201croute\u201d and \u201cprofile\u201d are created using data from the server. We can also download them as JSON files from the Web Developer Tool.</p> Bayernatlas - Profile (Interaction) <p>Clear the network pane before routing interaction and then observe the requests and responses triggered by this interaction.</p> Bayernatlas - Clear Requests (Interaction) <p>Check the \u201cmethod\u201d of the \u201cprofile\u201d request and check both of the request and response tabs in the detailed information pane for this service. </p> Bayernatlas - Profile Response (Interaction) <p>Just as we did before, open Web Developer Tool, refresh webpage, and filter requests by \u201croute\u201d and \u201cprofile\u201d respectively.  By clicking the \u201croute\u201d cell, you can view formatted response JSON.  Look into them respectively, figure out what information is stored in them.</p> Bayernatlas - Route (JSON / Interaction) <p>If you are familiar with creating files with file extensions as well as changing file extensions in Windows system, you can skip the following file saving experiment. Let\u2019s assume we need these JSON data for another purposes. But unlike image files, which can be directly saved, this JSON data cannot be directly saved by right clicking on the panel. Therefore, we need to create a file with extension on local, copy the whole JSON data and paste it into the file you created. Make sure that the file you created has an extension \u201c.json\u201d, if you don\u2019t see file extensions, check \u201cFile name extensions\u201d in File Explore.</p> Windows - Enable File Extensions <p>In the end, you will get a \u201croute.json\u201d file and a \u201cprofile.json\u201d file.</p>"},{"location":"exercise1/#32-create-the-sequence-diagram-by-considering-the-previously-interactions","title":"3.2. Create the Sequence Diagram by considering the previously interactions","text":"<ul> <li> Reconsider the steps that you handled in the previous section and prepare a UML Sequence Diagram with PlantUML or Draw.io tools.</li> </ul>"},{"location":"exercise1/#33-request-the-uml-sequence-diagram-from-an-ai-chatbot","title":"3.3. Request the UML Sequence Diagram from an AI Chatbot","text":"<ul> <li> Describe the interaction with all of it's details to any AI Chatbot and request a PlantUML/Mermaid based UML Sequence Diagram.</li> </ul> TIP: For the Mermaid based texts, you can use the \"mermaid.live\" online tool for rendering the diagram. <ul> <li> Compare the AI generated Sequence Diagram with yours.</li> <li>What are the differences?</li> <li>Which one seems much more correct?</li> </ul>"},{"location":"exercise2/","title":"Introduction to Python with an Example App Based on Geospatial Data","text":"Murat Kendir, Prof. Thomas Kolbe || Chair of Geoinformatics, TUM || murat.kendir@tum.de  <ul> <li>In the previous exercise we explored the BayernAtlas website and experienced the data services and interactions behind the web interface by using Web Developer Tool.</li> <li>In this exercise, you will learn how to access similar data sources (web services) and manage the data using some simple Python codes.</li> <li>However, before starting this exercise you need to know more about the datasets and how to access it.</li> </ul>"},{"location":"exercise2/#step-1-visit-bayernatlas-website","title":"Step 1) Visit BayernAtlas website","text":"<ul> <li> Open the \"web developer tool\" by pressing Ctrl+Shift+C (or Ctrl+Shift+I) or by finding the tool in the browser menu.</li> <li> Select a background map at any specific location on the map.</li> <li> Check the URL of a raster image taken as a base map from the BayernAtlas website.</li> <li> Copy the URL and try requesting this image by pasting the URL into the address bar.</li> <li> or you can test the URL using the \"curl\" program at the command prompt (CMD / Eingabeaufforderung). </li> </ul>"},{"location":"exercise2/#step-2-make-a-request-with-python-and-requests-library","title":"Step 2) Make a request with Python and \"Requests\" library","text":"<ul> <li> Start a text editor (Notepad, Notepad++, SublimeText) or an IDE (Idle, Spyder, PyCharm)</li> <li> Write the following code in the editor and save it as a file with .PY extension.</li> <li>Tip: Enable file extensions in Windows Explorer to view all file extensions.<ul> <li>how to enable file extensions (in english)</li> <li>how to enable file extensions (in german)</li> </ul> </li> <li> Open command prompt (Eingabeaufforderung) and navigate to the same folder as your python file. Execute the file by typing <code>python MY_PYTHON_CODE.py</code> (or type in <code>python3 MY_PYTHON_CODE.py</code> in Linux systems)</li> <li> Try running python within interactive mode by typing <code>python --interactive MY_PYTHON_CODE.py</code>.</li> </ul> <pre><code># Import the native \"requests\" library to send a request to the web source.\nimport requests\n# Replace the URL in the follwoing code with your selected URL\nmydata = requests.get(\"https://intergeo33.bayernwolke.de/betty/c_hist/13/4197/4598\")\n#Check what the \"mydata\" object.\nprint(mydata)\n</code></pre> <pre><code>&lt;Response [200]&gt;\n</code></pre> Variable Name mydata Data Type requests.models.Response"},{"location":"exercise2/#2a-what-is-happened","title":"2a) What is happened?","text":"<ul> <li><code>import requests</code> imported the library named \"requests\". This library is a simple HTTP library supports all the methods available in the HTTP protocol such as GET, POST, DELETE etc.</li> <li><code>mydata =</code> defines a variable and assigns it to the following object.</li> <li><code>requests.get()</code> calls a method in the requests library.</li> </ul> <p>When a class (e.g. requests) contains functions (e.g. get) defined for the class itself, these functions are called \"methods\". </p> <ul> <li><code>print(mydata)</code> represents the content of the returned object.</li> </ul>"},{"location":"exercise2/#2b-how-to-work-with-libraries","title":"2b) How to work with libraries?","text":"<ul> <li> Find and explore the documentation pages available on the Internet. requests doc</li> <li>Tip: You can use package repositories to find links to documentation pages. Python Package Installer site</li> <li> Use the help() function to read the summarized documentation about the requests library. Type (<code>help(requests)</code>) and run the code.</li> </ul>"},{"location":"exercise2/#2c-how-to-expose-the-existing-methods-in-a-library","title":"2c) How to expose the existing methods in a library?","text":"<ul> <li> In Python, everything is considered an object and each object can be examined by predefined functions such as type, dir, help etc. These predefined functions are called  \"Built-ins\" and can be listed by typing <code>dir(__builtins__)</code></li> <li> Since the requests class is also considered an object you can follow the same procedure to expose existing methods for this class. Type <code>dir(requests)</code></li> <li> Note that standard HTTP methods (get, post, put, delete etc.) area available in the list.</li> </ul>"},{"location":"exercise2/#2d-what-we-got-by-the-request","title":"2d) What we got by the request?","text":"<ul> <li> If you need to learn more about the data you received with the request, use the following functions:</li> <li> <code>help(mydata)</code></li> <li> <code>type(mydata)</code></li> <li> <code>dir(mydata)</code></li> <li>Note that if you are using an IDE to code you may have some useful tools to represent the information of variables. Check Spyder or PyCharm or Visual Studio Code IDE's.</li> <li> You can also examine the hierarchical structure of the \"requests\" class imported with the library.</li> <li> Try to find requests.models.Response with \"dir\" function:<ul> <li> dir(requests)</li> <li> dir(requests.models)</li> <li> dir(requests.models.Response)</li> <li>Note that the class names must be spelled exactly the same, because the python interpreter (the interactive compiler running at the backgorund) is case-sensitive. (e.g. <code>dir(requests.models.response)</code> would not work.)</li> </ul> </li> <li> If you followed the commands you might notice that the variable \"mydata\" is an instance object of the class \"requests.models.Response\". You can check it with the function <code>isinstance(my_object, (class_name))</code>.</li> </ul> <pre><code>print( isinstance(mydata, (requests.models.Response)))\n</code></pre> <pre><code>True\n</code></pre>"},{"location":"exercise2/#step-3-how-to-view-the-content-of-the-response","title":"Step 3) How to view the content of the response?","text":"<ul> <li> If you type <code>dir(mydata)</code> again, you can see all available methods to reveal the content of the object. <ul> <li> Try to reveal the content by typing <code>print( mydata.content )</code></li> <li> or by typing <code>print( mydata.text )</code></li> <li>Note that because the file is an image file in binary format, the content is displayed as strings that are not human readable.</li> </ul> </li> <li>TIP: You can follow different tactics to view an image file in python. A standard library (native library) called \"webbrowser\" can call a minimal browser and display the image inside the browser. Another method would be import the \"Image\" class from the \"PIL\" library. To import this class, you can add <code>from PIL import Image</code> at the beginning of your code block. Since \"PIL\" is not a native python library, you may need to install it on your environment using (<code>pip install Pillow</code>)</li> <li> For now we will just save the image file in the same folder using the following code:</li> </ul> <pre><code>with open(\"responses/exr2/my_requested_image.jpg\", \"wb\") as my_image_file:\nmy_image_file.write(mydata.content)\n</code></pre> <pre><code>File might be saved, check the folder: responses/exr2\n</code></pre> <ul> <li> \"open\" is another built-in function in pyhton. It needs the filename as the first parameter and the file mode as the second parameter. If you want to learn more about the \"file mode\", visit this page: Real Python or type <code>help(open)</code> in the python interpreter.</li> <li> We need to set the default export directory as relative path. To make these relative paths compatible with different operating systems (OS), the directory separator must be detected and replaced regarding to the current OS. A native python library \"os\" has such classes (os.path.sep and os.path.join) that makes it easy to implement.</li> </ul> <p>TIP: The reason for using \"open\" function via \"with\" is that the file should be closed after the manipulation. In the past, developers were often used the \"close\" function after every file manipulation. There is no need to use this file condition test when using \"with\" phrase.</p> <pre><code>import requests\n# Detect the current OS and change the relative paths regarding to it.\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n#print(export_folder)\n# Replace the URL in the follwing code with your selected URL\nmydata = requests.get(\"https://intergeo33.bayernwolke.de/betty/c_hist/13/4197/4598\")\nwith open(export_folder + \"my_requested_image.jpg\", \"wb\") as my_image_file:\nmy_image_file.write(mydata.content)\nprint(\"File might be saved, check the folder: responses/exr2\")\n</code></pre> <pre><code>File might be saved, check the folder: responses/exr2\n</code></pre> Variable Name mydata mydata.content Variable Type requests.models.Response bytes (binary) <p>TIP: You may notice that the last line (<code>my_image_file.write(mydata.content)</code>) does not contain any parentheses or curly braces to highlight the inner code block. This is because parentheses and curly brackets are not used in the python programming language to do that. You need to use indentation to create a hierarchical programming style (e.g. conditional statements, functions, loops, etc.). Indentation usually consists of 4 space characters, but it can also be customized (e.g. You can use 3 spaces or TAB chacracter). Also note that a column (:) character is needed at the end of the last line before the indented lines.</p> <p>An example comparison between C and Python programming languages shows how indentation interpreted in python: </p>"},{"location":"exercise2/#3b-optional-open-images-with-pillow","title":"3b (optional) Open Images with Pillow","text":"<ul> <li> You can show up the saved image using \"PIL\" (Pillow) library by running following code.</li> <li>TIP : If you are calling the \"PIL\" library for the first time in your local environment, you may need to install it with <code>pip install pillow</code> command.</li> </ul> <pre><code>from PIL import Image\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\nrequested_image = Image.open(export_folder + \"my_requested_image.jpg\")\ndisplay(requested_image)\n</code></pre>"},{"location":"exercise2/#3c-optional-open-images-with-web-browser","title":"3c (optional) Open Images with Web Browser","text":"<ul> <li> If you are running this notebook in your local environment, you can open the image on your default web browser by using the native python library \"webbrowser\". Try to execute following code.</li> </ul> <pre><code>import webbrowser\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\nwebbrowser.open_new_tab(export_folder + \"my_requested_image.jpg\")\n</code></pre> <pre><code>True\n</code></pre>"},{"location":"exercise2/#step-4-what-about-json-xml-html-based-files","title":"Step 4) What about JSON / XML / HTML based files?","text":"<ul> <li> Let's find another web service that offers JSON or GML based data files and follow similar instructions to save this data on our local machine or python environment. Visit following web page:<ul> <li>Basic geospatial data of the official surveying system in North Rhine-Westphalia (Geobasisdaten des amtlichen Vermessungswesens in Nordrhein-Westfalen )</li> </ul> </li> <li> Select one of the \"collection\"s (Landparcel/Flurst\u00fcck, Building/Gebaeude or Administrative Unit/Verwaltungseinheit). </li> <li> Select one of the features in the list and click on the JSON link at top right side of the page. If the data looks like too complex, try finding and installing a JSON viewer/parser add-on/extension for your browser.<ul> <li>TIP: It is recommended to search for \"JSON Lite\" in Firefox, \"JSON-Handle\" or \"JSON Viewer Pro\" in Chrome browser.</li> </ul> </li> <li> Check also the GML file on the same page (Top-right). You can also find some useful add-ons/extensions to visualize XML based files in a \"more human-readable way\", often called  \"pretty-print\" style.<ul> <li>TIP: It is recommended to search for \"Pretty XML\" in Firefox, \"XML Plus\" in Chrome browser.</li> <li>TIP: If the browser cannot open the GML/XML file in a new tab, then you can save the file on your local machine and open it by using web browser ( Right Click --&gt; Open with ).</li> </ul> </li> </ul> <p>Here you will see different visualizations of JSON or XML files within these extensions:</p> <p></p>"},{"location":"exercise2/#step-5-how-to-request-json-xml-html-based-files-from-the-web-services","title":"Step 5) How to request JSON / XML / HTML based files from the web services?","text":"<ul> <li> Remove the last two lines from your code block or convert them into comment by adding hashtag (#) to the beginning of lines. (Keyboard Shortcut: Ctrl + / )</li> <li> Copy and paste the requested URL in previous step (4) into your code block.</li> <li> Add the lines <code>myjson = mydata.json()</code> and <code>print(myjson)</code> just after the requested URL.</li> </ul> <pre><code>import requests\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmyjson = mydata.json()\n#print(myjson)\n</code></pre> Variable Name mydata mydata.json() Variable Type requests.models.Response dict(Python Dictionary)"},{"location":"exercise2/#5a-inspect-the-response","title":"5a) Inspect the response","text":"<p>Here you have As you may notice, it was not actually converted into a JSON object, but is now a \"JSON serializable Python object\". In general terms it has been converted into a \"python dictionary\" object. JSON stands for Java Script Object Notation and is designed to provide a more developer-friendly alternative to XML. If you would select a most python-native encoding format, that would be none of these, but YAML. However, YAML format is out of our focus for this exercise. That is, it is a natural data exchange format designed for JavaScript, but not for Python. Python uses predefined data types such as tuples, lists and the most JSON-like format \"dictionary\" to handle the same data internally. The given code part has converted the response object to a JSON by using a method of requests.get, but ...</p> <ul> <li> Is it really JSON?<ul> <li>Type <code>type(myjson)</code></li> </ul> </li> <li> What are available methods or attributes for this instance object?<ul> <li>Type <code>dir(myjson)</code></li> </ul> </li> <li> How can we use these available methods with this instance?<ul> <li>Type <code>help(myjson)</code></li> <li>or get the help document for a specific method (e.g. <code>help(myjson.items)</code>)</li> </ul> </li> </ul> <p>TIP: If you would select a most python-native encoding format, that would be none of these, but YAML. Since, the YAML format is out of our focus for this exercise, we didn't mention about that yet.</p> <ul> <li> If you try to save the python dictionary object to a file, you will notice an error. <code>with open(\"responses/exr2/my_request.json\", \"w\") as my_json_request:</code></li> </ul> <p><code>my_json_request.write(myjson)</code></p> <ul> <li> However, you can change the \"json()\" method with \"text\" method and save the file as received like in the example below.<ul> <li> Alternatively, you can cast (convert the data type) the dictionary type to a string using the built-in function str().</li> </ul> </li> </ul> <pre><code>import requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\n# Alternative method:\n# text_file = str(mydata)\ntext_file = mydata.text\nwith open(export_folder + \"my_request.json\", \"w\") as my_req:\nmy_req.write(text_file)\n#print(text_file)\n</code></pre> Variable Name mydata mydata.text Variable Type requests.models.Response str (String)"},{"location":"exercise2/#5b-convert-dictionary-to-text-using-json-library-dumps-method","title":"5b) Convert Dictionary to Text using JSON library (dumps method)","text":"<p>When this method is applied, \u2018text_file\u2019 is assumed to be just a dumped json file and is saved with the file extension \u2018.json\u2019. So it is currently no different from a normal text file. By importing the \u2018json\u2019 library, we will get more functionality within our data, such as filtering, sorting, re-indenting, etc.</p> <ul> <li> <p> To do this, you need to import the native library called \"json\". Add the line at the beginning of code block: <code>import json</code></p> </li> <li> <p> Then use <code>json.dumps</code> to convert the dictionary to a string. </p> </li> </ul> <pre><code>import json\nimport requests\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmyjson = mydata.json()\njson_file = json.dumps(myjson)\ntype(json_file)\n</code></pre> <pre><code>str\n</code></pre> Variable Name mydata mydata.json() json_file Variable Type requests.models.Response dict str"},{"location":"exercise2/#5c-convert-text-to-dictionary-using-json-library-loads-method","title":"5c) Convert Text to Dictionary using JSON library (loads method)","text":"<p>What if you had a text file instead of a python dictionary? Can you convert a text file to a JSON file? - [ ] If the response text is in regular JSON format, you can convert it to a dictionary using the loads method of the json library (see below). - If not, the json parser will throw an error and you may need to use additional string functions such as rstrip, lstrip, replace to fix the problem in the text. You can also browse this web page for python string methods.</p> <pre><code>import json\nimport requests\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmyjson = mydata.text\nmy_object = json.loads(myjson)\ntype(my_object)\n#print(my_object.get('links'))\n</code></pre> <pre><code>dict\n</code></pre> Variable Name mydata myjson my_object Variable Type requests.models.Response str dict"},{"location":"exercise2/#5d-save-the-json-file","title":"5d) Save the JSON file","text":"<ul> <li> Now, you can copy the JSON file to our local machine by using \"with\" statement.</li> </ul> <pre><code>import json\nimport requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmyjson = mydata.json()\njson_file = json.dumps(myjson)\nwith open(export_folder + \"my_request.json\", \"w\") as my_json_req:\nmy_json_req.write(json_file)\n#print(json_file)\n</code></pre>"},{"location":"exercise2/#5e-use-one-of-the-parameters-of-dumps-method-eg-indentation","title":"5e) Use one of the parameters of dumps method (e.g. Indentation)","text":"<ul> <li> Try using some of the available parameters of \"json.dumps\" method. (for exp. \"indent\")<ul> <li>To see all available parameters for the dumps method, type <code>help(json.dumps)</code>.</li> </ul> </li> </ul> <pre><code>import json\nimport requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmyjson = mydata.json()\njson_file = json.dumps(myjson, indent=4)\nwith open(export_folder + \"my_request.json\", \"w\") as my_json_req:\nmy_json_req.write(json_file)\n#print(json_file)\n</code></pre>"},{"location":"exercise2/#5f-get-a-subset-of-the-dictionary-using-json-library-__getitem__","title":"5f) Get a subset of the dictionary using JSON library (__getitem__ / [ ] )","text":"<ul> <li> Python dictionaries can be filtered by defining keys. ('geometry' in the sample below)<ul> <li>Note that <code>myjson['geometry']</code> and <code>myjson.__getitem__('geometry')</code> will produce the same results.</li> <li>The reason is square brakets [] are the shortcuts to the __getitem__ method and such shortcut mechanisms are called \"magic methods\" in Python. See this web page see more examples for the magic methods.</li> <li>You can type <code>help(myjson.__getitem__)</code> to expose the usage of the magic method.</li> </ul> </li> </ul> <pre><code>import json\nimport requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmyjson = mydata.json()\n# Alternative method: \n# my_geometry = myjson.__getitem__('geometry')\nmy_geometry = myjson['geometry']\njson_file = json.dumps(my_geometry, indent=4)\nwith open(export_folder + \"my_request.json\", \"w\") as my_json_req:\nmy_json_req.write(json_file)\n#print(json_file)\n</code></pre>"},{"location":"exercise2/#5g-saving-the-response-as-it-is-in-binary-format","title":"5g) Saving the response as it is in binary format","text":"<ul> <li> Another possibility to save the desired JSON file is to export it by reading the data in binary format using the \"w\" to \"b\" parameter in the open function. Note that you don't need to import the \"json\" library as there is nothing to do with the object.</li> </ul> <pre><code>import requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmy_content = mydata.content\nwith open(export_folder + \"my_request.json\", \"wb\") as my_json_req:\nmy_json_req.write(my_content)\ntype(my_content)\n#print(my_content.hex())\n</code></pre> <pre><code>bytes\n</code></pre> Variable Name mydata mydata.content Variable Type requests.models.Response bytes"},{"location":"exercise2/#step-6-read-a-json-file-and-display-in-python-interpreter","title":"Step 6) Read a JSON file and display in python interpreter","text":"<ul> <li> You can read and modify saved files by using the \"load\" or \"loads\" method of the \"json\" library. To do this, you need to use \"open\" function with the \"r\" mode, which stands for \"read\".</li> </ul> <pre><code>import json\nimport requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\nwith open(export_folder + \"my_request.json\", \"r\") as my_json_req:\njson_file = my_json_req.read()\nmy_object = json.loads(json_file)\nmy_subset = my_object['geometry']\n#print(my_subset)\n</code></pre> Variable Name mydata my_object my_subset Variable Type requests.models.Response dict dict <ul> <li>TIP: If you are confused with the dump and load methods, take a look at the image below which explains how to convert json data into python dictionaries or vice a versa. </li> </ul>"},{"location":"exercise2/#step-7-convert-the-json-request-into-a-program-that-saves-only-properties-to-a-file","title":"Step 7) Convert the JSON request into a program that saves only properties to a file","text":"<p>Suppose we want to save only the attributes of a desired JSON to a text file without all other attributes.</p> <p>We can do this easily with loop conditions.</p> <ul> <li> Dictionaries, lists, tuples and sets are iterable data types in Python. So we don't need to do more, because the \"myjson\" variable is already a python dictionary. Let's change the filtering key with \"properties\".</li> </ul> <pre><code>import json\nimport requests\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmyjson = mydata.json()\nmysubset = myjson['properties']\ntype(mysubset)\n</code></pre> <pre><code>dict\n</code></pre> <ul> <li> Since our data is still in the form of a dictionary, we can easily iterate the \"key-value\" pairs in a \"for\" condition like the one below:</li> </ul> <pre><code>import json\nimport requests\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmyjson = mydata.json()\nmysubset = myjson['properties']\nfor prop in mysubset:\nprint(prop)\n</code></pre> <pre><code>aktualit\ngebnutzbez\nfunktion\n</code></pre> <ul> <li> Now you can use the \"for\" condition inside the \"open\" function to save the properties as a list with automatically generated line numbers.</li> <li>TIP: <code>i=0</code> and <code>i=i+1</code> automatically produces an integer and is casted as string to combine (concatenate) with other strings. Type casting is possible in python with built-in functions such as str(), int(), float(), bool(). </li> </ul> <pre><code>import json\nimport requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\n# Replace the URL with your own URL\nmydata = requests.get(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nmyjson = mydata.json()\nmysubset = myjson['properties']\nwith open(export_folder + \"my_request.txt\", \"w\") as my_req:\ni=0\nfor prop in mysubset:\ni=i+1\nmyformat = str(i) + ' : ' + prop + '\\n' \nmy_req.write(myformat)            \n</code></pre>"},{"location":"exercise2/#step-8-convert-your-code-block-into-a-function-and-let-users-define-their-own-url-requests","title":"Step 8) Convert your code block into a function and let users define their own URL requests","text":"<ul> <li> <p> You have already entered the URL you want in the code by manually changing the URL part. Now let's make the program more interactive to allow users to define their own URL on each different request. You need to define a function that listens for a user parameter and uses the same parameter in the computations. To do this, you need to use \"def\" which stands for \"definition\". Move the lines used to transform the data into the function definition using indentation.</p> </li> <li> <p>TIP: In Python programming, you can define multiple variables with the same name. Any variable defined inside a function will only be within the scope of that function. That is, if you declare a variable inside a function, it can only be accessed inside the function. This behavior is called \"local scope\" (see the \"mysubset\" variable in the code block below).</p> </li> <li>TIP: Defining a function is not enough to run it. If they are defined, you must call the function with mandatory parameters (\"custom_url\" in the example below.)</li> </ul> <pre><code>import json\nimport requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\ndef get_building_properties(custom_url):\nmydata = requests.get(custom_url)\nmyjson = mydata.json()\nmysubset = myjson['properties']\nreturn mysubset\nmysubset = get_building_properties(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nwith open(export_folder + \"my_request.txt\", \"w\") as my_req:\ni=0\nfor prop in mysubset:\ni=i+1\nmyformat = str(i) + ' : ' + prop + '\\n' \nmy_req.write(myformat)\n#print (mysubset)\n</code></pre> Variable Name mydata myjson mysubset (local) mysubset (global) my_req Variable Type requests.models.Response dict dict dict _io.TextIOWrapper"},{"location":"exercise2/#8a-seperate-the-listing-mechanism-as-a-function","title":"8a) Seperate the listing mechanism as a function","text":"<ul> <li> We can also turn the code block that saves the file into a function, so that users can more easily determine the file name.<ul> <li>Note that the first parameter (my_object) of the save_property_as_list function is required.</li> <li>Second parameter (my_file_name) is optional, which means that the function will use the default value if it is not defined.</li> </ul> </li> </ul> <pre><code>import json\nimport requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\ndef get_building_properties(custom_url):\nmydata = requests.get(custom_url)\nmyjson = mydata.json()\nmysubset = myjson['properties']\nreturn mysubset\ndef save_property_as_list(my_object, file_name='request.txt'):\nmy_file_name = export_folder + file_name\nwith open(my_file_name, \"w\") as my_req:\ni=0\nfor prop in my_object:\ni=i+1\nmyformat = str(i) + ' : ' + prop + '\\n' \nmy_req.write(myformat)\nbuilding_properties = get_building_properties(\"https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\")\nsave_property_as_list(building_properties, \"my_request.txt\")\n</code></pre>"},{"location":"exercise2/#8b-let-the-users-interact-with-your-program-input-function","title":"8b) Let the users interact with your program (input function)","text":"<ul> <li> You can apply the \"input\" function to turn the code into an interactive program.</li> </ul> <pre><code>import json\nimport requests\nimport os\nexport_folder = os.path.join('responses','exr2') + os.path.sep\ndef get_building_properties(custom_url):\nmydata = requests.get(custom_url)\nmyjson = mydata.json()\nmysubset = myjson['properties']\nreturn mysubset\ndef save_property_as_list(my_object, file_name='request.txt'):\n# We implement an if-elif-else condition to consider empty input.\nif file_name == '':\nmy_file_name = export_folder + 'request.txt'\nelif file_name == '-' or file_name == ' ':\nmy_file_name = export_folder + 'request.txt'\nelse:\nmy_file_name = export_folder + file_name\nwith open(my_file_name, \"w\") as my_req:\ni=0\nfor prop in my_object:\ni=i+1\nmyformat = str(i) + ' : ' + prop + '\\n' \nmy_req.write(myformat)\nprint(\"List saved as a file :\", my_file_name)\n# print(my_object)\nrequested_url = input(\"Enter the requested URL serves JSON : \")\nbuilding_properties = get_building_properties(requested_url)\ncustom_file_name = str(input(\"Specify a file name with extension : \"))\nsave_property_as_list(building_properties, custom_file_name)\n# Sample Inputs:\n# https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\n# my_request2.txt\n</code></pre> <pre><code>Enter the requested URL serves JSON :  https://www.ldproxy.nrw.de/kataster/collections/gebaeudebauwerk/items/DENW42AL1000NmHjBL?f=json\nSpecify a file name with extension :\n\n\nList saved as a file : responses/exr2/request.txt\n</code></pre>"},{"location":"exercise3/","title":"Spatial Data Infrastructures (SDI)","text":"Munich Technical University || Chair of Geoinformatics  Murat Kendir, Prof. Thomas Kolbe || murat.kendir@tum.de  <ul> <li>In the previous exercise we explored the python programming language and tried to create a simple application to request geospatial data using the requests library.</li> <li>In this tutorial, you will learn how to search for a geospatial dataset using different levels (regional, city scale, etc.) of \u201cSpatial Data Infrastructures\u201d (SDIs). </li> <li>You will explore multiple SDI websites that provide some geospatial datasets in different formats or as different types of web services.</li> <li>You will then learn how to combine and represent these datasets in popular GIS platforms such as QGIS and ArcGIS Pro.</li> <li>Finally, you will create a small python application that connects and utilizes the selected geospatial data for a specific purpose.</li> </ul>"},{"location":"exercise3/#0-reminders","title":"0) Reminders","text":""},{"location":"exercise3/#what-we-have-learned-in-the-previous-exercise","title":"What we have learned in the previous exercise?","text":"<ul> <li>A python program can be executed simply by calling it with the python interpreter by simply typing <code>python my_first_python_program.py</code>. </li> <li>Python uses indentation to highlight the blocks of code.</li> <li>Python applications can be run in virtual environments with all necessary libraries pre-installed.</li> <li>Python have many libraries to support main applications with predefined classes, functions and data types (e.g. os, json, requests etc) and they can be implemented with import command.</li> <li><code>if / elif / else</code> is a conditonal statement.</li> <li><code>for x in array</code> creates a sequence to iterate in an array-like (iterative) object.</li> <li>There are useful built-in functions (which you can list all with <code>dir(__builtins__)</code>) to investigate an object in python such as type, dir, help, print, vars.</li> <li>A function can be set with the def (stands for DEFinition) command and mandatory and optional parameters can be specified in parentheses. For example: <code>def save_somebody(name, surname, species=\"Homo Sapiens\"):</code></li> <li>A file can be manipulated by specifiying file path and file permission. For example: <code>with open(\"current_folder/relative_file_path.txt\", \"w\") as myfile:</code></li> <li>A python dictionary is a bit different from a JSON object and they can be converted to eachother with json.load(s) and json.dump(s) functions of json library.</li> <li>A questionnaire can be set with <code>input(\"Enter a custom name\")</code> function.</li> </ul>"},{"location":"exercise3/#1-finding-the-datasets","title":"1) Finding the datasets","text":"<p>Global Sea Level is rising at an increasing rate every year, causing floods to occur more frequently all over the world. This forces local (or regional) governments to take measures against future floods. Suppose you are responsible for preparing a disaster management application in Hamburg. This application will calculate the flood risk for a specific building and generate a report with information on the extent of the risk and the relevant land parcel number. For this purpose, you need to find the most suitable geographic data services using the INSPIRE Geoportal, geoportal.de and Hamburg TransparenzPortal. Imagine that these datasets should contain the following data layers: </p> <ul> <li>Buildings footprints (DE: Gebeaude Grundst\u00fccke) | (will be searched for in the Section 3a)</li> <li>Land Parcels (DE: Flurst\u00fcck)</li> <li>Digital Elevation Model / DEM (DE: H\u00f6henmodell / DHM)</li> <li>Flood Risk Zones (DE: Hochwasserrisikos)</li> </ul> During the catastrophic flood of 1962, boats were used to rescue Hamburg residents from flooded buildings.              Source"},{"location":"exercise3/#2-a-a-short-preparation-creating-a-service-selection-tool","title":"2 a) A short preparation - Creating a \"Service Selection Tool\"","text":"<p>Before you start examining the given Spatial Data Infrastructures (SDIs), you will set up a function in python that makes it easy to store the names, links and additional information of the services.</p> <pre><code># In Python, there is no need to specify the variable data type.\n# However, you can still use type conversion methods or shortcuts to specify the data type.\n# For Exp. '{}' is a shortcut to create a python dictionary.\n#Create an empty dictionary.\nmy_services = {} \n# !Remember the role of indentation in python.\ndef add_to_store(service_id, name, url, wms_url):\n# Here, you set a complex data in python dictionary data type.\nmy_services[service_id] = { \"name\" : name\n, \"url\" : url\n, \"WMS_URL\" : wms_url}\nprint(my_services)\n#Extras for checking the dictionary data type and result of the function:\n# type(my_services)\n# help(my_services)\n# add_to_store(\"service_1\", \"my_fav\", \"https://sdi.com\", \"https://wms.sdi.com/my_city?\")\n# print(my_services.get(\"service_1\"))\n# my_services.clear()\n# print(my_services.get(\"service_1\"))\n</code></pre>  TIP : You may have noticed that the square brackets [ ] we use to set a new item in the dictionary are also a shortcut. You can also find this information in related hidden functions like __getitem__() or __setitem__(). Type dir(my_services) or dir(dict()) to reveal them. <p>Now, suppose that you want to use the function in an interactive way to let other users also add the found services into the dictionary. To do that, we can implement another function which runs an input command for every instance in the dictionary:</p> <pre><code># You can now define another function to interactively ask and store the knowledge data in your dictionary.\nkeys = [\"name\", \"Url of SDI\", \"URL of WMS Service\"]\n# If the code runs for the first time, then the dictionary needs to be initialized.\nif 'my_services' in locals(): # Checks if a variable is available in the local scope.\npass\nelse:\nmy_services = {}\n# Following line adds only the keys defined above. \n# These kind of inline functions called as comprehensions in Python.\nmy_services[\"0\"] = {key: None for key in keys}\n# print(my_services) \ndef add_to_store(service_id, name, sdi_url, wms_url):\n# Here, you set a complex data in python dictionary data type.\nmy_services[service_id] = { keys[0] : name, keys[1] : sdi_url , keys[2] : wms_url}\nprint(my_services)\ndef found_service():\nservice_id = input(\"Give an ID (number or unique value)...\")\nservice_data = [] # Created a list to save the values temporarily\nfor i in range(3): # Meet another object here: range\nquestionnaire = \"Please specify the \" + keys[i]\nservice_data.append(input(questionnaire))\ni+=1\n#Note that a list index is very similar to range, but always starts from 0.\nadd_to_store(service_id, service_data[0], service_data[1], service_data[2])\nfound_service()\n# my_services.clear()\n</code></pre> <pre><code>Give an ID (number or unique value)... 2\nPlease specify the name asd\nPlease specify the Url of SDI 234\nPlease specify the URL of WMS Service asd\n\n\n{'0': {'name': None, 'Url of SDI': None, 'URL of WMS Service': None}, 'asd': {'name': 'sad', 'Url of SDI': 'sad', 'URL of WMS Service': 'sad'}, '1': {'name': 'asd', 'Url of SDI': 'asd', 'URL of WMS Service': 'asd'}, '2': {'name': 'asd', 'Url of SDI': '234', 'URL of WMS Service': 'asd'}}\n</code></pre> <ul> <li> Save the code above as \"service_selection.py\" into \"/raw_codes/exr3\" directory.</li> </ul>"},{"location":"exercise3/#2-b-use-the-created-program-in-another-python-program","title":"2 b) Use the created program in another python program","text":"<ul> <li> Check if the file exists in the \"/raw_codes/exr3\" folder.</li> <li> Start a new code and import the functions and variables defined in the previously created python file.</li> </ul> <pre><code># When you save a python file contains classes, functions and variables into another folder\n# , this folder with its contents can be called as a \"python module\".\n# Note that importing a module is enough to access to the functions and variables.\n# The contents of the modules are only accessible with dot (.) operator.\n# Method 1\nfrom raw_codes.exr3 import service_selection as srv\n#print(srv.keys)\n# Method 2\n# from raw_codes.exr3.service_selection import keys, my_services, add_to_store, found_service\n# print(keys)\n# Now you can call your program to save the data about the found geospatial services:\n# srv.found_service() \n# srv.my_services.clear()\n</code></pre>  TIP : You may notice that importing a library into existing python code is very similar to importing an additional python program. This is so because the import command looks for multiple sources in a order. First it tries to find a python file, then it looks for the corresponding python file in the directories defined as the PYTHONPATH environment variable. To see the defined paths in your system import the library sys and print out sys.path object."},{"location":"exercise3/#3-a-building-footprints-grundstuck","title":"3 a) Building Footprints (Grundst\u00fcck)","text":"<p>Visit the web site Hamburg TransparenzPortal and search for the building footprints available for Hamburg city. Try to search with following possible words / tags: - Administrative Unit (Verwaltungseinheiten)  - House Coordinates (Hauskoordinaten)  - ALKIS  - Land Parcel (Flurst\u00fcck)  - Building (Gebaeude)</p> <p>Explore possible answers to the following questions: - [ ] Which one is the correct data for your purpose? - [ ] What kind of data it is? Is it a web service or static file? - [ ] How current is the data you find? - [ ] Where is the metadata of the service or file?</p> <p>Finally:  - [ ] If you think you have found a web service that suits your purpose, run the \u201cfound_service()\u201d function in the code (created in section 2b) and save the relevant information.</p>"},{"location":"exercise3/#3-b-land-parcels-flurstucke","title":"3 b) Land Parcels (Flurst\u00fccke)","text":"<p>Visit the web site geoportal.de and search for the land parcels available for Hamburg city. </p> <p>TIP: If you can not find the land parcels for the Hamburg city try adding \"HH\" to your keywords. \"HH\" is the city code for Hamburg used on license plates and it is possible to find relevant datasets using these codes. More information can be found on this site.</p> <p>Find the metadata of the dataset and explore possible answers to the following questions: - [ ] What is the base coordinate system for land parcels according to the metadata? - [ ] Who or which organization is responsible for the dataset?</p> <p>Find the XML responses of WMS or WFS services to the \"GetCapabilities\" operation and explore possible answers to the following questions: - [ ] Is the service response from the same domain? (Check the URL) - [ ] Are multiple coordinate systems supported for publishing? - [ ] How many layers does a selected web service consists of? - [ ] Can the layers be used for querying? - [ ] What other possible operations can be requested besides \"GetCapabilities\"?</p> <p>Finally:  - [ ] If you think you have found a web service that suits your purpose, run the \u201cfound_service()\u201d function.</p>"},{"location":"exercise3/#3-c-digital-elevation-model-dem-hohenmodell","title":"3 c) Digital Elevation Model / DEM (H\u00f6henmodell)","text":"<p>Visit the web site INSPIRE Geoportal and search for the Digital Elevation Model available for the Hamburg city. - Click to \"Browse INSPIRE Thematic Datasets\". - Click to \"INSPIRE Data Themes\" - Find the relevant theme on this page and select the country on the following web page.</p> <p>Explore possible answers to the following questions: - [ ] Where is the service URL? (Please find the \u201cCopy\u201d icon under the \u201cPreview Dataset\u201d button.) - [ ] What kind of services are available in the theme?  - [ ] Can TANDEM-X datasets be useful for our project? If not, why? - [ ] Is the selected dataset also available on geoportal.de ? - [ ] Is the selected dataset also available on Hamburg Transparenzportal? - [ ] Are all domain names in the service URLs the same?</p> <p>Finally:  - [ ] If you think you have found a web service that suits your purpose, run the \u201cfound_service()\u201d function.</p>"},{"location":"exercise3/#3-d-flood-risk-zones","title":"3 d) Flood Risk Zones","text":"<p>Visit the web site INSPIRE Geoportal again and search for the flood risk zones available for the Hamburg city.</p> <ul> <li>Click to \"Browse Priority Data Sets\".</li> <li>Click to \"Environmental Domains\".</li> <li>Click to \"Water\".</li> <li>Select the country and search with following possible words / tags:</li> <li>Wasserrahmenrichtlinie (Water Framework Directive)</li> <li>Gew\u00e4sser (Water Bodies)</li> <li>Hochwasserrisikos (Flood Risks)</li> <li>Flie\u00dfgew\u00e4ssern (Watercourses)</li> </ul> TIP: Please find the \u201cCopy\u201d icon under the \u201cPreview Dataset\u201d button to find the service URLs. <p>Finally:  - [ ] If you think you have found a web service that suits your purpose, run the \u201cfound_service()\u201d function.</p>"},{"location":"exercise3/#4-adding-services-to-gis-software","title":"4) Adding Services to GIS Software","text":"<p>In this chapter, you will learn how to add web services or datasets to a GIS software. You probably don't know what \"web service\" actually means or how to use it correctly, but you don't need to have a deep understanding of web services right now. You may need to recognize the type of web service, but nothing more.</p>"},{"location":"exercise3/#4-a-adding-services-to-qgis","title":"4 a) Adding Services to QGIS","text":""},{"location":"exercise3/#4a-i-add-xyz-basemap","title":"4a i) Add XYZ Basemap","text":"<ul> <li>Start by adding a basemap with global coverage and simple styling. \"Carto Positron\" would be a good option for this purpose. (If you want to try other XYZ basemap services, visit Klas Karlsson's github repository or search online.</li> <li> Find XYZ Tiles in browser panel on the left side and right click to add a new connection.</li> <li> Copy and paste https://cartodb-basemaps-a.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png link to the URL textbox and give any name as you want. Click Ok button.</li> <li> Find the city center of Hamburg on the map and zoom in until the canvas covers only some buildings. Alternatively, at the bottom of the QGIS window you can set the scale to 1:2000 or larger. <p>TIP: Sometimes you need to zoom in on your area of interest to avoid long loading times or just to make sure that the layer is visible in the area.</p> </li> </ul> <ul> <li>Check the coordinate system of the active map canvas (map widget in the software). If it is defined as OGC:CRS84, change it to EPSG:4326 Coordinate Reference System (CRS). You will notice some distortion on the map canvas, this is normal because EPSG:4326 (aka WGS84) is a geographic coordinate system, not a projected coordinate system. You may need to use this coordinate system from time to time because it is one of the most widely supported CRS by web services.</li> <li>Check the type of web services you noted in section 1) and add them considering the type of web services. <p>TIP: There are multiple ways to check the type of web services. One could be to check the categories or filters available on the SDI website. The other method could be to check the metadata to find the type. Finally, if you segment the request URL, you might see a query parameter like \"service=WMS\" or \"service=WFS\".</p> </li> </ul>"},{"location":"exercise3/#4a-ii-add-wms-service","title":"4a ii) Add WMS Service","text":"<ul> <li> Go to Layer &gt; Add Layer &gt; Add WMS/WMTS Layer in the menu bar.</li> <li> To create a new connection, click the New button and copy &amp; paste the URL you noted in part 1). Click OK and then click the Connect button.</li> <li> Click to any available layer in the service, check the coordinate system and click to Add Button.</li> </ul>"},{"location":"exercise3/#4a-iii-add-wfs-service","title":"4a iii) Add WFS Service","text":"<p>IMPORTANT NOTE Some servers provide Complex Data Features with WFS services, which makes it difficult to add these services to GIS software. So, if you notice such a WFS with complex data, avoid adding this service.</p> <ul> <li> Go to Layer &gt; Add Layer &gt; Add WFS / OGC API - Features Layer in the menu bar. To create a new connection, click the New button and copy and paste the URL you noted in part 1). Specify the \"Max. number of features\" as 200 or less. Click OK and then click the Connect button.</li> <li> Click to any available layer in the service, check the coordinate system and click to Add Button.</li> <li> Select only a few features from the screen or press Ctrl + F6 buttons. Take a glance on existing attributes and values for the features.</li> </ul> <p>Tip: Sometimes features can be presented as overlapping polygons in the same data service. If you are in doubt about overlapping polygons, simply change the symbology of the layer in the properties window to transparent fill to reveal the overlapping polygons.</p>"},{"location":"exercise3/#4-b-adding-services-to-arcgis-pro","title":"4 b) Adding Services to ArcGIS Pro","text":"<ul> <li>ArcGIS Pro collects all the data services in the \u201cServers\u201d section.</li> <li> Navigate to Connections &gt; Server &gt; New WMS Server from the Insert tab.      </li> <li> Copy &amp; Paste WMS address into \u201cServer URL\u201d text box. Specify user authentication if it is needed.</li> </ul> <ul> <li> If the server has been successfully added, it can be added into map canvas from Add Data menu. Right Click on \u201cMap\u201d in the left Contents pane and select Add Data.</li> <li> Go to Servers and find the WMS Server connection set up in the previous step.</li> <li> Select the WMS Server and click to Ok.</li> <li> Select the layers of interest from the WMS layers tree.</li> <li> If the WMS server connection is \"queryable\", you can query features in the WMS layers by clicking directly on them. Zoom in on a specific feature and find the \"Locate\" icon on the Map tab. Then click on the feature.</li> </ul> <ul> <li>You will see feature information in a pop-up window in the right pane. If there are multiple features on the map canvas, you may see multiple WMS layers and multiple feature information windows in the popup.</li> <li> Press Ctrl+Alt+M or go to Help &gt; Performance &gt; Diagnostic Monitor to examine the requests send by ArcGIS Pro.</li> <li>Now you can combine all the layers in your selected GIS software.</li> <li>You can now manually inspect land parcels and buildings that intersect flood zones.</li> <li>This point can be considered as an outline of a Disaster Management Application apart from the need for automation.</li> </ul>"},{"location":"exercise3/#4-c-adding-a-wms-service-in-fme","title":"4 c) Adding a WMS Service in FME","text":"<ul> <li>There are multiple ways to use web services in FME. One of the simplest is to use the WMS as a background map in the \u201cVisual Preview\u201d window/widget.</li> </ul>"},{"location":"exercise3/#4c-i-adding-a-wms-service-to-fme-as-background-map","title":"4c i) Adding a WMS Service to FME as Background Map","text":"<ul> <li> To use a WMS layer as a background map, find \u201cFME Options\u201d in the menu under Tools. Select the \u201cBackground Maps\u201d tab.</li> <li> Visit the website geoservice.dlr.de and search for the service called \u201cTanDEM-X 30m DEM\u201d. Find the endpoint (WMS URL of the service) of one of the Hillshade layers in the service.</li> <li> Go back to FME and click on the plus icon (+) at the bottom left in the Background Maps window.</li> </ul> <ul> <li> Select \u201cOGC WMS (Web Map Service)\u201d from the \u201cSource\u201d menu.</li> <li> Enter any custom name for the web service.</li> <li> Copy and paste the WMS URL (endpoint) of the selected layer into the \u201cURL\u201d text box in the \"WMS Connection\" group.</li> <li> Click the three dots (...) button next to the \u201cLayers\u201d text box and select the shorten name of the desired layer.</li> <li> If everything went well, you will be able to select the background map as the selected WMS service.</li> </ul>"},{"location":"exercise3/#4c-ii-adding-a-wms-service-to-fme-as-reader","title":"4c ii) Adding a WMS Service to FME as Reader","text":"<ul> <li>You can also add the WMS service as a data source (Reader) in FME. This procedure can be useful for tasks related to raster images.</li> <li>To do that, just type \"OGC WMS\" in an empty area on the main pane of FME Workbench. </li> <li>\u201cPointOnRasterValueExtractor\u201d can be one of the useful transformers that can select the band color value of a raster image using point coordinates.</li> </ul>"},{"location":"exercise3/#4c-iii-using-getfeatureinfo-request-in-fme-optional-step","title":"4c iii) Using GetFeatureInfo request in FME (Optional Step)","text":"<ul> <li>Since, the service operation \"GetFeatureInfo\" is not a mandatory in the WMS satndard, there is no a built-in tool to do use it. (You can search in the Community Hub for such a function)</li> <li> If you need to implement such a function in FME, then you might be interested with the following tutorial video:</li> <li>youtube.com/watch?v=kNeMNr2fAtM</li> </ul>"},{"location":"exercise3/#5-accessing-wms-services-with-owslib-python-library","title":"5) Accessing WMS services with OWSLib Python Library","text":"<p>OWSLib is one of the OGC compliant web service client and it supports OGC interface standards. Before using the OWSLib consider the following steps: - If you are on working in online environment, please install OWSLib to your current python environment using : pip install OWSLib - Then you need to import the OWSLib library into your code. - Check the following site to get more information about the OWSLib:   - https://owslib.readthedocs.io/en/latest/ </p> <pre><code>import owslib\n</code></pre> <ul> <li> Check available contents (packages + classes) in the library with following code: <code>help(owslib)</code></li> </ul> <p>You can specify a class or package to reduce the loaded library content in your code. There are multiple ways to do so: - First Option: <code>from owslib import wms</code>   - Imports only wms module from owslib package   - Type: <code>help(wms)</code> - Second Option: <code>import owslib.wms</code>   - Again, it calls only wms module from owslib package   - Type: <code>help(owslib.wms)</code> - Another option to import only the relevant function: <code>from owslib.wms import WebMapService as any_shorten_form</code>   - Imports only WebMapService function in the wms module and assigns a custom alias to it.   - Type: <code>help(any_shorten_form)</code></p>"},{"location":"exercise3/#5-a-examine-a-wms-service-with-owslib","title":"5 a) Examine a WMS service with OWSLib","text":"<p>Select any Web Map Service (WMS) from your previous work, or select a random WMS that covers the city of Hamburg in whole or in part. (If you want to add a random WMS, revisit the Hamburg TransparenzPortal or geoportal.de or INSPIRE Geoportal websites to search for the appropriate web service.)</p> <pre><code># Decide a way to import the library. \nfrom owslib.wms import WebMapService as wms\n# help(mywms)\n</code></pre> <p>If you type help(mywms), you will see an explanation of the function as below.</p> <p>WebMapService(url, version='1.1.1', xml=None, username=None, ...)</p> <p>Notice that only \"url\" parameter is not assigned to a value. This means that the only mandatory parameter is the \"url\" and all other parameters will be accepted with their default values unless their values are specified.</p> <ul> <li> Now, test your selected WMS with the imported WebMapService function.</li> </ul> <pre><code># mytest = mywms('https://geodienste.hamburg.de/HH_WMS_DGM1')\n# The website serves the metadata of the WMS highlights that\n# the recommended version is \"1.3.0\". So we can specify that:\nmytest = wms('https://geodienste.hamburg.de/HH_WMS_DGM1', version='1.3.0')\n</code></pre> <ul> <li> Now, you can use \"the built-in functions\" to know more about the returned object: <code>print(mytest)</code> / <code>type(mytest)</code> / <code>help(mytest)</code> / <code>dir(mytest)</code> If you are sure about the data is an iterable object (tuple, set, list, dictionary) then you can use also \"list\" function.</li> </ul> <pre><code>list(mytest.contents)\n# Alternatively: print(mytest.contents.keys())\n</code></pre> <pre><code>['HH_WMS_DGM1', 'WMS_DGM1_HAMBURG', 'WMS_DGM1_farbig', 'WMS_DGM1_farbig_10000']\n</code></pre> <ul> <li> Check the available methods by typing dir(mytest).</li> <li>You may notice the \"operations\" method in the list.</li> </ul> <pre><code>list(mytest.operations)\n</code></pre> <pre><code>[&lt;owslib.map.wms130.OperationMetadata at 0x702a34394ad0&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a34396de0&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a34394290&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a34394230&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a343941d0&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x702a343943b0&gt;]\n</code></pre> <ul> <li> As operations stored as objects in a list (array), we can access them using list index (For Exp. mylist[0]). Then you can check the available methods or attributes in the class instance by typing <code>dir(mytest.operations[0])</code>. </li> </ul> <pre><code>for x in mytest.operations:\nprint(x.name)\n</code></pre> <pre><code>GetCapabilities\nGetMap\nGetFeatureInfo\nDescribeLayer\nGetLegendGraphic\nGetStyles\n</code></pre> <ul> <li>Alternatively, you can inspect the webservice using the \"getServiceXML\" method. Please note that the result will be returned as a binary file in XML format. This means that you have to consider the binary format if you want to store or read the returned object as a file. For example, we specified the file mode as \"wb\" (Write + Binary) in the following code, because the object \"mytest.getServiceXML()\" was in bytes format, not a string. </li> </ul> <pre><code># type(mytest.getServiceXML())\n# Specify your own relative or full path to save the XML file, if it is required.\nwith open(\"responses/exr3/my_wms_servicexml.xml\", \"wb\") as my_wms_xml:\nmy_wms_xml.write(mytest.getServiceXML())\n</code></pre> <ul> <li>Check the saved XML file and try to find where the layers, bounding boxes or coordinate reference systems (CRSs) are defined.</li> </ul>  Reminder: Firefox and Google Chrome browsers have some extensions to visiualize XML files in a \"pretty\" way. Otherwise you can open the XML file with your favorite text editor and search for a \"pretty print\" solution. (For Example: XMLTools extension is available in the Notepad++ plugin repository.)  <ul> <li>You can also send queries to get single images with predefined properties. To do that, you may need to expose more informaiton about the WMS service using following commands:</li> </ul> <pre><code>print('CRS Options : ',mytest['WMS_DGM1_HAMBURG'].crsOptions, '\\n')\nprint('Bounding Box : ', mytest['WMS_DGM1_HAMBURG'].boundingBox, '\\n')\nprint('Layer Style : ', mytest['WMS_DGM1_HAMBURG'].styles, '\\n')\nprint('Supported Formats : ', mytest.getOperationByName('GetMap').formatOptions)\n</code></pre> <pre><code>CRS Options :  ['EPSG:25832', 'EPSG:3857', 'EPSG:4258', 'CRS:84', 'EPSG:3044', 'EPSG:25833', 'EPSG:4326', 'EPSG:31467', 'EPSG:4647']\n\nBounding Box :  (8.482047, 53.385591, 10.355638, 53.941383)\n\nLayer Style :  {'default': {'title': 'default', 'legend': 'https://geodienste.hamburg.de/HH_WMS_DGM1?language=ger&amp;version=1.3.0&amp;service=WMS&amp;request=GetLegendGraphic&amp;sld_version=1.1.0&amp;layer=WMS_DGM1_HAMBURG&amp;format=image/png&amp;STYLE=default', 'legend_width': '298', 'legend_height': '865', 'legend_format': 'image/png'}}\n\nSupported Formats :  ['image/png', 'image/jpeg', 'image/png; mode=8bit', 'image/vnd.jpeg-png', 'image/vnd.jpeg-png8', 'application/x-pdf', 'image/svg+xml', 'image/tiff', 'application/vnd.google-earth.kml+xml', 'application/vnd.google-earth.kmz', 'application/vnd.mapbox-vector-tile', 'application/x-protobuf', 'application/json']\n</code></pre> <ul> <li>So, you are aware of capability of the WMS service and you can use this data to get data from the server:</li> </ul> Note: Note that if you are using a different WMS service, you need to change the parameters given in the next example. <pre><code>from IPython.display import Image\nimg = mytest.getmap(\nlayers=['WMS_DGM1_HAMBURG'],\nsize=[300, 300],\nsrs=\"EPSG:4326\",\nbbox=[9.5, 53.4, 10, 53.7],\nformat=\"image/jpeg\")\nImage(img.read())\n</code></pre> <p></p>"},{"location":"exercise3/#6-using-ipyleaflet-to-show-the-web-services","title":"6) Using ipyleaflet to show the web services","text":"<p>ipyleaflet is a Jupyter / Leaflet bridge enabling interactive maps in the Jupyter notebook.</p> <pre><code>from ipyleaflet import Map, Marker\n# Add a center point to your map using latitude, longitude values\nmy_center = (53.5452, 9.9777)\n# Add a map object by specifying a zoom level and using the center point\nmy_map = Map(center=my_center, zoom=10)\n# Define a marker object using the defined center point\nmy_marker = Marker(location=my_center)\n# Add the marker object to the map\nmy_map.add(my_marker);\ndisplay(my_map)\n</code></pre> <p> Screenshot taken on Jupyter Notebook</p>"},{"location":"exercise3/#add-a-wms-layer-into-the-leaflet-map","title":"Add a WMS layer into the leaflet map","text":"<pre><code>from ipyleaflet import Map, Marker, WMSLayer, basemaps\n# Add one of the WMS service that you found in the sections above.\nmy_wms = WMSLayer(\nurl=mytest.url,\nlayers='WMS_DGM1_HAMBURG', # Check mytest.contents\nformat='image/png', #Check mytest.getOperationByName('GetMap').formatOptions\ntransparent=True, # Check the value for mytest['WMS_DGM1_HAMBURG'].opaque\n)\nmy_center = (53.5452, 9.9777)\n# Change the following assignment to add a simple basemap for a better visualization\nmy_map = Map(basemap=basemaps.CartoDB.Positron, center=my_center, zoom=10)\nmy_marker = Marker(location=my_center)\n# Add the WMS service into the map\nmy_map.add(my_wms)\nmy_map.add(my_marker);\n# display(my_map)\nmy_map\n</code></pre> <p> Screenshot taken on Jupyter Notebook</p>"},{"location":"exercise3/#add-a-geojson-data-into-the-leaflet-map-using-a-ogc-api-features-connection","title":"Add a GeoJSON data into the leaflet map using a OGC API - Features connection","text":"<pre><code>from ipyleaflet import Map, Marker, basemaps, GeoJSON\n# Add \"OGC API - Features\" class of the OWSLib\n# Alternative Solution: Use requests library to get data directly.\nfrom owslib.ogcapi.features import Features\n# Add json library to convert dictionaries to json\nimport json\nmy_api = Features('https://api.hamburg.de/datasets/v1/solarpotenzialanalyse/')\n# Check following methods or attributes supported by OWSLib:\n# my_api.collections, my_api.collection_queryables, my_api.collection_items\nmy_items = my_api.collection_items('gebaeude', bbox=[9.9767,53.5442,9.9787,53.5462], limit=100 )\nmy_json = json.dumps(my_items)\n# Write the request as a json file, preferably with \".geojson\" file extension.\nwith open('responses/exr3/my_api.geojson', 'w') as f:\nf.write(my_json)\n# Check the file and read as geojson to laod into map\nwith open('responses/exr3/my_api.geojson', 'r') as f:\nmy_data = json.load(f)\n# Specify some styles to the geojson data:\nmy_geojson = GeoJSON(\ndata=my_data,\nstyle={\n'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1, 'color': 'red'\n}\n)\nmy_center = (53.5452, 9.9777)\n# Increase the zoom level to not overload the \"Features\" request\nmy_map = Map(basemap=basemaps.CartoDB.Positron, center=my_center, zoom=15)\nmy_marker = Marker(location=my_center)\n# Add the geojson file into the map\nmy_map.add(my_geojson);\nmy_map.add(my_marker);\n# display(my_map)\nmy_map\n</code></pre> <p> Screenshot taken on Jupyter Notebook</p>"},{"location":"exercise4/","title":"Geospatial Web Services &amp; Web Mapping in 2D / 3D","text":"Munich Technical University || Chair of Geoinformatics  Murat Kendir, Prof. Thomas Kolbe || murat.kendir@tum.de  <ul> <li>In this exercise, you will learn how to use geospatial web services in your applications or web views and how to use the operations supported by the web service. </li> <li>In the previous exercise, we selected a few web map services from the given Spatial Data Infrastructures (SDIs) and examined the responses using GIS software. </li> <li>Now you will learn how to connect to and interact with geospatial web services with the help of some popular libraries. Additionally, you will learn how to use 2D and 3D JavaScript libraries which supports and visualize 2D or 3D datasets or web services.</li> </ul>"},{"location":"exercise4/#1-accessing-wms-service-with-python","title":"1) Accessing WMS service with Python","text":"<p>OWSLib is one of the OGC compliant web service client and it supports OGC interface standards. Before using the OWSLib consider the following steps: - If you are not working wholetale.org, please install OWSLib to your current python environment using : pip install OWSLib - Then you need to import the OWSLib library into your code. - Check the following site to get more information about the OWSLib:   - https://owslib.readthedocs.io/en/latest/ </p> <pre><code>import owslib\n</code></pre> <ul> <li> Check available contents (packages + classes) in the library with following code: <code>help(owslib)</code></li> </ul> <p>You can specify a class or package to reduce the loaded library content in your code. There are multiple ways to do so: - First Option: <code>from owslib import wms</code>   - Imports only wms module from owslib package   - Type: <code>help(wms)</code> - Second Option: <code>import owslib.wms</code>   - Again, it calls only wms module from owslib package   - Type: <code>help(owslib.wms)</code> - Another option to import only the relevant function: <code>from owslib.wms import WebMapService as any_shorten_form</code>   - Imports only WebMapService function in the wms module and assigns a custom alias to it.   - Type: <code>help(any_shorten_form)</code></p>"},{"location":"exercise4/#11-examine-a-wms-service-with-owslib","title":"1.1) Examine a WMS service with OWSLib","text":"<p>Select any Web Map Service (WMS) from your previous work, or select a random WMS that covers the city of Hamburg in whole or in part. (If you want to add a random WMS, revisit the Hamburg TransparenzPortal or geoportal.de or INSPIRE Geoportal websites to search for the appropriate web service.)</p> <pre><code># Decide a way to import the library. \nfrom owslib.wms import WebMapService as mywms\n# help(mywms)\n</code></pre> <p>If you type help(mywms), you will see an explanation of the function as below.</p> <p>WebMapService(url, version='1.1.1', xml=None, username=None, ...)</p> <p>Notice that only \"url\" parameter is not assigned to a value. This means that the only mandatory parameter is the \"url\" and all other parameters will be accepted with their default values unless their values are specified.</p> <p>Now, test your selected WMS with the imported WebMapService function.</p> <pre><code># mytest = mywms('https://geodienste.hamburg.de/HH_WMS_DGM1')\n# The website serves the metadata of the WMS highlights that\n# the recommended version is \"1.3.0\". So we can specify that:\nmytest = mywms('https://geodienste.hamburg.de/HH_WMS_DGM1', version='1.3.0')\n</code></pre> <p>Now, you can use \"the built-in functions\" to know more about the returned object: <code>print(mytest)</code> / <code>type(mytest)</code> / <code>help(mytest)</code> / <code>dir(mytest)</code> If you are sure about the data is an iterable object (tuple, set, list, dictionary) then you can use also \"list\" function.</p> <pre><code>list(mytest.contents)\n# Alternatively: print(mytest.contents.keys())\n</code></pre> <pre><code>['HH_WMS_DGM1', 'WMS_DGM1_HAMBURG', 'WMS_DGM1_farbig', 'WMS_DGM1_farbig_10000']\n</code></pre> <ul> <li>Check the available methods by typing dir(mytest).</li> <li>You may notice the \"operations\" method in the list.</li> </ul> <pre><code>list(mytest.operations)\n</code></pre> <pre><code>[&lt;owslib.map.wms130.OperationMetadata at 0x745d0c2c70e0&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x745d0c2c7980&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x745d0c2c7ad0&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x745d0c2c7b60&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x745d0c2c7bf0&gt;,\n &lt;owslib.map.wms130.OperationMetadata at 0x745d0c2c7c80&gt;]\n</code></pre> <ul> <li>As operations stored as objects in a list (array), we can access them using list index (For Exp. mylist[0]). Then you can check the available methods or attributes in the class instance by typing <code>dir(mytest.operations[0])</code>. </li> </ul> <pre><code>print( type(mytest.operations[0]) )\nprint(mytest.operations[0].name)\nprint(mytest.operations[1].name)\nprint(mytest.operations[2].name)\nprint(mytest.operations[3].name)\nprint(mytest.operations[4].name)\nprint(mytest.operations[5].name)\n# print(mytest.operations[0].formatOptions)\n# print(mytest.operations[0].methods)\n</code></pre> <pre><code>&lt;class 'owslib.map.wms130.OperationMetadata'&gt;\nGetCapabilities\nGetMap\nGetFeatureInfo\nDescribeLayer\nGetLegendGraphic\nGetStyles\n</code></pre> <ul> <li>Alternatively, you can inspect the webservice using the \"getServiceXML\" method. Please note that the result will be returned as a binary file in XML format. This means that you have to consider the binary format if you want to store or read the returned object as a file. For example, we specified the file mode as \"wb\" (Write + Binary) in the following code, because the object \"mytest.getServiceXML()\" was in bytes format, not a string. </li> </ul> <pre><code># type(mytest.getServiceXML())\n# Specify your own relative or full path to save the XML file, if it is required.\nwith open(\"responses/exr4/my_wms_servicexml.xml\", \"wb\") as my_wms_xml:\nmy_wms_xml.write(mytest.getServiceXML())\n</code></pre> <ul> <li>Check the saved XML file and try to find where the layers, bounding boxes or coordinate reference systems (CRSs) are defined.</li> </ul>  Reminder: Firefox and Google Chrome browsers have some extensions to visiualize XML files in a \"pretty\" way. Otherwise you can open the XML file with your favorite text editor and search for a \"pretty print\" solution. (For Example: XMLTools extension is available in the Notepad++ plugin repository.)  <ul> <li>You can also send queries to get single images with predefined properties. To do that, you may need to expose more informaiton about the WMS service using following commands:</li> </ul> <pre><code>print(mytest['WMS_DGM1_HAMBURG'].crsOptions, '\\n')\nprint(mytest['WMS_DGM1_HAMBURG'].boundingBox, '\\n')\nprint(mytest['WMS_DGM1_HAMBURG'].styles, '\\n')\nprint(mytest.getOperationByName('GetMap').formatOptions)\n</code></pre> <pre><code>['EPSG:25833', 'EPSG:4647', 'EPSG:4258', 'EPSG:31467', 'EPSG:3044', 'EPSG:4326', 'EPSG:3857', 'EPSG:25832', 'CRS:84']\n\n(8.482047, 53.385591, 10.355638, 53.941383)\n\n{'default': {'title': 'default', 'legend': 'https://geodienste.hamburg.de/HH_WMS_DGM1?language=ger&amp;version=1.3.0&amp;service=WMS&amp;request=GetLegendGraphic&amp;sld_version=1.1.0&amp;layer=WMS_DGM1_HAMBURG&amp;format=image/png&amp;STYLE=default', 'legend_width': '298', 'legend_height': '865', 'legend_format': 'image/png'}}\n\n['image/png', 'image/jpeg', 'image/png; mode=8bit', 'image/vnd.jpeg-png', 'image/vnd.jpeg-png8', 'application/x-pdf', 'image/svg+xml', 'image/tiff', 'application/vnd.google-earth.kml+xml', 'application/vnd.google-earth.kmz', 'application/vnd.mapbox-vector-tile', 'application/x-protobuf', 'application/json']\n</code></pre> <ul> <li>So, you are aware of capability of the WMS service and you can use this data to get data from the server:</li> </ul> Note that if you are using a different WMS service, you need to change the parameters given in the next example. <pre><code>from IPython.display import Image\nimg = mytest.getmap(\nlayers=['WMS_DGM1_HAMBURG'],\nsize=[300, 300],\nsrs=\"EPSG:4326\",\nbbox=[9.5, 53.4, 10, 53.7],\nformat=\"image/jpeg\")\nImage(img.read())\n</code></pre> <p></p>"},{"location":"exercise4/#12-add-a-wms-layer-to-jupyter-notebook-using-ipyleaflet","title":"1.2) Add a WMS layer to Jupyter Notebook using ipyLeaflet","text":"<p>As you may know that leaflet is well known and simple-to-use web map library based on JavaScript. However, leaflet has also a widget implementation with Python Notebook which lets users to visualize their leaflet maps in notebook documents. To start using ipyleaflet, type <code>pip install ipyleaflet</code> in your python environment or follow the instructions to install ipyleaflet which are available in this website.</p> <pre><code>from ipyleaflet import Map\ncenter = (53.547668, 9.985685)\nmap = Map(center=center, zoom=13)\ndisplay(map)\n</code></pre> <p> Screenshot taken on Jupyter Notebook</p> <p>You can change the basemap by importing \"basemaps\" class into your code.</p> <pre><code>from ipyleaflet import Map, basemaps\nfrom ipywidgets.embed import embed_minimal_html\nimport IPython\ncenter = (53.547668, 9.985685)\nmap = Map(basemap=basemaps.CartoDB.Positron, center=center, zoom=13)\n#display(map)\nsrc = 'raw_codes/exr4/ipyleaflet_basemap.html'\nembed_minimal_html(src, views=[map])\nIPython.display.IFrame(src, width='100%', height='300px')\n</code></pre> <p> </p> <p>Now, we can add our WMS service to the leaflet widget by specifying the connectiond details.</p> <pre><code>from ipyleaflet import Map, basemaps, WMSLayer\ncenter = (53.547668, 9.985685)\nmap = Map(basemap=basemaps.CartoDB.Positron, center=center, zoom=13)\nwms = WMSLayer(\nurl='https://geodienste.hamburg.de/HH_WMS_DGM1',\nlayers='WMS_DGM1_HAMBURG',\nformat='image/png',\ntransparent=True\n)\nmap.add(wms)\nmap\n</code></pre> <p> Screenshot taken on Jupyter Notebook</p> <p>Alternatively, you can call any WMS parameter including URL from the former OWSLib object.</p> <pre><code>center = (53.547668, 9.985685)\nmap = Map(basemap=basemaps.CartoDB.Positron, center=center, zoom=13)\n# print(mytest.url) # Shows the URL of WMS Server\n# list(mytest.items()) # Lists the available layers\n# print(mytest.items()[0][0]) # Exposes one of the layers in WMS Server\n# print(mytest['HH_WMS_DGM1'].name) # Takes only the name of the specified layer \n# print(mytest.getOperationByName('GetMap').formatOptions[0]) \n# Gives one of the possible image format\nwms = WMSLayer(\nurl= mytest.url,\nlayers=mytest.items()[0][0],\nformat= mytest.getOperationByName('GetMap').formatOptions[0],\ntransparent=True\n)\nmap.add(wms)\nmap\n</code></pre> <p> Screenshot taken on Jupyter Notebook</p> <ul> <li>ipyLeaflet allows users to create some interactions on their notebooks. Incidentally, it should be noted that these interactions may be less than using the leaflet library in pure JavaScript. Here is one of the posssible interaction of ipyleaflet package, which is clearly described in the documentation page.</li> </ul> <pre><code>from ipyleaflet import Map, basemaps, WMSLayer, SplitMapControl\nm = Map(basemap=basemaps.CartoDB.Positron, center=center, zoom=16)\nwms1 = WMSLayer(\nurl='https://geodienste.hamburg.de/HH_WMS_INSPIRE_Gebaeude_2D_ALKIS',\nlayers='BU.Building',\nformat='image/png',\ntransparent=True\n)\nwms2 = WMSLayer(\nurl='https://geodienste.hamburg.de/HH_WMS_INSPIRE_Flurstuecke',\nlayers='CadastralParcels',\nformat='image/png',\ntransparent=True\n)\nright_layer = wms1\nleft_layer = wms2\ncontrol = SplitMapControl(left_layer=left_layer, right_layer=right_layer)\nm.add(control)\nm\n</code></pre> <p> Screenshot taken on Jupyter Notebook</p> <ul> <li>You might be wondering what happens to the console (or terminal window) after running the leaflet widget. The console is still there. All you need to show it again is to enable the console by going to View &gt; Show Log Console in the python notebook window.</li> </ul> <p></p> <ul> <li>In the next exercise you will experience how to drag a marker on the map and then send/print its coordinates to the console.</li> </ul> <pre><code>from ipyleaflet import Map, basemaps, WMSLayer, Marker\ndef on_location_changed(event):\n# Do some computation given the new marker location, accessible from `event['new']`\n#print(event)\nmarker = Marker(location=event['new'], draggable=True)\nprint(marker.location)\npass\ncenter = (53.547668, 9.985685)\nmarker = Marker(location=center, draggable=True)\nmarker.observe(on_location_changed, 'location')\n# help(marker.observe)\nmap = Map(basemap=basemaps.CartoDB.Positron, center=center, zoom=13)\nmap.add(marker)\nwms = WMSLayer(\nurl='https://geodienste.hamburg.de/HH_WMS_DGM1',\nlayers='WMS_DGM1_HAMBURG',\nformat='image/png',\ntransparent=True\n)\nmap.add(wms)\ndisplay(map)\n</code></pre> <p> Screenshot taken on Jupyter Notebook</p> <ul> <li>If you are interested in visualizing a 2D/3D map in a python notebook, ipyleaflet can be considered a good starting point in terms of learning curve. However, there are many different alternative python libraries that support 2D/3D geographic data visualization in python notebooks or in a python framework (Flask, Django etc). Take a glance over these libraries, if you want:</li> <li>Folium</li> <li>LeafMap</li> <li>MapboxGL</li> <li>Plotly</li> <li>pyDeck</li> <li> <p>CesiumPy</p> </li> <li> <p>If you are looking for more geospatial python libraries or resources, check out the following repository listing some well-known libraries and resources:</p> </li> <li>GeoPythonInfoTree</li> </ul>"},{"location":"exercise4/#2-accessing-wms-services-from-javascript-libraries","title":"2) Accessing WMS services from JavaScript libraries","text":"<p>There are many JavaScript libraries that support 2D or 3D map visualizations in web browsers, and sometimes these libraries are used internally as the base environment in desktop applications without resorting to any web browser. For example, threeJS is a JavaScript library that supports visualizing geospatial data on it, meanwhile it is used as a 3D Viewer in QGIS. </p>"},{"location":"exercise4/#21-adding-wms-services-to-openlayers","title":"2.1) Adding WMS services to OpenLayers","text":"<p>OpenLayers is one of the oldest and most advanced 2D map viewer libraries in JavaScript. When working in Python, you can search for a \"wrapper\" for these JavaScript libraries and import them into your code (For Exp. ipyleaflet was a python wrapper of leaflet JavaScript library). You also have another option to store these HTML+JavaScript packages in your directory and render them using the IPython package with the IFrame function (same with the iframe tag in HTML). This method will give you the chance to render HTML in a frame and access it from the Jupyter notebook as well. However, you can also run these standalone HTML files from your directory just by clicking on them.</p> <pre><code>import IPython\nsrc = 'raw_codes/exr4/openlayers_empty_viewer.html'\nIPython.display.IFrame(src, width='100%', height='300px')\n</code></pre> <p> </p> <ul> <li>Alternatively, you can play with the file in a playground-like web applicaiton like fiddle:</li> <li>Copy &amp; Edit the HTML + JavaScript bundle in JSFiddle</li> <li>Notice that the OpenLayers JavaScript library is called from an external source here (Check \"URL Resources\" on left panel). </li> </ul> <p>So, examine the JavaScript code here to understand fundamentals of OpenLayers: - \"ol\" is an abbreviation of OpenLayers here.   - \"map\" class called from this library and three subobjects specified.   - 1: target 2: layers 3: view     - \"target\" is the ID of the HTMLElement. Check  elements in HTML document.     - \"layers\" is the predefined layer objects in map view.     - \"view\" is the definition of the view pane. <p>TIP: If no coordinate reference system (CRS) is defined, pseudo-mercator (Web Mercator / EPSG:3857) is usually used as the default CRS. <pre><code>var map = new ol.Map({  target: 'map',\nlayers: [\nnew ol.layer.Tile({\nsource: new ol.source.OSM()\n})\n],\nview: new ol.View({\ncenter: [1287392,6123424],\nzoom: 10\n})\n});\n</code></pre> - Check following web documentation pages to investiage called classes in the code above.   - ol.Map Class   - ol.layer.Tile Class   - ol.View Class</p> <ul> <li>Now, you can add a wms layer by adding following object to the layers. </li> </ul> <pre><code>new ol.layer.Tile({\nsource: new ol.source.TileWMS({\nurl: 'https://sgx.geodatenzentrum.de/wms_basemapde',\nparams: {\n'LAYERS': 'de_basemapde_web_raster_farbe',\n'FORMAT': 'image/png',\n}\n})\n}),\n</code></pre> <pre><code>import IPython\nsrc = 'raw_codes/exr4/openlayers_with_wms.html'\nIPython.display.IFrame(src, width='100%', height='300px')\n</code></pre> <p> </p> <ul> <li>Alternatively, you can play with the file in a playground-like web applicaiton like fiddle:</li> <li>Copy &amp; Edit the HTML + JavaScript bundle in JSFiddle</li> <li> <p>Note that the basemap is still OSM, but all of Germany is covered by a WMS layer provided by basemap.de (zoom out until you see the European continent)</p> </li> <li> <p>You can also check the different web service types, the API documentation of the supported classes and experience how OpenLayers supports these web services in the map view:</p> </li> <li>\"Single Image WMS\" - sample link | API Docs - ImageWMS</li> <li>\"Tiled WMS layer\" - sample link | API Docs - TileWMS</li> <li>\"WMTS layer\" - sample link | API Docs - WMTS</li> <li>\"WMS (1.3) with GetFeatureInfo function\" - sample link | (Check ImageWMS API Docs)</li> <li>\"WFS vector layer\" - sample link | API Docs - VectorLayer</li> <li>\"WFS vector layer with getFeature function\" - sample link | API Docs - WFS GetFeature</li> </ul> <p>TIP : You can start to play with the given codes by clicking to \"Edit\" button at right top corner.</p>"},{"location":"exercise4/#22-adding-wms-services-to-cesiumjs","title":"2.2) Adding WMS services to CesiumJS","text":"<p>CesiumJS is a popular 3D Map view library that supports additional 3D assets (object collections) such as 3D Tiles, tiled terrain models, GLTF/GLB (3D) models, etc. However, as a common map display environment, CesiumJS continues to support widely used geospatial data formats and web services such as GeoJSON, WMS, WMTS, etc. Just like we did before for OpenLayers, you can call CesiumJS libraries from a remote repository and visualize them here as HTML views:</p> <pre><code>import IPython\nsrc = 'raw_codes/exr4/cesium_empty_viewer.html'\nIPython.display.IFrame(src, width='100%', height='400px')\n</code></pre> <p> </p> <ul> <li>Alternatively, you can play with the file in Sandcastle (a playground provided by CesiumJS):</li> <li> <p>Sample in Cesium Sandcastle</p> </li> <li> <p>If you examine the code in the example, you will notice that a main object (viewer) is called to the scene:</p> </li> <li>viewer</li> <li>Then one of the possible imagery provider class \"OpenStreetMap\" called into the DOM element called \"cesiumContainer\"</li> <li> <p>OpenStreetMapImageryProvider</p> </li> <li> <p>Camera is a need to set an oblique view to the interested area. There are multiple techniques to set a view (check the link), but one of the most used method is setting heading-pitch-roll angles. If you are unfmailiar with heading-pitch-roll angles, visit following page: Heading(Yaw)-Pitch-Roll. <pre><code>const viewer = new Cesium.Viewer('cesiumContainer', {\nimageryProvider: new Cesium.OpenStreetMapImageryProvider({\nurl: 'https://a.tile.openstreetmap.org/'\n}),\nfullscreenButton: true\n});\nviewer.camera.flyTo({\ndestination: Cesium.Cartesian3.fromDegrees(11.575, 48.107, 4000),\norientation: {\nheading: Cesium.Math.toRadians(0.0),\npitch: Cesium.Math.toRadians(-45.0),\n}\n});\n</code></pre></p> </li> </ul> <p>TIP : OpenStreetMapImageryProvider is only one of the available options for adding image layers to CesiumJS. You can type \"ImageryProvider\" in the serarch box on the API documentation page to find out all the possibilities.</p> <ul> <li>Similarly to OpenLayers code, you can add WMS service as a basemap option to the Cesium scene by specifying the parameters.</li> </ul> <pre><code>var geourl = 'https://sgx.geodatenzentrum.de/wms_basemapde';\nvar imageryLayers = viewer.imageryLayers;\nvar geoWmsLayer = new Cesium.WebMapServiceImageryProvider({\nurl : geourl,\nparameters: {\nservice : 'WMS',\nformat : 'image/png',\n},   layers : 'de_basemapde_web_raster_farbe',\nEPSG: '4326'\n});\nviewer.scene.imageryLayers.removeAll();\nimageryLayers.addImageryProvider(geoWmsLayer);\n</code></pre> <ul> <li>If we combine this code block with the previous cesium code, we will get following scene:</li> </ul> <pre><code>import IPython\nsrc = 'raw_codes/exr4/cesium_with_wms.html'\nIPython.display.IFrame(src, width='100%', height='400px')\n</code></pre> <p> </p> <ul> <li>Also check the following samples and related API documentations to learn more about the possibilities in CeisumJS:<ul> <li>Imagery Layers | API Docs - ImageryProvider</li> <li>WMTS layer with Time dimension | WebMapTileServiceImageryProvider</li> <li>WMS GetFeatureInfo | (Check the ImageryProvider page)</li> <li>OSM 3D Buildings Dataset | createOSMBuildings</li> <li>Point Clouds as 3D Tiles | Cesium3DTileset</li> <li>Segmented Point Clouds as 3D Tiles | Cesium3DTileStyle</li> </ul> </li> </ul>"},{"location":"exercise4/#23-using-ogc-feature-api-as-geojson-source-in-cesium","title":"2.3) Using OGC Feature API as GeoJSON source in Cesium","text":"<p>One of the natively supported formats in CesiumJS is the \"GeoJSON\" data format. GeoJSON is quite similar to JSON files, but is standardized to support geospatial objects with a defined coordinate reference system and geometry property. This means that any OGC Feature API service that provides GeoJSON files can be easily adapted with CesiumJS scenes. The easiest way to import the OGC Feature API is to predefine the query and format in the URL and reference the URL as if calling a GeoJSON file from a repository.</p> <pre><code>// Set a viewer\nconst viewer = new Cesium.Viewer(\"cesiumContainer\", {});\n</code></pre> <ul> <li>Prepare the URL refers to OGC Feature API</li> <li>Example taken from the following data source:<ul> <li>https://suche.transparenz.hamburg.de/dataset/grundwassergleichen-min11</li> </ul> </li> <li>Query parameters specifies following filtering options:<ul> <li>First 10 (limit=10) of ground water sources which have 20 meters level (gw_stand_in_meter_nhn=20)</li> </ul> </li> </ul> <pre><code>feature_api_query = 'https://api.hamburg.de/datasets/v1/grundwassergleichen_min/collections/u12_l_gleichenplan_min/items?limit=10&amp;gw_stand_in_meter_nhn=20'\nconst dataSource = Cesium.GeoJsonDataSource.load(feature_api_query);\n</code></pre> <ul> <li>Now, you can add the data source  to the viewer and set the viewer extend to cover loaded geojson data source.</li> </ul> <pre><code>viewer.dataSources.add(dataSource);\nviewer.zoomTo(dataSource);\n</code></pre> <pre><code>import IPython\nsrc = 'raw_codes/exr4/cesium_with_geojson.html'\nIPython.display.IFrame(src, width='100%', height='400px')\n</code></pre> <p> </p>"},{"location":"exercise4/#3-fundamentals-of-3d-visualization-in-cesiumjs","title":"3) Fundamentals of 3D Visualization in CesiumJS","text":"<p>We have already added a WMS layer to the 3D map environment using the CesiumJS JavaScript library. Adding 2D overlays (GeoJSON, WMTS, WMS, XYZ basemaps etc) to the 3D map environment is not an outdated or unpopular method, but it is just one step in creating a well-designed 3D map. Generally, the steps required to create a 3D map environment can be summarized as follows: Adding 3D models, adding a 3D terrain model, overlaying the terrain with a coverage and finally adjusting the view to focus on the area of interest. In this step, we will try to follow these instructions one by one and experience 3D assets.</p>"},{"location":"exercise4/#31-adding-3d-buildings-to-the-cesium-viewer","title":"3.1) Adding 3D Buildings to the Cesium viewer","text":"<p>There are multiple ways to add 3D Tiles to a Cesium map. First of all, we need to consider that 3D Tiles are a set of binary files defined in JSON format and stored in a hierarchy. Therefore, to add a 3D Tile to the Cesium map, all that is needed is to find a suitable 3DTiles dataset and reference the main JSON file (usually named as \"tileset.json\") that stands at the top in the hierarchy. </p> <p>Another way to add 3DTiles to a Cesium map is using Cesium Ion and it's datasets which are available to use with or without an access token. OSMBuildings is one of these datasets and it is able to use without an access token.</p> <p>If you want to discover more about the available datasets, visit the webpage CesiumIon and check the \"Asset Depot\" tab after logging in.</p> <p>Add these codes at the end of your previously code (In section 2.2) and refresh the web page if needed. <pre><code>const buildingsTileset = await Cesium.createOsmBuildingsAsync();\nviewer.scene.primitives.add(buildingsTileset);\n</code></pre></p> <pre><code>import IPython\nsrc = 'raw_codes/exr4/cesium_with_wms_with_osm.html'\nIPython.display.IFrame(src, width='100%', height='400px')\n</code></pre> <p> </p> <p>As you may notice, the predefined 3D building dataset (based on OpenStreetMap extruded buildings, check OSMBuildings ) is loaded into the scene, but there is a serious problem. The buildings appear to float several hundred meters above the ground. This is because there is no terrain defined yet (a 3d model showing the current heights of the ground) and therefore Cesium works on an artificial surface based on an ellipsoidal geometry (i.e. the WGS84 ellipsoid).</p>"},{"location":"exercise4/#32-adding-terrain-to-the-cesium-viewer","title":"3.2) Adding terrain to the Cesium viewer","text":"<p>We can add a globally available terrain by adding these codes into our code. Please consider that, terrain object must be defined in CesiumContainer widget as an option. <pre><code>const viewer = new Cesium.Viewer('cesiumContainer', {\nterrain: Cesium.Terrain.fromWorldTerrain(),\n});\n</code></pre></p> <pre><code>import IPython\nsrc = 'raw_codes/exr4/cesium_with_wms_with_osm_with_terrain.html'\nIPython.display.IFrame(src, width='100%', height='400px')\n</code></pre> <p> </p> <p>Just like 3D Tiles, terrain models can also be called from external sources. In this way, it is possible to provide moew accurate and precise terrain models which is a need especially when visualizing smaller buildings on bumpy areas (For example click to search button at right top side of the cesium widget and type \"Neuschwanstein Castle\").  </p>"},{"location":"exercise4/#33-adding-custom-terrain-models-3dtiles-and-wms-services-to-cesium","title":"3.3) Adding custom terrain models, 3DTiles and WMS services to Cesium","text":"<p>As mentioned earlier, it is possible to add custom-built 3D Tiles and terrain models to Cesium. As these datasets are usually very large and expensive, there are not many publicly available datasets yet. Most of the time, these datasets are provided by an authority with a requirement to use a token or authentication method.</p> <p>Let's start building another example from scratch and add custom (and publicly available) terrain models, 3DTiles and a WMS or WMTS service to the Cesium scene.</p> <p>Remove all previous code and add the following lines to the \\&lt;script&gt; tag.</p> <pre><code>// Add following code to activate Cesium viewer with terrain model provided by\n// swisstopo team and coumented here: https://api3.geo.admin.ch/services/sdiservices.html\nconst viewer = new Cesium.Viewer(\"cesiumContainer\", {\nterrain: new Cesium.Terrain(Cesium.CesiumTerrainProvider.fromUrl(\"https://3d.geo.admin.ch/1.0.0/ch.swisstopo.terrain.3d/default/20200520/4326/\"))\n});\n</code></pre> <p>In the next step, define the interested area, in which you want to see both terrain and the buildings together.  <pre><code>//Geographic coordinates of famous place Zermatt in Switzerland\nvar center = Cesium.Cartesian3.fromDegrees(7.6594, 45.9904);\nvar heading = Cesium.Math.toRadians(0.0);\nvar pitch = Cesium.Math.toRadians(-90.0);\nvar range = 5000;\nvar hpr = new Cesium.HeadingPitchRange(heading, pitch, range);\nviewer.camera.lookAt(center, hpr);\n</code></pre></p> <p>Add the 3D Buildings or vegetation objects, which has provided as 3DTiles in this website. <pre><code>// Add 3D Buildings or Vegetation objects by using 3DTiles links in following site:\n// https://api3.geo.admin.ch/services/sdiservices.html#d-tiles\nconst buildingsTileset = await Cesium.Cesium3DTileset.fromUrl(\n\"https://vectortiles.geo.admin.ch/3d-tiles/ch.swisstopo.swisstlm3d.3d/20201020/tileset.json\"\n);\nviewer.scene.primitives.add(buildingsTileset);\n</code></pre></p> <p>TIP: You can experiment with a 3DTiles dataset that provides LOD2/3 buildings in Munich using following tileset : \"https://bvv3d21.bayernwolke.de/3d-data/latest/lod23d/tileset.json\"</p> <p>Finally add the WMS layer similar to the previous steps.</p> <pre><code>var geourl = 'https://wms.geo.admin.ch/';\nvar imageryLayers = viewer.imageryLayers;\nvar geoWmsLayer = new Cesium.WebMapServiceImageryProvider({\nurl : geourl,\nparameters: {\nservice : 'WMS',\nformat : 'image/png',\n},\nlayers : 'ch.swisstopo.swisstlm3d-karte-farbe',\nEPSG: '4326'\n});\nviewer.scene.imageryLayers.removeAll();\nimageryLayers.addImageryProvider(geoWmsLayer);\n</code></pre> <pre><code>import IPython\nsrc = 'raw_codes/exr4/cesium_with_everything_custom.html'\nIPython.display.IFrame(src, width='100%', height='400px')\n</code></pre> <p> </p>"},{"location":"exercise5/","title":"Exercise 5 - Virtualization and Containers, Cloud Computing","text":"Munich Technical University || Chair of Geoinformatics  Murat Kendir, Prof. Thomas Kolbe || murat.kendir@tum.de"},{"location":"exercise5/#aim-of-exercise","title":"Aim of Exercise","text":"<p>This exercise mainly focuses on Cloud Computing technologies and integrating cloud systems with GIS applications. You will practice with these systems to become more familiar with them by: - Using virtualization to create a mini-infrastructure and run a GIS application - Creating and serving a Tiled Map Layer and interconnecting the service with application interfaces/clients - Setting up and publishing a dashboard interface representing a filtered dataset from a Sensorthings API service</p> <p>Check the \"exercise5_preparation\" document (pdf / ipynb) to review some useful resources.</p> <p>Our goal is to provide a web interface to show a map containing sensors' online location data, use a custom tiled layer as a base map, and provide some graphical visualizations based on these sensors using virtualization technologies. The steps required to achieve this goal will be as follows: - Setting up a docker container to run and serve Geoserver as a base map provider. - Setting up a docker container to run and serve Grafana Dashboard as the interface of our application. - Connecting the Grafana Dashboard to an online data source (based on Sensorthings API), which provides some sensors available in Hamburg city - Setting up the Grafana Dashboard interface to publish the Tiled Map Layer as the base map and the sensors as points</p>"},{"location":"exercise5/#1-practice-on-play-with-docker-web-application","title":"1 - Practice on Play-With-Docker web application","text":"<p>In this section, you will create a web application on the play-with-docker website by avoiding diving into computational needs. This page lets you play with docker containers and images in a limited time (4 hours). So, you can test different docker images or container settings if they integrate seamlessly. In this section, you don't need to provide a predefined dataset to the applications running in docker as a container. Try to only practice with docker commands and settings.</p>"},{"location":"exercise5/#11-docker-usage-on-playground","title":"1.1 Docker Usage (on Playground)","text":"<p>Open the following website: play-with-docker - [ ] Click to login and select docker   - [ ] Register with your email account first if you do not have a docker hub account.     - [ ] If the popup is blocked, disable the popup blocker and try again. - [ ] Docker Playground will be launched and a session will be started which will be live for 4 hours. - [ ] Click to Add New Instance - [ ] An instance runtime will be started with a specific local ip address and ssh key. - [ ] List the running docker containers by typing docker ps in the terminal screen (e.g. command prompt of the instance). - [ ] If you want to check all (running and idle) available docker containers, type docker ps -- all - [ ] Check all available commands: docker -- help - [ ] If you want to check command-specific options and arguments, type docker any_command -- help (For exp. \"docker ps --help\")</p> <p>TIP: The terminal screen and available commands here will have the same or similar commands as a Linux terminal screen (command line), because usually the examples run on a Linux system. To check which version of Linux is used as the base operating system, type uname -a in the terminal.</p> <p></p>"},{"location":"exercise5/#12-running-the-first-docker-container-in-instance","title":"1.2 Running the first Docker container in instance","text":"<ul> <li> There is no working docker containers yet.</li> <li> Start a new docker container by typing:     <pre><code>docker run -d -p 3000:3000 \\\n--name=grafana \\\n-e \"GF_INSTALL_PLUGINS=iosb-sensorthings-datasource\" \\\ngrafana/grafana:latest\n</code></pre></li> <li>Explanations of options and arguments:<ul> <li>-d or --detach : The container continues to run in the background.</li> <li>-p or --publish : Forward (Publish) a port in the container to the host (Left side shows the port of the host machine and right side of the column shows the port of the container)</li> <li>-e or --env : Sets environment variables</li> <li>--name (no alias): Assign a name to the container, to easily recognize containers.</li> <li>grafana\\/grafana:latest means \"publisher\\/image:anyTag\" : The last argument is the full name of the docker image. Usually, tags include version numbers.</li> </ul> </li> <li> Check the available docker containers by typing docker ps</li> </ul>"},{"location":"exercise5/#13-what-actually-happens-after-executing-the-docker-run-command","title":"1.3 What actually happens after executing the \"docker run\" command?","text":"<ul> <li>The Docker app checked if the requested image (grafana/grafana:latest) already exists in our host machine. </li> <li> <p>If it is not available, it tries to download it from Docker Hub by searching for the same image name.</p> </li> <li> <p> Visit the Docker Hub page and search for our image manually:</p> </li> <li>https://hub.docker.com</li> <li>You can optionally search for any docker image on the command line:</li> <li>docker search grafana</li> <li>Check the available docker images in the host machine:</li> <li>docker image ls</li> </ul> <p></p>"},{"location":"exercise5/#14-how-to-removedelete-docker-images-from-the-instance-optional","title":"1.4 How to remove/delete docker images from the instance? (Optional)","text":"<ul> <li> Try deleting the image:</li> <li>docker rmi grafana/grafana:latest</li> <li> When an image is referenced to a container, the terminal will show an error and the container may still be running. So what we need to do is first stop the running container and then remove the referenced container:</li> <li>docker stop \\&lt;CONTAINER_NAME&gt;</li> <li>or alternatively use the container ID shown in<ul> <li>Type docker container list (same as \"ps\" command) to see container IDs and names.</li> <li>docker stop \\&lt;CONTAINER_ID&gt;</li> </ul> </li> <li> Check existing containers with the -all option:</li> <li>docker ps --all</li> <li> Remove the container:</li> <li>docker rm grafana</li> <li>or alternatively with Container ID:<ul> <li>docker rm 829224beac3f (container IDs are not fixed numbers, try find your container's ID and replace with given one)</li> </ul> </li> <li> Finally, remove the image from your instance:</li> <li>docker rmi grafana\\/grafana:latest</li> </ul>"},{"location":"exercise5/#15-docker-cheatsheet-and-the-relevance-between-linux-commands","title":"1.5 Docker Cheatsheet and the Relevance between linux commands","text":"<p>Many command abbreviations are inherited from Linux/Unix-based systems. These long command names can be used, for example, to make it easier to memorize abbreviated commands: - cp : Copy - rm : Remove - exec : Execute - cd : Change Directory - ls : List - ps : Processes - diff : Difference</p> <p>TIP: However, one of the best ways to learn these commands is not to memorize them but to use a \"Cheatsheet\" document as an aid during the exercises. If you want to use such a document, visit this page: Docker CLI Cheat Sheet</p>"},{"location":"exercise5/#16-access-to-the-grafana-dashboard","title":"1.6 Access to the Grafana Dashboard","text":"<ul> <li> If you have already removed the container and image while following the instructions in section 1.4, start from scratch and start the docker container with the same command given earlier:</li> <li>docker run -d -p 3000:3000 --name=grafana -e \"GF_INSTALL_PLUGINS=iosb-sensorthings-datasource\" grafana/grafana:latest</li> <li> Now click the Open Port button at the top of the page and specify port 3000. If your forwarded/published port is different, check the actual port number by typing docker ps.</li> <li> Type \"admin\" as username and password.</li> <li> Grafana will ask for a new password on the next page, type any password.</li> <li>If everything is OK, the Grafana start page will be shown.</li> </ul>"},{"location":"exercise5/#17-find-and-check-the-online-datasource","title":"1.7 Find and check the online datasource","text":"<ul> <li>Now you need to select a FROST Server stream as the data source (remember that we started the Grafana container with the corresponding plugin)</li> <li> Visit page: iot.hamburg.de</li> <li> Click for SensorThingsApi v1.1 <p>TIP: You can check the same data source with the Online API Testing Tool reqbin.com or other alternative online testing tools. (Try requesting for this URL: iot.hamburg.de/v1.1 )</p> </li> </ul>"},{"location":"exercise5/#18-connect-to-a-specific-dataset-from-sensorthings-api","title":"1.8 Connect to a specific dataset from SensorThings API","text":"<ul> <li> Return to the Grafana page running on localhost, expand the left side menu and go to Connections.</li> <li> Search for \"FROST SensorThings API Plugin\" and click on the listed plugin name. Click to \"Add new datasource\" button.</li> <li> Copy and paste the following address as URL value: https://iot.hamburg.de/v1.1</li> <li> Click to Save and test</li> <li> If you see Success message, expand the left menu pane again and go to Dashboards.</li> <li> Click Create Dashboard</li> <li> Click to Add Visualization</li> <li>Note that your default data source is automatically selected as Frost SensorThings API.</li> <li> Select \"iosb-sensorthings-datasource\" as data source, if it is not selected automatically.</li> <li> Select Entry Point at the bottom of the page as Things.</li> <li> Type \"Verkehrsz\u00e4hlstelle\" (Vehicle Counting Unit) just below the column name and find any sernsor datastream.</li> <li> Select the data source with the name \"Kfz-Aufkommen an Verkehrsz\u00e4hlstelle ... im 15-Min-Intervall\" (The number of motor vehicles computed with the infrared camera at 15 minutes intervals) or another dataream with different time interval.</li> <li> If you see \"No Data\" on the graph widget, select another datastream.</li> <li> If you see \"Data is missing a time field\", go to the Advanced tab, and set the phenomenonTime Field type as \"Time\". Then you can select a time interval from the top-right edge of the graph widget.</li> <li> When you click to the \"Open Visiualization Suggestions\", you will see a list of compatible graph types with your selected data.</li> <li> Select \"Bar Chart\".</li> <li>Click to Apply at top right corner of the page.</li> </ul>"},{"location":"exercise5/#19-customize-the-graph-panel-in-grafana","title":"1.9 Customize the graph panel in Grafana","text":"<ul> <li>The chart's axes will be set automatically since the data stream provides the \"time\" and \"results\" columns.</li> <li>If you want to customize your chart panel, check the right pane. (or click on the small arrow near the chart name at top right side of the page to expand the menu)</li> <li>Here you can change the chart's orientation, set the text sizes, show or hide the legend, show the result number on the chart, etc.</li> <li>A time interval selection button allows you to decrease or increase the time interval shown on the chart (in the upper right corner of the chart).</li> <li>Another functional panel can be the \"Transform Data\" tab, which can transform existing data by applying some functions or queries.</li> </ul>"},{"location":"exercise5/#2-build-the-app-on-local-computer-with-docker-desktop-and-cli-commands","title":"2. Build the app on local computer with Docker Desktop and CLI commands","text":"<p>In this section you will try to prepare all the requirements of the web application described in the \"Aim of the Exercise\" section. This workflow includes installing Docker Desktop, using CLI commands, running a geoserver container, publishing a wms service, and integrating the WMS service with Grafana Dashboard.</p>"},{"location":"exercise5/#21-docker-desktop-installation-on-windows-systems-optional","title":"2.1 Docker Desktop Installation on Windows systems (optional)","text":"<p>Check this step if you want to download and install the Docker Desktop or CLI tool on your personal computer</p> <ul> <li>If this is your first time downloading and installing Docker Desktop, it may be more effective to enable the *WSL2 option in Docker Settings.</li> <li>Search for \"Windows Properties\" and try to enable \"Windows Subsystem\". It is mandatory to enable Hyper-V. Hyper-V is a virtualization support that might be provided by your computer's CPU hardware. If it is not possible to enable it, you should check the BIOS configuration and look for a virtualization support option (it is usually on the \"Advanced\" page or tab).</li> <li>Enable Windows Subsystem </li> <li>Click on the gear icon in the top right corner and go to Resources &gt; WSL Integration.</li> <li>At the first start of the Docker Desktop app, log in to Docker Hub using the Login button in the top right corner.</li> <li>You will continue using the CLI (Command Line Interface) tool, but you can still check the Desktop App to view the containers, images etc.</li> </ul> <p></p>"},{"location":"exercise5/#22-serving-a-wmtstms-service-from-geoserver-as-a-docker-container","title":"2.2 Serving a WMTS/TMS service from Geoserver as a Docker container","text":"<p>To offer a Tiled Map Layer, we need to run a server that will render the given geographic data source in raster file format, taking into account defined coordinate reference systems. We have multiple software options to do this. MapServer, GeoServer, ArcGIS Server or QGIS Server are the most popular ones. You will create a server instance using a docker image containing Geoserver to publish a WMTS/TMS.</p> <p>TIP: If you want to learn more about the WMTS and TMS visit the follwoing page: What are the differences between TMS, XYZ &amp; WMTS Tile Map Specification</p> <ul> <li>Check the Geopackage representing the \"StadtTeile\" (City Districts) of the city center of Hamburg. (This data was downloaded from https://geoportal-hamburg.de/sga/ and reprojected to EPSG:3857 / Pseudo Mercator. File is stored in shared_w_geoserver/data_dir/datasets directory.)</li> <li>Extract or save directly to a subfolder under Documents. (Use always ASCII characters and underscore in the folder names, such as \"hamburg_wmts\". Do not use non-ASCII or special characters such as \u00e4, \u00df, \u00fc, &lt; &gt; (space) etc.)</li> <li>If neccessary, create two nested subfolders in this folder, name it \"data_dir\" and \"datasets\"and move the geopackage file into the \"datasets\" folder.</li> <li>Copy the full path of the previously created folder and replace the relevant part of the following command: <pre><code>docker run --detach --publish 8085:8080 ^\n--name geoserver ^\n--volume \"&lt;FULL_PATH_HERE&gt;\":/var/geoserver/datadir ^ geosolutionsit/geoserver\n</code></pre></li> <li>Search for \"Eingabeaufforderung\" (Command Prompt) in the Windows Search bar and run it. <p>WARNING: If you can't execute the \"docker\" command in the command line interface that means the system environmental variable has not been set for your system. However, you can still run the command by finding the docker cli executable. For a windows machine, it is stored in \"C:\\Program Files\\Docker\\Docker\\resources\\bin\" with the name \"com.docker.cli.exe\". You can navigate into this folder by typing \"cd C:\\Program Files\\Docker\\Docker\\resources\\bin\" then execute the program simply by replacing the word \"docker\" in the commands with \"com.docker.cli.exe\". For Example: \"com.docker.cli.exe run --detach --publish 8085:8080 --name geoserver  --volume \"C:\\Users\\murat\\Documents\\geoserver_data\\datadir\":/var/geoserver/datadir geosolutionsit/geoserver\"</p> </li> </ul> <p>TIP: The character ^ (Caret) is used only to create multi-line command. It works like an escape character and escapes from the next (invisible) newline character. This way, we can write multi-line commands in the windows command line.</p> <p>For Example:  <pre><code>docker run --name geoserver --interactive --tty ^\n--publish 8085:8080 ^\n--volume \"./shared_w_geoserver/data_dir/datasets\":\"/opt/geoserver/data_dir/datasets\" ^\n-e GEOSERVER_ADMIN_USER=murat ^\n-e GEOSERVER_ADMIN_PASSWORD=password ^\nkartoza/geoserver\n</code></pre></p> <p>TIP: Please note that the directions of the slash (/ or \\) characters are different in the -v (--volume) option values. This is because Windows and Linux systems use different types of slashes as directory separators (Windows: Backslash \"\\\", Linux/Unix: Forward Slash \"/\" )</p> <ul> <li>Check the Docker containers again:</li> <li>docker ps</li> <li>Open your web browser and go to http://localhost:8085/geoserver</li> <li>To log in, enter \"admin\" as username and \"geoserver\" as password.</li> <li>Change the language by using dropdown menu at top right side of the page.</li> <li>Since Geoserver is being started for the first time, you must to add a new workspace. Click Data &gt; Workspaces in the left pane. Click \"Add New Workspace\" and enter a descriptive name for your workspace and define a namespace URI. Use only ASCII characters in the namespace URI and not use special characters except underscore (_).</li> <li>Click to save.</li> <li>Click on the name of the workspace which you have created and enable WMS and WMTS options. Then click to Save again.</li> <li>Click Data &gt; Stores in the left pane and click \"Add new store\" at the top of the page.</li> <li>Select one of the options under \"Vector Data Sources\": Geopackage.</li> <li>Check if the workspace is automatically selected. </li> <li>Specify a name for the datastore and select a data source using the Browse button below Connection Parameters &gt; database.</li> <li>Click to save.</li> <li>Go to Gridsets in the left menu (under the Tile Caching section). Click to Create a new gridset and specify the coordinate reference system as EPSG:3857. You can try using Find button on the right side or simply type the exact name of the CRS. Click on the Compute from maximum extent of CRS link and manually add zoom levels from 0 to 24 by clicking on the Add Zoom Level link at the bottom of the page. Specify a name for the custom gridset and click to Save.</li> <li>Go to the WMTS in the left menu (under the Services section). Select your workspace and enable WMTS using checkbox. Click to Save.</li> <li>If the workspace is not shown in the menu on WMTS page, go back to the workspace page, select the workspace you created and activate the WMTS option in workspace settings. Then try to activate WMTS service by repeating the previous step.</li> <li>This is the last step to publish a WMTS/TMS service. Click Data &gt; Layers in the left pane.</li> <li>Click \"Add a new Layer\" and select your workspace:store package with the \"Add Layer\" drop-down menu item.</li> <li>Click the \"Publish\" link and set a URI-like name for your WMS service layer (you can use non-ASCII characters and signs in the Title and Summary text boxes).</li> <li>In the \"Bounding Boxes\" group, click both \"Compute from Data\" and \"Compute from native bounds\" links to automatically calculate the \"Local Bounding Box\" and \"Aspect Bounding Box\".</li> <li>Switch to the next tab called \"Publishing\" and select \"Polygon\" from the Available Styles. Click the right arrow icon to apply it to the WMS layer as a style.</li> <li>Check the \"Tile Caching\" tab to make sure about the tile. \"Create a cached layer for this layer\" and \"Enable tile caching for this layer\" should be enabled.</li> <li>At the bottom side of the Tile Caching tab, there will be the gridset options. Find the drop-down menu near the Add grid subset option and select the gridset noted before or the gridset you created.</li> <li>Click to save.</li> </ul> <p></p>"},{"location":"exercise5/#23-test-the-availability-of-wmtstms-services-with-qgis","title":"2.3 Test the Availability of WMTS/TMS services with QGIS","text":"<p>Since both service standards are commonly used tiled map services, multiple methods exist to test their availability.</p> <p></p>"},{"location":"exercise5/#231-method-1-use-the-geoserver-preview-option","title":"2.3.1 Method 1: Use the Geoserver Preview option","text":"<ul> <li>Go to Tile Layers in the left menu of the Geoserver administrator page.</li> <li>If you see the layer published before, there will be a preview option to see WMTS integrated with OpenLayers. Click on the drop-down menu under the Preview column and select the gridset configured with the CRS EPSG:3857.</li> <li>Activate the (Web) Developer Tool by pressing Ctrl+Shift+C (or I) in the web browser.</li> <li>Go to the Network tab and press the Reload button if needed.</li> <li>Check the URL sources loaded from the Geoserver instance.</li> <li>Copy one of the URL requests and take as note in somewhere. You will use the requested URL in next section to view the same service on QGIS.</li> </ul>"},{"location":"exercise5/#232-method-2-use-qgis-to-test-wmts-services","title":"2.3.2 Method 2: Use QGIS to test WMTS services","text":"<ul> <li>To use QGIS as a WMTS client, you need to detect the baseurl of the WMTS service. Go to the Welcome page of the Geoserver administrator page by clicking on the logo at the top left corner of the page. Find the WMTS box and click on the version number available in the box (The current version number for the WMTS is 1.1.1).</li> <li>This link will automatically forward the page to the GetCapabilities request. Copy the whole address except the part after the question mark (The following part specifies the parameters.).</li> <li>In our example, the base URL was: http://localhost:8085/geoserver/gwc/service/wmts?</li> <li>Open QGIS software and navigate to Layer &gt; Add Layer &gt; Add WMS/WMTS Layer in the top menu.</li> <li>Click the New button and paste the base URL into the URL textbox. Specify a custom name and Click Ok.</li> <li>Click the Connect button and select the layer published with the gridset configured with EPSG:3857 CRS. Click the Add button.</li> </ul>"},{"location":"exercise5/#233-method-3-use-qgis-to-test-tms-service","title":"2.3.3 Method 3: Use QGIS to test TMS service","text":"<ul> <li>Go to the Welcome page of the Geoserver by clicking on the logo at the top left corner of the page. Find the TMS box and click on the available version number in the same box (The current version number for the TMS is 1.0.0).</li> <li>This link will forward the page to the default page of a TMS service, which shows all available gridsets and their links. Copy the link belonging to the correct gridset with the CRS EPSG:3857.</li> <li>Open a new project in QGIS and find the XYZ Tiles in the Browser pane (if it is not available, check the option in View &gt; Panel &gt; Browser). Right-click on the \"XYZ Tiles\" and select the option New Connection.</li> <li>Paste the URL copied before and add the following string at the end of your URL:</li> <li>/{z}/{x}/{-y}.png</li> <li>The full link might be like this: http://localhost:8085/geoserver/gwc/service/tms/1.0.0/yerel%3Adistricts@EPSG3857_256x256@png/{z}/{x}/{-y}.png</li> <li>Specify a custom name and click the Ok button.</li> </ul> <p>TIP: We used {-y} as the tile row number (north-south axis) as the last coordinate parameter. This has to be specified because we published a TMS layer but accessed it as an XYZ layer. TMS and XYZ standards are quite similar services except for the definition of the Y axis. In the TMS, the Y axis identifies the vertical tile number from bottom to top, while XYZ identifies the Y axis reversely.</p> <p>REMINDER: You can activate the \"Debugging/Developer Tool\" by navigating into View &gt; Panels in the top menu. This tool is similar to the (Web) Developer Tool in the web browsers. Press the red circle button (Record icon) to see the requests in more detailed way.</p>"},{"location":"exercise5/#24-integrating-grafana-dashboard-with-the-tiled-map","title":"2.4 Integrating Grafana Dashboard with the Tiled Map","text":"<p>Usually, map-based JavaScript libraries support overlaying the map with WMS or WMTS layers. However, the map viewer plugins available in Grafana have limited functionality. There are currently five map plugins (NativePlugin:GeoMap, WorldMap Panel, Orchestra Cities Map, Mapgl, TrackMap) with different features, none of which support adding WMS layers yet. The only possibility to add a base map to these map plugins is to publish a TMS service and connect it like an XYZ service (Check the previous section 2.3.3). </p>"},{"location":"exercise5/#241-start-grafana-dashboard-and-add-the-xyz-base-map","title":"2.4.1 Start Grafana Dashboard and add the XYZ base map","text":"<ul> <li>Start a new docker container by typing: <pre><code>docker run --detach --publish 3000:3000 ^\n--name=grafana ^\n--env \"GF_INSTALL_PLUGINS=iosb-sensorthings-datasource\" ^\ngrafana/grafana:latest\n</code></pre></li> <li>Visit the page localhost:3000. Enter \"admin\" as username and password.</li> <li>The next page in Grafana prompts for a new password, type any password.</li> <li>Go to Connections in the left menu (Click to three dash icon on the top left corner) and search for \"FROST Sensorthings API Plugin\" (iosb-sensorthings-datasource).</li> <li>Click on the plugin and set the URL as \"https://iot.hamburg.de/v1.1\". Click to Save &amp; test button to check if everything works well.</li> <li>Go to the Dashboards in the left menu and click on the Add visualization button.</li> <li>Select the iosb-sensorthings-datasource as data source.</li> <li>Change the visiualization type as Geomap (The native map library of Grafana Dashboard) from the top right corner.</li> <li>Go to the Map View tab in the right menu and change the View option as Coordinates</li> <li>Set Latitude, Longitude and Zoom level as following values: 53.56, 9.97, 10 (This configuration sets up the map view to cover Hamburg's city center.)</li> <li>Navigate to Basemap layer in the right menu.</li> <li>Alternatively, you can add XYZ tile layer as Map layer. This option will overlay your XYZ layer over the default XYZ base map and will let to set up the transparency of your XYZ layer. If you want to apply this option, go to Map Layers and apply similar steps described below.</li> <li>Click to Layer Type and select the XYZ Tile Layer option. This selection will add the default XYZ tile layer which is an ArcGIS service publicly available.</li> <li>Copy and paste the XYZ service URL, which you already tested in the section 2.3.3</li> </ul>"},{"location":"exercise5/#242-set-up-a-data-source-to-show-on-the-map","title":"2.4.2 Set up a data source to show on the map","text":"<ul> <li>You specified the data source in the previous steps, but it has not been used yet. Now you can use it by specifying the attribution.</li> <li>Go to the Query pane at the left bottom and expand the first query \"A\" if it is collapsed.</li> <li>Click on the Advanced tab to specify the attributes and coordinates of a dataset.</li> <li>In the Sensorthings API URL, you need to specify the relative path of a specific dataset. Also note that the first part of the URL (base URL) was given during the setup of the data source (https://iot.hamburg.de/v1.1). For Example, The collection of the sensor with ID 5647 shows the infrared camera installations used to detect vehicles, including cars and bicycles. https://iot.hamburg.de/v1.1/Sensors(5647) If you check the Datastreams available within this collection, you will reach the datastream connections with given attributes and coordinates as a large array. You should specify a limit for the downloaded array elements to increase the network performance. To do this, you can specify a limit by typing \\$top=100. So the Sensorthings URL will be as /Sensors(5647)/Datastreams\\?\\$top=100 in our example.</li> <li>Check the dataset manually in your web browser and try to find some attributes available in the responses. For example, try to find the position of the phenomenonTime and the coordinates.</li> <li>Expand the tab called Manually Assign Fields.</li> <li>Go to the textboxes called Field, remove the default field \"\\$.value[*].result\" may appear  and add the first attribute by typing \\$.value[*].phenomenonTime. This query notation represents the nested structure of the JSON file downloaded as a response from FROST server. Current Document (\\$) &gt; Any element in Array [*] &gt; Attributes or Sub-Objects</li> <li>Type \"Time\" for the phenomenonTime field as an alias and click on the plus (+) icon on the right side.</li> <li>Type \\$.value[*].observedArea.coordinates[0] to specify the longitude value available in the current dataset. Change the data type to Number and set the alias as \"longitude\" or \"long\". Also, note that the position of the coordinate values might differ if you used a different data source.</li> <li>Finally, type $.value[].observedArea.coordinates[1] to specify the latitude. Change the data type to \"Number*\" and set the alias as \"latitude\" or \"lat\". Unfortunately, there is no descriptive information in the JSON file to determine which element is longitude and which is latitude. You need to use your geographic knowledge about the focused area. <li>Go to the Map Layers tab on the right pane. Let the layer type as default \"Markers\" and change the Location Mode to \"Coords\". Then select the longitude/latitude or long/lat fields per each drop-down box.</li> <li>Go to the top right corner of the map view and select the period as \"Last 2 Year\".</li>"},{"location":"exercise5_preparation/","title":"Preparation for Exercise 5","text":"Munich Technical University || Chair of Geoinformatics  Murat Kendir, Prof. Thomas Kolbe || murat.kendir@tum.de"},{"location":"exercise5_preparation/#general-preparation","title":"General Preparation:","text":"<ul> <li> Check the All you need to know about Geoserver video (28 min)</li> <li> Check the What is Docker and How it works? video (16 min)</li> <li> Check the page Docker 101 and follow the instructions below one of the options (Docker Desktop / Play with Docker) (~38 min).</li> </ul>"},{"location":"exercise5_preparation/#play-with-docker-exercise-section-1","title":"Play-with-docker Exercise (Section 1)","text":"<ul> <li>Docker CLI (Command Line Interface) Cheat Sheet</li> <li>Sensorthings API - Tutorial Page by OGC (~8 min)</li> <li>Grafana Dashboard - Fundamentals (~14 min)</li> </ul>"},{"location":"exercise5_preparation/#build-the-web-app-on-the-local-computer-with-docker-desktop-andor-cli-commands-section-2","title":"Build the web app on the local computer with Docker Desktop and/or CLI commands (Section 2)","text":"<ul> <li> Check the OGC E-Learning website by OGC to get more information or refresh your knowledge about the WM(T)S standard. (~ 27 min)</li> <li> Check the Quickstart section of the Geoserver Tutorials published in Geoserver Documentation page (~ 15 min)</li> <li> Frost Server documentation (optional, &gt;30 min)</li> </ul>"},{"location":"install_w_pip_on_lnx/","title":"Local installation for Linux:","text":""},{"location":"install_w_pip_on_lnx/#prerequisites","title":"Prerequisites:","text":"<ul> <li>git</li> <li>python3</li> <li>venv (<code>pip install venv</code>)</li> <li>Check the python installation by typing <code>python3 --version</code> in Terminal (Command Line Interface).</li> <li>Alternatively you can execute a selected code from the \"raw_code\" folder like below: <pre><code>python3 --interactive raw_codes/exr2/exr2_step2.py\n</code></pre></li> <li>TIP: Type <code>quit()</code> to exit from the current python shell.</li> </ul>"},{"location":"install_w_pip_on_lnx/#installation","title":"Installation:","text":"<ul> <li>(1) Go to your home directory and copy the github repository to your computer in Terminal: <pre><code>cd ~\ngit clone https://github.com/muratkendir/dist-gis-exercises.git\n</code></pre></li> <li>(2) Go into the downloaded directory: <pre><code>cd dist-gis-exercises\n</code></pre></li> <li>(3) Create a python environment as \"myenv\" or just use a custom name: <pre><code>python3 -m venv myenv\n</code></pre></li> <li>(Checkpoint) Check the \"myenv\" by listing it's contents: <pre><code>ls myenv\nls myenv/bin\n</code></pre></li> <li>(4) Activate the environment (Environment name should appear on the left): <pre><code>source myenv/bin/activate\n</code></pre></li> <li>TIP: Type only <code>deactivate</code> to exit from the current environment and turn back to the base.</li> <li>(Checkpoint) Check the list of required python libraries: <pre><code>cat requirements.txt\n</code></pre></li> <li>(5) Install the required libraries: <pre><code>pip install --requirement requirements.txt\n</code></pre></li> <li>(6) Install the Jupyter Notebook using pip command: <pre><code>pip install notebook\n</code></pre></li> <li>(7) Run the Jupyter Notebook and visit the locally hosted site (localhost:8888) after that: <pre><code>jupyter notebook\n</code></pre></li> <li>TIP: Press Ctrl+C to shut down the current Jupyter session.</li> <li>(8) Find the file with IPYNB extension and double click on it.</li> <li>To edit a cell (A block may contain code or makrdown document) double click on it</li> <li>To run a cell press Ctrl+Enter</li> <li>To swtich the content type of the cell use the dropdown menu on the top menu. </li> <li>(9) (Optional) If you want to check libraries, classes or built-ins, it is recommended to use bpython. Install bpython via pip: <pre><code>pip install bpython\n</code></pre></li> <li>TIP: Type <code>Exit()</code> to close current bpython session.</li> </ul>"},{"location":"install_w_pip_on_win/","title":"Windows w PIP","text":""},{"location":"install_w_pip_on_win/#local-installation-for-windows","title":"Local Installation for Windows","text":""},{"location":"install_w_pip_on_win/#prerequisites","title":"Prerequisites:","text":"<ul> <li>python3</li> <li>venv (<code>pip install venv</code>)</li> <li>Check the python installation by typing <code>python --version</code> in CMD (Command Prompt).</li> <li>Alternatively you can execute a selected code from the \"raw_code\" folder like below: <pre><code>python -i .\\raw_codes\\exr2\\exr2_step2.py\n</code></pre></li> <li>TIP: Type <code>quit()</code> to exit from the current python shell.</li> </ul>"},{"location":"install_w_pip_on_win/#installation","title":"Installation:","text":"<ul> <li>(1) Download the ZIP file from the github repository and extract the contents into a folder. Than simply change the directory to the extracted one: <pre><code>cd  C:\\Users\\USERNAME\\EXTRACTED_FOLDER\n</code></pre></li> <li>(2) Create a python environment as \"myenv\" or just use a custom name: <pre><code>python -m venv myenv\n</code></pre></li> <li>(Checkpoint 1) Check the \"myenv\" by listing it's contents: <pre><code>dir myenv\ndir myenv\\Scripts\n</code></pre></li> <li>(3) Activate the environment (Environment name should appear on the left): <pre><code>.\\myenv\\Scripts\\activate.bat\n</code></pre></li> <li>TIP: Type <code>.\\myenv\\Scripts\\deactivate.bat</code> to deactivate the current environment and turn back to the base.</li> <li>(Checkpoint) Check the list of required python libraries: <pre><code>type requirements.txt\n</code></pre></li> <li>(4) Install the required libraries: <pre><code>pip install --requirement requirements.txt\n</code></pre></li> <li>(5) Install the Jupyter Notebook using pip command: <pre><code>pip install notebook\n</code></pre></li> <li>(6) Run the Jupyter Notebook and visit the locally hosted site (localhost:8888) after that: <pre><code>jupyter notebook\n</code></pre></li> <li>TIP: Press Ctrl+C to shut down the current Jupyter session.</li> <li>(7) Find the file with IPYNB extension and double click on it.</li> <li>To edit a cell (A block may contain code or makrdown document) double click on it</li> <li>To run a cell press Ctrl+Enter</li> <li>To swtich the content type of the cell use the dropdown menu on the top menu.</li> </ul>"},{"location":"ogc_services_samples/","title":"OGC Services &amp; Samples","text":"Munich Technical University || Chair of Geoinformatics  Murat Kendir, Prof. Thomas Kolbe || murat.kendir@tum.de  <ul> <li>In this document we provide some examples for OGC services.</li> <li>Take a look at the given URLs and their parameters and try to analyze the responses for the GetCapabilities operation.</li> </ul> <p>Presentation Mode</p>"},{"location":"ogc_services_samples/#tips-tricks-about-the-urls-and-parameters","title":"Tips &amp; Tricks about the URLs and Parameters","text":""},{"location":"ogc_services_samples/#whitespace-characters","title":"Whitespace characters","text":"<p> Use an advanced note editor (or an IDE) such as Notepad++ or SublimeText to copy and paste URLs. If you enable showing all characters in these editors, you may see some special characters that are not shown by default, such as \u201c\\n\u201d (Line Feed - LF), \u201c\\r\\n\u201d (Carriage Return + Line Feed - CR/LF), \u201c\\t\u201d (Tab), \u201c\\s\u201d (Space). These characters are known as \u201cWhitespace Characters\u201d and are invisible in most editor software.</p> <ul> <li>List of the Whitespace Characters - Wikipedia</li> </ul> <p>Showing whitespace characters in SublimeText : Press Ctrl+Shift+P in SublimeText and type \"Install Package\". Search for the package \"RawLineEdit\". Select and press Enter to install the package. Check the left-bottom info bar to be sure if the installation succeeded. Press Ctrl+Shift+P again and search for \"Toggle Line Edit Mode\". You can also assign a keyboard shortcut for any available command.</p> <p> Showing whitespace characters in Notepad++ : In the Notepad++, click to View \\&gt; Show Symbol \\&gt; Show All Characters.</p>"},{"location":"ogc_services_samples/#ogc-web-samples-1","title":"OGC Web Samples - 1","text":""},{"location":"ogc_services_samples/#bavaria-digital-orthophotos","title":"Bavaria - Digital orthophotos","text":"<p>https://geoservices.bayern.de/od/wms/dop/v1/dop20?language=ger&amp;SERVICE=WMS&amp;VERSION=1.1.1&amp;REQUEST=GetMap&amp;BBOX=1284416.822854088619%2C6128194.115993234329%2C1285969.715073181316%2C6129565.189462079667&amp;SRS=EPSG%3A3857&amp;WIDTH=1358&amp;HEIGHT=1199&amp;LAYERS=by_dop20c&amp;STYLES=&amp;FORMAT=image%2Fpng&amp;DPI=96&amp;MAP_RESOLUTION=96&amp;FORMAT_OPTIONS=dpi%3A96&amp;TRANSPARENT=TRUE</p>"},{"location":"ogc_services_samples/#get-capabilities-link","title":"Get Capabilities Link","text":"<p>https://geoservices.bayern.de/od/wms/dop/v1/dop20?SERVICE=WMS&amp;VERSION=1.1.0&amp;REQUEST=GetCapabilities</p>"},{"location":"ogc_services_samples/#questions","title":"Questions","text":"<ul> <li>Who is the responsible person or corporation?</li> <li>Which Layers are queryable?</li> <li>Which image formats supported GetMap?</li> <li>Which file formats are supported for the GetFeatureInfo request?</li> <li>What is the difference between \u201cDigitales Orthophoto 20cm (BVV)\u201d and \u201cDOP 20 (Farbe)\u201d layers?</li> </ul>"},{"location":"ogc_services_samples/#ogc-wms-samples-2","title":"OGC WMS Samples - 2","text":""},{"location":"ogc_services_samples/#hamburg-buildings-2d-atkis","title":"Hamburg - Buildings - 2D ATKIS","text":"<p>https://geodienste.hamburg.de/HH_WMS_INSPIRE_Gebaeude_2D_ATKIS_Basis_DLM?SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetMap&amp;BBOX=1111942.144059270155%2C7082582.984302694909%2C1115292.715944103431%2C7085541.258006609045&amp;CRS=EPSG%3A3857&amp;WIDTH=1358&amp;HEIGHT=1200&amp;LAYERS=BU.Building&amp;STYLES=&amp;FORMAT=image%2Fpng&amp;DPI=96&amp;MAP_RESOLUTION=96&amp;FORMAT_OPTIONS=dpi%3A96&amp;TRANSPARENT=TRUE</p>"},{"location":"ogc_services_samples/#get-capabilities-link_1","title":"Get Capabilities Link","text":"<p>https://geodienste.hamburg.de/HH_WMS_INSPIRE_Gebaeude_2D_ATKIS_Basis_DLM?SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GETCAPABILITIES</p>"},{"location":"ogc_services_samples/#questions_1","title":"Questions","text":"<ul> <li>Is GetLegendGraphic operation supported?</li> <li>How many CRS are supported?</li> <li>Is the default style of \u201cBU.building\u201d layer defined?</li> </ul>"},{"location":"ogc_services_samples/#ogc-wms-samples-3","title":"OGC WMS Samples - 3","text":""},{"location":"ogc_services_samples/#earth-observation-center-elevation-map-service","title":"Earth Observation Center - Elevation Map Service","text":"<p>https://geoservice.dlr.de/eoc/elevation/wms?SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetMap&amp;BBOX=1199862.581342106452,6118798.876939699054,1307080.881656771293,6213463.635464943945&amp;CRS=EPSG:3857&amp;WIDTH=1358&amp;HEIGHT=1199&amp;LAYERS=srtm_x-sar_dem_mosaic&amp;STYLES=&amp;FORMAT=image/png&amp;DPI=96&amp;MAP_RESOLUTION=96&amp;FORMAT_OPTIONS=dpi:96&amp;TRANSPARENT=TRUE</p>"},{"location":"ogc_services_samples/#get-capabilities-link_2","title":"Get Capabilities Link","text":"<p>https://geoservice.dlr.de/eoc/elevation/wms?SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetCapabilities</p>"},{"location":"ogc_services_samples/#questions_2","title":"Questions","text":"<ul> <li>Is \u201cSRTM X-SAR Elevation Mosaic\u201d layer queryable?</li> <li>What you get when the GetFeatureInfo operation used on map?</li> </ul>"},{"location":"ogc_services_samples/#ogc-wmts-sample","title":"OGC WMTS Sample","text":""},{"location":"ogc_services_samples/#basemapde-web-raster","title":"basemap.de Web Raster","text":"<p>https://sgx.geodatenzentrum.de/wmts_basemapde/tile/1.0.0/de_basemapde_web_raster_farbe/default/DE_EPSG_25832_ADV/09/383/297.png</p>"},{"location":"ogc_services_samples/#get-capabilities-link_3","title":"Get Capabilities Link","text":"<p>https://sgx.geodatenzentrum.de/wmts_basemapde/1.0.0/WMTSCapabilities.xml</p>"},{"location":"ogc_services_samples/#questions_3","title":"Questions","text":"<ul> <li>How many Layers are available?</li> <li>How many TileMatrixSets are available?</li> <li>How many Tile Matrixes does the first TileMatrixSet have?</li> </ul>"},{"location":"ogc_services_samples/#ogc-wfs-sample-1","title":"OGC WFS Sample - 1","text":""},{"location":"ogc_services_samples/#hamburg-groundwater-protection","title":"Hamburg - Groundwater Protection *","text":"<p> Use URLDecode.io web site to see the parameters of the WFS request </p> <p></p> <p>https://geodienste.hamburg.de/HH_WFS_Grundwasserschutz?SERVICE=WFS&amp;REQUEST=GetFeature&amp;VERSION=2.0.0&amp;TYPENAMES=de.hh.up:u12_f_gw_flurabstand_max&amp;SRSNAME=EPSG:25832&amp;FILTER=%3Cfes:Filterxmlns:fes%3D%22http://www.opengis.net/fes/2.0%22xmlns:gml%3D%22http://www.opengis.net/gml/3.2%22%3E%0A%3Cfes:And%3E%0A%3Cfes:BBOX%3E%0A%3Cfes:ValueReference%3Egeom%3C/fes:ValueReference%3E%0A%3Cgml:EnvelopesrsName%3D%22EPSG:25832%22%3E%0A%3Cgml:lowerCorner%3E5643335930170%3C/gml:lowerCorner%3E%0A%3Cgml:upperCorner%3E5683735933740%3C/gml:upperCorner%3E%0A%3C/gml:Envelope%3E%0A%3C/fes:BBOX%3E%0A%3Cfes:Andxmlns:fes%3D%22http://www.opengis.net/fes/2.0%22%3E%0A%3Cfes:Notxmlns:fes%3D%22http://www.opengis.net/fes/2.0%22%3E%0A%3Cfes:PropertyIsNullxmlns:fes%3D%22http://www.opengis.net/fes/2.0%22%3E%0A%3Cfes:ValueReference%3Egeom%3C/fes:ValueReference%3E%0A%3C/fes:PropertyIsNull%3E%0A%3C/fes:Not%3E%0A%3Cfes:PropertyIsEqualToxmlns:fes%3D%22http://www.opengis.net/fes/2.0%22%3E%0A%3Cfes:Functionxmlns:fes%3D%22http://www.opengis.net/fes/2.0%22name%3D%22IsSurface%22%3E%0A%3Cfes:ValueReference%3Egeom%3C/fes:ValueReference%3E%0A%3C/fes:Function%3E%0A%3Cfes:Literalxmlns:fes%3D%22http://www.opengis.net/fes/2.0%22%3Etrue%3C/fes:Literal%3E%0A%3C/fes:PropertyIsEqualTo%3E%0A%3C/fes:And%3E%0A%3C/fes:And%3E%0A%3C/fes:Filter%3E%0A </p>"},{"location":"ogc_services_samples/#get-capabilities-link_4","title":"Get Capabilities Link","text":"<p>https://geodienste.hamburg.de/HH_WFS_Grundwasserschutz?REQUEST=GetCapabilities&amp;SERVICE=WFS</p>"},{"location":"ogc_services_samples/#questions_4","title":"Questions","text":"<ul> <li>How many feature types available?</li> <li>Is Filter Encoding supported?</li> <li>If yes, then which filters are supported?</li> </ul>"},{"location":"ogc_services_samples/#ogc-wfs-sample-2","title":"OGC WFS Sample - 2","text":""},{"location":"ogc_services_samples/#hamburg-tax-rates","title":"Hamburg - Tax Rates","text":"<p>https://geodienste.hamburg.de/HH_WFS_Taxenstaende?SERVICE=WFS&amp;REQUEST=GetFeature&amp;VERSION=2.0.0&amp;TYPENAMES=de.hh.up:taxenstaende&amp;COUNT=1000000&amp;SRSNAME=EPSG:25832&amp;BBOX=543859.73267435841262341,5937443.36617781594395638,559909.96083074959460646,5949410.37595691997557878,EPSG:25832</p>"},{"location":"ogc_services_samples/#get-capabilities-link_5","title":"Get Capabilities Link","text":"<p>https://geodienste.hamburg.de/HH_WFS_Taxenstaende?SERVICE=WFS&amp;REQUEST=GetCapabilities</p>"},{"location":"ogc_services_samples/#ogc-api-features-sample-1","title":"OGC API - Features Sample - 1","text":""},{"location":"ogc_services_samples/#north-rhine-westphalia-selected-geosites","title":"North Rhine-Westphalia Selected Geosites","text":"<p>https://ogc-api.nrw.de/inspire-am-geotope/collections/AM_Geotope_Polygone/items/1?f=json</p>"},{"location":"ogc_services_samples/#api-web-interface","title":"API web interface","text":"<p>https://ogc-api.nrw.de/inspire-am-geotope/api?f=html</p>"},{"location":"ogc_services_samples/#api-conformance-document","title":"API Conformance Document","text":"<p>https://ogc-api.nrw.de/inspire-am-geotope/conformance?f=html</p>"},{"location":"ogc_services_samples/#questions_5","title":"Questions","text":"<ul> <li>How many Feature Collections are available on the main service (ogc-api.nrw.de)?</li> <li>Which properties can be used to filter geosites (for AM_Geotope_Polygone)?</li> <li>What is the temporal range of the service for the geosites collection?</li> </ul>"},{"location":"ogc_services_samples/#ogc-api-features-sample-2","title":"OGC API - Features Sample - 2","text":""},{"location":"ogc_services_samples/#traffic-volumes-in-hamburg","title":"Traffic volumes in Hamburg","text":"<p>https://api.hamburg.de/datasets/v1/verkehrsstaerken/collections/radverkehr_pegel/items/1?f=json</p>"},{"location":"ogc_services_samples/#api-web-interface_1","title":"API web interface","text":"<p>https://api.hamburg.de/datasets/v1/verkehrsstaerken/api?f=html</p>"},{"location":"ogc_services_samples/#api-conformance-document_1","title":"API Conformance Document","text":"<p>https://api.hamburg.de/datasets/v1/verkehrsstaerken/conformance?f=html</p>"},{"location":"samples_for_discussion/","title":"Samples for Discussion","text":"Munich Technical University &gt; Engineering &amp; Design &gt; Aerospace &amp; Geodesy &gt; Chair of Geoinformatics  Murat Kendir, Prof. Thomas Kolbe || murat.kendir@tum.de"},{"location":"samples_for_discussion/#classification-of-ogc-web-services","title":"Classification of OGC Web Services","text":""},{"location":"samples_for_discussion/#csw-servers-catalog-service-for-the-web","title":"CSW Servers (Catalog Service for the Web)","text":"<ul> <li>Metaver.de</li> <li>Repository : metaver.de</li> <li>Main URL : https://metaver.de/csw?</li> <li>GetCapabilities Request : https://metaver.de/csw?SERVICE=CSW&amp;version=2.0.2&amp;request=GetCapabilities</li> <li>Federal Institute for Geosciences and Natural Resources</li> <li>Repository : geoportal.bgr.de</li> <li>Main URL : https://geoportal.bgr.de/smartfindersdi-csw/api?</li> <li>GetCapabilities Request: https://geoportal.bgr.de/smartfindersdi-csw/api?Request=GetCapabilities&amp;Service=CSW&amp;Version=2.0.2</li> </ul>"},{"location":"samples_for_discussion/#wms-servers-web-map-service","title":"WMS Servers (Web Map Service)","text":"<ul> <li>German Aerospace Center</li> <li>Repository : geoservice.dlr.de</li> <li>Main URL : https://geoservice.dlr.de/eoc/elevation/wms?</li> <li>GetCapabilities Request : https://geoservice.dlr.de/eoc/elevation/wms?SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetCapabilities</li> <li> <p>GetMap Request Sample : SRTM-X DEM Mosaic</p> </li> <li> <p>Hamburg Building Footprints (INSPIRE/ATKIS)</p> </li> <li>Repository : transparenz.hamburg.de</li> <li>Main URL : https://geodienste.hamburg.de/HH_WMS_INSPIRE_Gebaeude_2D_ATKIS_Basis_DLM?</li> <li>GetCapabilities Request : https://geodienste.hamburg.de/HH_WMS_INSPIRE_Gebaeude_2D_ATKIS_Basis_DLM?SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GETCAPABILITIES</li> <li>GetMap Request Sample : HH_WMS_Gebaeude_2D_ATKIS_Basis</li> </ul>"},{"location":"samples_for_discussion/#wmts-servers-web-map-tile-service","title":"WMTS Servers (Web Map Tile Service)","text":"<ul> <li>BaseMap.de</li> <li>Repository: basemap.de</li> <li>Capabilities URL: https://sgx.geodatenzentrum.de/wmts_basemapde/1.0.0/WMTSCapabilities.xml</li> <li> <p>GetTile URL : https://sgx.geodatenzentrum.de/wmts_basemapde/tile/1.0.0/de_basemapde_web_raster_farbe/default/DE_EPSG_25832_ADV/09/383/297.png</p> </li> <li> <p>TopPlusOpen</p> </li> <li> <p>Repository: Bundesamt f\u00fcr Kartographie und Geodaesie</p> </li> <li>Capabilities URL : https://sgx.geodatenzentrum.de/wmts_topplus_open/1.0.0/WMTSCapabilities.xml</li> <li>GetTile URL (sample) : https://sgx.geodatenzentrum.de/wmts_topplus_open/tile/1.0.0/web/default/WEBMERCATOR/10/343/549.png</li> </ul>      TIP: An important clue about WMTS servers is that they work in a similar way to XYZ tiles. The key difference between XYZ tiles and TMS-based (Tile Map Specification) WMTS services is the order of the axes of the desired tile:  <ul> <li>XYZ tiles is calling tile with this order: {Zoom Level/Z} / {Row Number/Y} / {Column Number/X}</li> <li>WMTS service is calling tile with this order: {Zoom Level/Z} / {Column Number/X} / {Row Number/Y}</li> </ul> It is therefore theoretically possible to call a WMTS service as an XYZ tile layer. You can test the same service on QGIS by registering it as both WMTS and XYZ and changing the order of the {x} and {y} values."},{"location":"samples_for_discussion/#wfs-services-web-feature-service","title":"WFS Services (Web Feature Service)","text":"<ul> <li>Hamburg - Minimum groundwater level 2019</li> <li>Repository : transparenz.hamburg.de</li> <li>Main URL : https://geodienste.hamburg.de/HH_WFS_Grundwasserschutz?</li> <li>GetCapabilities Request : https://geodienste.hamburg.de/HH_WFS_Grundwasserschutz?REQUEST=GetCapabilities&amp;SERVICE=WFS</li> <li> <p>GetFeature Request Sample (Max 3) : HH_WFS_Grundwasserschutz</p> </li> <li> <p>World Heritage Sites in Berlin</p> </li> <li>Repository : daten.berlin.de</li> <li>Main URL : https://gdi.berlin.de/services/wfs/welterbe?</li> <li>GetCapabilities Request : https://gdi.berlin.de/services/wfs/welterbe?REQUEST=GetCapabilities&amp;SERVICE=wfs</li> <li>GetFeature Request Sample (Max 3) : Welterbest\u00e4tten / Heritage Sites</li> </ul>"},{"location":"samples_for_discussion/#ogc-api-features-services","title":"OGC API - Features services","text":"<ul> <li>Verkehrsst\u00e4rken Hamburg</li> <li>Repository : transparenz.hamburg.de</li> <li>Main URL : api.hamburg.de/datasets/v1/verkehrsstaerken</li> <li>API Conformance URL : api.hamburg.de/datasets/v1/verkehrsstaerken/conformance?f=json</li> <li>Collections : api.hamburg.de/datasets/v1/verkehrsstaerken/collections?f=json</li> <li> <p>Items : https://api.hamburg.de/datasets/v1/verkehrsstaerken/collections/radverkehr_dtv_dtvw/items?&amp;limit=10&amp;offset=0&amp;f=json</p> </li> <li> <p>Niedersachsen ALKIS Data</p> </li> <li>Repository : ni-lgln-opengeodata.hub.arcgis.com/</li> <li>Main URL : alkis.stac.lgln.niedersachsen.de/</li> <li>API Conformance URL : alkis.stac.lgln.niedersachsen.de/conformance</li> <li>Collections : alkis.stac.lgln.niedersachsen.de/collections</li> <li> <p>Items : alkis.stac.lgln.niedersachsen.de/collections/alkis-hausumringe/items?limit=10&amp;bbox=-175.05,-85.05,175.05,85.05&amp;datetime=2018-02-12T23:20:50Z</p> </li> <li> <p>North Rhine-Westphalia, Cadastre</p> </li> <li>Repository : www.bezreg-koeln.nrw.de/</li> <li>Main URL : ogc-api.nrw.de/lika/v1</li> <li>API Conformance URL : https://ogc-api.nrw.de/lika/v1/conformance?f=json</li> <li>API Interface : https://ogc-api.nrw.de/lika/v1/api</li> </ul>"},{"location":"samples_for_discussion/#wcs-services-web-coverage-service","title":"WCS Services (Web Coverage Service)","text":"<ul> <li>Copernicus Data Hub</li> <li>Repository : documentation.dataspace.copernicus.eu</li> <li>Main URL : https://sh.dataspace.copernicus.eu/ogc/wcs/ (Instance_ID is the token given to the registered users) <li>Sample URL : https://sh.dataspace.copernicus.eu/ogc/wcs/81ee4fd4-3ef6-4a0e-b2fd-054e6780f32d?</li> <li> <p>Get Capabilities URL : https://sh.dataspace.copernicus.eu/ogc/wcs/81ee4fd4-3ef6-4a0e-b2fd-054e6780f32d?REQUEST=GETCAPABILITIES&amp;SERVICE=WCS</p> </li> <li> <p>USGS ScienceBase</p> </li> <li>Repository : https://www.sciencebase.gov/catalog/</li> <li>Get Capabilities URL : https://sciencebase.usgs.gov/geoserver/ows?service=WCS&amp;acceptversions=2.0.1&amp;request=GetCapabilities</li>"},{"location":"samples_for_discussion/#accessing-to-csw-services-with-python","title":"Accessing to CSW services with Python","text":"<p>Please check first the documentation page of the OWSLib.</p> <pre><code># Get the CSW class from the OWSLib.\nfrom owslib.csw import CatalogueServiceWeb\nfrom owslib.fes import PropertyIsLike\n#Specify the CSW Server\nmy_csw = CatalogueServiceWeb('https://geoportal.bgr.de/smartfindersdi-csw/api?')\n#Check the available operations for the CSW service\nfor op in my_csw.operations:\nprint(op.name)\n# Prepare the query for listing relevant services or data sources\nbremen_query = PropertyIsLike('csw:AnyText', '%Bremen%')\n# Get results of the given query\nmy_csw.getrecords2(constraints=[bremen_query], maxrecords=10)\n# Alternatively, you can use CQL (Common Query Language) expressions:\n#my_csw.getrecords2(cql='csw:AnyText like \"%Bremen%\"')\n# Learn how many records fits actually to our query:\nprint(my_csw.results)\n# Check the available attributes and methods of any instance in the records object\n# print(dir( next(iter(my_csw.records)) ) )\nfor x in my_csw.records:\nprint(my_csw.records[x].identifier, ' : ', my_csw.records[x].title)\n</code></pre> <pre><code>GetCapabilities\nGetRecords\nGetRecordById\nDescribeRecord\nHarvest\n{'matches': 15, 'returned': 10, 'nextrecord': 11}\n4466C8F0-3CA5-4098-9869-DBA4269CF0C3  :  Boden\u00fcbersichtskarte 1:200.000 (B\u00dcK200) - CC3110 Bremerhaven\n3EE608D6-D46F-4406-933F-2492C55308D3  :  Boden\u00fcbersichtskarte 1:200.000 (B\u00dcK200) - CC3118 Hamburg-West\nAC3815DC-663E-4325-9283-CAC631989F15  :  Karte der oberfl\u00e4chennahen Rohstoffe der Bundesrepublik Deutschland 1:200.000 (KOR200) - CC 3118 Hamburg-West\nB36CD520-A63B-4DEF-8F83-79DE64E07236  :  Boden\u00fcbersichtskarte 1:200.000 (B\u00dcK200) - CC2310 Helgoland\n8b70fe0f-0b03-477b-a3cd-c0f13a2c41b2  :  3D Modell des tieferen Untergrundes des Norddeutschen Beckens\n66CFEE61-8B60-4DA7-9632-56753CE0BFE8  :  Schutzpotenzial der Grundwasser\u00fcberdeckung\na3f2f6a5-120c-4732-97a0-1db01f26557d  :  Processed seismic data of Cruise HE242\nd973f1af-db9f-4632-bd05-8964cc906b38  :  Processed seismic data of Cruise AL278 2006\n8BEBDE77-8C6A-48D5-BBAA-C7D7EF01D85D  :  Schutzpotenzial der Grundwasser\u00fcberdeckung (WMS)\n2bd333c5-ed2b-4bc2-9c43-eb735ba37f6c  :  Hubschrauber-Elektromagnetik (HEM) Gebiet 196 Gnarrenburg\n</code></pre>"},{"location":"samples_for_discussion/#accessing-to-wms-services-with-python","title":"Accessing to WMS services with Python","text":"<pre><code>from owslib.wms import WebMapService as wms\n# Add a WebMapService object using its alias\nmy_wms = wms('https://geoservice.dlr.de/eoc/elevation/wms?')\n# Inspect the service type, version and title\nprint(my_wms.identification.type)\nprint(my_wms.identification.version)\nprint(my_wms.identification.title, '\\n')\n# Check the available operations for the WMS service\nops_list = []\nfor op in my_wms.operations:\nops_list.append(op.name)\nprint(ops_list, '\\n')\n# Check the layers available in the WMS service\nprint( list(my_wms.contents) )\n# Check the supported image formats by the WMS service\n# print(my_wms.getOperationByName('GetMap').formatOptions)\n</code></pre> <pre><code>OGC:WMS\n1.1.1\nEOC Elevation Map Service\n\n['GetCapabilities', 'GetMap', 'GetFeatureInfo', 'DescribeLayer', 'GetLegendGraphic', 'GetStyles']\n\n['srtm_x-sar_mosaic', 'srtm_x-sar_hillshade_mosaic', 'srtm_x-sar_dem_mosaic', 'TDM90_AM2', 'TDM90_AMP', 'TDM90_COM', 'TDM90_COV', 'TDM90_DEM', 'TDM90_HEM', 'TDM90_LSM', 'TDM90_WAM', 'TDM_POLARDEM90_ANT_DEM', 'TDM_POLARDEM90_ANT_HSC', 'TDM_POLARDEM90_ANT_HSM', 'TDM_POLARDEM_ANT_COASTLINE', 'srtm_x-sar_hem_mosaic']\n</code></pre> <pre><code>import requests\nfrom IPython.display import Image\n# Decide to which extent must be rendered with which CRS. Use your GIS app if you need.\n# SAMPLE GETMAP REQUEST WAS:\nsample_request = \"\"\"https://geoservice.dlr.de/eoc/elevation/wms?\\\nSERVICE=WMS\\\n&amp;VERSION=1.3.0\\\n&amp;REQUEST=GetMap\\\n&amp;BBOX=47,9.05,47.2,9.25\\\n&amp;CRS=EPSG:4326\\\n&amp;WIDTH=1200\\\n&amp;HEIGHT=1200\\\n&amp;LAYERS=srtm_x-sar_dem_mosaic\\\n&amp;STYLES=\\\n&amp;FORMAT=image/png\\\n&amp;DPI=96\\\n&amp;MAP_RESOLUTION=96\\\n&amp;FORMAT_OPTIONS=dpi:96\\\n&amp;TRANSPARENT=TRUE\"\"\"\n# So, you can test it with requests library too:\ntest_wms = requests.get(sample_request)\n# Check the available methods and attributes for the requests object:\n# print(dir(test_wms))\n# Render the response\n# Image(test_wms.content)\n# If your test goes well with the sample URL, you can specify your own request\nimg = my_wms.getmap(\nlayers=['srtm_x-sar_mosaic'],\nsize=[300, 300],\nsrs=\"EPSG:4326\",\nbbox=[47,9.05,47.2,9.25],\nformat=\"image/png\")\nImage(img.read())\n</code></pre>"},{"location":"samples_for_discussion/#accessing-to-wmts-services-using-python","title":"Accessing to WMTS services using Python","text":"<pre><code>from owslib.wmts import WebMapTileService as wmts\nmy_wmts = wmts('https://sgx.geodatenzentrum.de/wmts_basemapde')\nprint(my_wmts.identification.type)\nprint(my_wmts.identification.version)\nprint(my_wmts.identification.title, '\\n')\n# Check the available layers for the WMTS service\nprint( list(my_wmts.contents), '\\n' )\n# Check the available TileMatrixSets in the WMTS service\nprint(my_wmts.tilematrixsets, '\\n')\n# Store the Capabilities document on to your computer\nwith open(\"responses/samples_for_discussion/my_wmts_servicexml.xml\", \"wb\") as wmts_xml:\nwmts_xml.write(my_wmts.getServiceXML())\nprint ('File (' + wmts_xml.name + ') has been saved.')\n</code></pre> <pre><code>OGC WMTS\n1.0.0\nWMTS DE BASEMAP.DE WEB RASTER\n\n['de_basemapde_web_raster_farbe', 'de_basemapde_web_raster_grau']\n\n{'DE_EPSG_25832_ADV': &lt;owslib.wmts.TileMatrixSet object at 0x7e95475eb4a0&gt;, 'DE_EPSG_3857_ADV': &lt;owslib.wmts.TileMatrixSet object at 0x7e95475e80e0&gt;, 'DE_EPSG_25833_ADV': &lt;owslib.wmts.TileMatrixSet object at 0x7e95475e9c10&gt;, 'GLOBAL_WEBMERCATOR': &lt;owslib.wmts.TileMatrixSet object at 0x7e95475ead20&gt;}\n\nFile (responses/samples_for_discussion/my_wmts_servicexml.xml) has been saved.\n</code></pre> <pre><code>img = my_wmts.gettile(\nlayer='de_basemapde_web_raster_farbe',\ntilematrixset=\"DE_EPSG_25832_ADV\",\ntilematrix='01',\nrow=1,\ncolumn=1,\nformat=\"image/png\")\nImage(img.read())\n</code></pre>"},{"location":"samples_for_discussion/#accessing-to-wfs-with-python","title":"Accessing to WFS with Python","text":"<pre><code>from owslib.wfs import WebFeatureService as wfs\nmy_wfs = wfs('https://gdi.berlin.de/services/wfs/welterbe?')\n# Inspect the service type, version and title\nprint(my_wfs.identification.type)\nprint(my_wfs.identification.version)\nprint(my_wfs.identification.title, '\\n')\n# List available operations with a Python comprehension (shorten function)\nop_list = [op.name for op in my_wfs.operations]\nprint( op_list , '\\n')\n# Check the available contents for the WFS service\nprint( list(my_wfs.contents), '\\n' )\n# Get help document for a selected operation\n#help(my_wfs.getfeature)\n# Sample GetFeature Request URL:\n# https://gdi.berlin.de/services/wfs/welterbe?\n#SERVICE=WFS&amp;REQUEST=GetFeature&amp;VERSION=2.0.0&amp;\n#TYPENAMES=welterbe:welterbe&amp;STARTINDEX=0&amp;COUNT=3&amp;SRSNAME=urn:ogc:def:crs:EPSG::25833\nmy_objects = my_wfs.getfeature(\ntypename = ['welterbe:welterbe'],\nsrsname = 'urn:ogc:def:crs:EPSG::25833',\nmaxfeatures = 3,\nstartindex = 0\n)\n# Check the type of the request.\n# print( type(my_objects) )\n# Check the supported image formats by the WMS service\nprint(my_wfs.getOperationByName('GetFeature').formatOptions)\n# Store the response file on to your computer\nwith open(\"responses/samples_for_discussion/my_wfs_response.gml\", \"wb\") as wfs_gml:\nwfs_gml.write(my_objects.read())\nprint ('File (' + wfs_gml.name + ') has been saved.')\n</code></pre> <pre><code>WFS\n1.0.0\nWelterbest\u00e4tten Berlin\n\n['GetCapabilities', 'DescribeFeatureType', 'GetFeature']\n\n['welterbe:welterbe']\n\n['{http://www.opengis.net/wfs}GML2']\nFile (responses/samples_for_discussion/my_wfs_response.gml) has been saved.\n</code></pre>"},{"location":"samples_for_discussion/#parsing-xmlgml-in-python","title":"Parsing XML/GML in Python","text":"<p>XML/GML files are often structured as complex data models. Storing responses is therefore not always sufficient to understand the data content. Despite this challenge, we have multiple options for understanding the structure of data models: - Open downloaded data with an XML Software (see picture below) - Download XML Schema (XSD files) using the DescribeFeatureType operation - Reading the data source documentation that may be provided by the provider - An additional solution can be parsing XML files in Python with help of xmltodict library.</p> <p></p> <pre><code>import xmltodict as xd\nimport pprint \nwith open(\"responses/samples_for_discussion/my_wfs_response.gml\", \"r\") as stored_wfs:\nwfs_text = stored_wfs.read()\nwfs_text_enc = wfs_text.encode('utf-8')\nmy_dict = xd.parse(wfs_text_enc)\nmy_pp = pprint.PrettyPrinter(indent=4)\nmy_pp.pprint(my_dict['wfs:FeatureCollection']['gml:featureMember'][1]['welterbe:welterbe']['gml:boundedBy'])\n</code></pre> <pre><code>{   'gml:Box': {   '@srsName': 'http://www.opengis.net/gml/srs/epsg.xml#25833',\n                   'gml:coordinates': {   '#text': '393520.19630308,5822766.23041044 '\n                                                   '393944.72582015,5823161.95202459',\n                                          '@cs': ',',\n                                          '@decimal': '.',\n                                          '@ts': ' '}}}\n</code></pre>"},{"location":"samples_for_discussion/#accessing-to-ogc-api-features-with-python","title":"Accessing to OGC API - Features with Python","text":"<pre><code>from owslib.ogcapi.features import Features as ftr\nimport pprint\nmy_pp = pprint.PrettyPrinter(indent=2)\nmy_api = ftr('https://ogc-api.nrw.de/lika/v1/')\n# Print the Conformance document\n# print(my_pp.pprint(my_api.conformance()))\nprint( list(my_api.feature_collections()) , '\\n')\n# Print the information of parcel collection\nprint( my_api.collection('flurstueck')['id'] )\nprint( my_api.collection('flurstueck')['title'] )\nprint( my_api.collection('flurstueck')['extent']['temporal'] , '\\n')\n# Check the queryables for a specific collection\n# Sample request: https://ogc-api.nrw.de/lika/v1/collections/flurstueck/queryables?f=json\n# print(my_pp.pprint(my_api.collection_queryables('flurstueck')))\n# Check an instance from the collection\n# Sample request : https://ogc-api.nrw.de/lika/v1/collections/flurstueck/items/05510005500013______?f=json\nmy_sample = my_api.collection_item(collection_id='flurstueck', identifier='05510005500013______')\n#print( my_pp.pprint(my_sample) )\n# You can also list features with using following queryables:\n# gemaschl: Gemarkung-Schl\u00fcssel: district key \n# flur: Bezeichnung/Name der Flur: Description / name of the field\n# flstnrzae: Z\u00e4hler der Flurst\u00fccksnummer: Counter of the parcel number\nmy_query = my_api.collection_items('flurstueck', gemaschl='055100', flur='55', flstnrzae='13')\n# my_pp.pprint(my_query)\n</code></pre> <pre><code>['flurstueck', 'flurstueck_punkt', 'gebaeude_bauwerk', 'katasterbezirk', 'nutzung', 'nutzung_flurstueck', 'verwaltungseinheit']\n\nflurstueck\nFlurst\u00fcck\n{'interval': [['2008-05-20T12:10:43Z', '2023-09-08T04:24:02Z']], 'trs': 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'}\n</code></pre>"},{"location":"samples_for_discussion/#accessing-to-wcs-services-with-python","title":"Accessing to WCS services with Python","text":"<p>If you want to try Copernicus Hub, please register first, then go to \u201cUser Dashboard\u201d &gt; \u201cConfiguration Utility\u201d. Select \u201cFull WMS Template\u201d and save it. You will find your token under the \u201cService Entry Points\u201d pane.</p> <pre><code>from owslib.wcs import WebCoverageService as wcs\nfrom IPython.display import Image\n# &lt;INSTANCE_ID&gt; is the user token. Replace it with yours.\n# Murat Kendirs token : 81ee4fd4-3ef6-4a0e-b2fd-054e6780f32d\nmy_wcs = wcs('https://sh.dataspace.copernicus.eu/ogc/wcs/&lt;INSTANCE_ID&gt;?')\nprint(my_wcs.identification.type)\nprint(my_wcs.identification.version)\nprint(my_wcs.identification.title)\n# List available operations with a Python comprehension\nop_list = [op.name for op in my_wcs.operations]\nprint( op_list , '\\n')\n# Print available coverages\nprint(my_wcs.contents.keys(), '\\n')\n# Print the Bounding Box for the coverage\nprint(my_wcs.contents['TRUE_COLOR'].boundingboxes, '\\n')\n# Print available output options:\nprint( my_wcs.getOperationByName('GetCoverage').methods )\n#help(my_wcs.getCoverage)\ncov = my_wcs.getCoverage(\nidentifier=\"TRUE_COLOR\",\nformat=\"image/png\",\ncrs=\"EPSG:3857\",\nresponse_crs=\"EPSG:3857\",\nbbox=(1245054,6061402,1327254,6203842),\nversion=\"1.0.0\",\nwidth=922 ,\nheight=1598)\nrequested_coverage = cov.read()\n# Store the Capabilities document on to your computer\nwith open(\"responses/samples_for_discussion/my_wcs_sample_query.png\", \"wb\") as wcs_sample:\nwcs_sample.write(requested_coverage)\nprint ('File (' + wcs_sample.name + ') has been saved.')\nImage(cov.read())\n</code></pre> <pre><code>OGC:WCS\n1.0.0\nSentinel Hub WCS service - Murat Kendir\n['GetCapabilities', 'DescribeCoverage', 'GetCoverage']\n\ndict_keys(['AGRICULTURE', 'ARI1', 'ARI2', 'ATMOSPHERIC_PENETRATION', 'B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B10', 'B11', 'B12', 'B8A', 'BAI', 'BATHYMETRIC', 'CHL_RED_EDGE', 'CRI1', 'CRI2', 'EVI', 'EVI2', 'FALSE_COLOR', 'FALSE_COLOR_URBAN', 'GEOLOGY', 'GRVI1', 'LAI_SAVI', 'MOISTURE_INDEX', 'MSAVI2', 'NBR_RAW', 'NDVI', 'NDVI_GRAY', 'NDVI_GREEN_GRAY', 'NDWI', 'PSRI', 'PSRI_NIR', 'RED_EDGE_NDVI', 'RE_NDWI', 'RGB_11_8_3', 'RGB_4_3_1', 'RGB_8_11_12', 'RGB_8_11_4', 'RGB_8_5_4', 'RGB_8_6_4', 'SAVI', 'SWIR', 'TRUE_COLOR'])\n\n[{'nativeSrs': 'EPSG:3857', 'bbox': (-20037508.342789, -20037508.342789, 20037508.342789, 20037508.342789)}]\n\n[{'type': 'Get', 'url': 'https://sh.dataspace.copernicus.eu/ogc/wcs/81ee4fd4-3ef6-4a0e-b2fd-054e6780f32d?'}]\nFile (responses/samples_for_discussion/my_wcs_sample_query.png) has been saved.\n</code></pre> <p></p>"},{"location":"samples_for_discussion/#run-kartozageoserver-to-experience-publishing-ogc-web-services","title":"Run Kartoza/Geoserver to experience publishing OGC web services","text":"<p>TIP: If you want to run the following bash script in the Windows CLI (Command Prompt), replace the \u201c\\\u201d characters with \u201c^\u201d. These are escape characters used in CLIs to ignore the next character (in our example we used them to escape the usually invisible \u201cnewline\u201d \\n characters).</p> <p><pre><code>docker run --interactive --tty \\\n--publish 8080:8080 \\\n--volume \"./shared_w_geoserver\":\"/home/murat/geodata\"\\\n-e GEOSERVER_ADMIN_USER=murat\\\n-e GEOSERVER_ADMIN_PASSWORD=password\\\nkartoza/geoserver\n</code></pre> Description of the Bash Script : - \"docker run --interactively --tty\"   - gives command to run a specific docker image interactively (without closing the interface) - \"--publish 8080:8080\"   - This option forwards the internal port \"8080\" to the current local machine (host machine). - ' --volume \"./shared_w_geoserver\":\"/home/murat/geodata\" '   - This option used to share a folder between host machine and the docker container. The second directory is the one in the container. - \"-e GEOSERVER_ADMIN_USER=murat\"   - This option specifies an environmental variable, which will be used by geoserver during the initialization. - \"-e GEOSERVER_ADMIN_PASSWORD=password\"   - Similarly, sets the password as environmental variable for geoserver. - \"kartoza/geoserver\"   - is the name of the docker image. If you are not sure about the docker image, you can check it always by typing <code>docker image list</code>.</p>"}]}